FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.3.2710
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 15 7D LJMP  PSoC_GPIO_ISR      (0145)     ljmp	PSoC_GPIO_ISR
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 07 F9 LJMP  _Timer16_1_ISR     (0153)     ljmp	_Timer16_1_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 06 E1 LJMP  _Timer16_2_ISR     (0161)     ljmp	_Timer16_2_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
003C: 7D 05 A4 LJMP  _Timer32_1_ISR     (0177)     ljmp	_Timer32_1_ISR
003F: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
0040: 7D 0B FF LJMP  _ADCINC12_1_TMR_ISR(0181)     ljmp	_ADCINC12_1_TMR_ISR
0043: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
0044: 7D 0B FC LJMP  _ADCINC12_1_CNT_ISR(0185)     ljmp	_ADCINC12_1_CNT_ISR
0047: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [0xF8],0x0         (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [0xF9],0x0         (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 05 36 LCALL 0x0536             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 04    MOV   A,0x4              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 2F    MOV   X,0x2F             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 31    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 31    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 31    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 30    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 31    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 31 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 30    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 30    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 31    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 31 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 30    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
0129: 70 EF    AND   F,0xEF             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
                                        (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
012E: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0130: 62 E0 00 MOV   REG[0xE0],0x0      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0133: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0136: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
0138: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013B: 7C 0D BB LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
013E: 8F FF    JMP   0x013E             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0140: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0142: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: .\main.asm                        (0001) ;-----------------------------------------------------------------------------
                                        (0002) ; Assembly main line
                                        (0003) ;-----------------------------------------------------------------------------
                                        (0004) 
                                        (0005) include "m8c.inc"       ; part specific constants and macros
                                        (0006) include "memory.inc"    ; Constants & macros for SMM/LMM and Compiler
                                        (0007) include "PSoCAPI.inc"   ; PSoC API definitions for all User Modules
                                        (0008) 
                                        (0009) area bss(RAM)
                                        (0010) 
                                        (0011) msec:: 		BLK 1
                                        (0012) milisec:: 	BLK 1
                                        (0013) sec:: 		BLK 1
                                        (0014) min:: 		BLK 1
                                        (0015) hour:: 		BLK 1
                                        (0016) 
                                        (0017) watchSwitch:: 	BLK 1
                                        (0018) modeSwitch:: 	BLK 1
                                        (0019) modeCounter: 	BLK 1
                                        (0020) 
                                        (0021) accuracy::	 	BLK 1
                                        (0022) 
                                        (0023) historyCounter::BLK 1
                                        (0024) 
                                        (0025) mem_sec1:: 		BLK 1
                                        (0026) mem_min1:: 		BLK 1
                                        (0027) mem_hour1:: 	BLK 1
                                        (0028) 
                                        (0029) mem_sec2:: 		BLK 1
                                        (0030) mem_min2:: 		BLK 1
                                        (0031) mem_hour2::		BLK 1
                                        (0032) 
                                        (0033) mem_sec3:: 		BLK 1
                                        (0034) mem_min3:: 		BLK 1
                                        (0035) mem_hour3::		BLK 1
                                        (0036) 
                                        (0037) mem_sec4:: 		BLK 1
                                        (0038) mem_min4:: 		BLK 1
                                        (0039) mem_hour4::		BLK 1
                                        (0040) 
                                        (0041) mem_sec5:: 		BLK 1
                                        (0042) mem_min5:: 		BLK 1
                                        (0043) mem_hour5::		BLK 1
                                        (0044) 
                                        (0045) mem_shortsec:: 	BLK 1
                                        (0046) mem_shortmin:: 	BLK 1
                                        (0047) mem_shorthour::	BLK 1
                                        (0048) 
                                        (0049) mem_longsec:: 	BLK 1
                                        (0050) mem_longmin:: 	BLK 1
                                        (0051) mem_longhour:: 	BLK 1
                                        (0052) 
                                        (0053) mem_avgsec:: 	BLK 1
                                        (0054) mem_avgmin:: 	BLK 1
                                        (0055) mem_avghour:: 	BLK 1
                                        (0056) 
                                        (0057) iResult::		BLK 2                ; ADC result variable
                                        (0058) threshold_msb::	BLK 1
                                        (0059) threshold_lsb::	BLK 1
                                        (0060) 
                                        (0061) 
                                        (0062) area text(ROM,REL)
                                        (0063) 
                                        (0064) export _main:
                                        (0065) 
                                        (0066) _main:
                                        (0067) 
                                        (0068) 	mov [watchSwitch],0x00
                                        (0069) 	mov [modeSwitch],0x00
                                        (0070) 	mov [modeCounter],0x01
                                        (0071) 	mov [accuracy],0x01
                                        (0072) 	mov [historyCounter],0x01
                                        (0073) 	
                                        (0074) 	mov [milisec], 0x00
                                        (0075) 	mov [msec], 0x00
                                        (0076) 	mov [sec], 0x00
                                        (0077) 	mov [min], 0x00
                                        (0078) 	mov [hour], 0x00
                                        (0079) 	
                                        (0080) 	mov [mem_sec1],0x00
                                        (0081) 	mov [mem_min1],0x00
                                        (0082) 	mov [mem_hour1],0x00
                                        (0083) 	mov [mem_sec2],0x00
                                        (0084) 	mov [mem_min2],0x00
                                        (0085) 	mov [mem_hour2],0x00
                                        (0086) 	mov [mem_sec3],0x00
                                        (0087) 	mov [mem_min3],0x00
                                        (0088) 	mov [mem_hour3],0x00
                                        (0089) 	mov [mem_sec4],0x00
                                        (0090) 	mov [mem_min4],0x00
                                        (0091) 	mov [mem_hour4],0x00
                                        (0092) 	mov [mem_sec5],0x00
                                        (0093) 	mov [mem_min5],0x00
                                        (0094) 	mov [mem_hour5],0x00
                                        (0095) 	mov [mem_shortsec],0x00
                                        (0096) 	mov [mem_shortmin],0x00
                                        (0097) 	mov [mem_shorthour],0x00
                                        (0098) 	mov [mem_longsec],0x00
                                        (0099) 	mov [mem_longmin],0x00
                                        (0100) 	mov [mem_longhour],0x00
                                        (0101) 	mov [mem_avgsec],0x00
                                        (0102) 	mov [mem_avgmin],0x00
                                        (0103) 	mov [mem_avghour],0x00
                                        (0104) 	
                                        (0105) 	mov [threshold_lsb],0x15
                                        (0106) 	mov [threshold_msb],0x01
                                        (0107) 	
                                        (0108) 	mov   A, PGA_1_MEDPOWER
                                        (0109)     lcall PGA_1_Start             ; Turn on PGA power
                                        (0110)     mov   A, ADCINC12_1_MEDPOWER
                                        (0111)     lcall ADCINC12_1_Start        ; Turn on ADC power
                                        (0112)     mov   A, 0
                                        (0113)     lcall ADCINC12_1_GetSamples   ; Sample forever
                                        (0114) 
                                        (0115) 	lcall LED_1_Start
                                        (0116) 	lcall LED_2_Start
                                        (0117) 	lcall LED_3_Start
                                        (0118) 	lcall LED_4_Start
                                        (0119) 	
                                        (0120) 	lcall LCD_1_Start             ; Init the LCD
                                        (0121) 	
                                        (0122) 	M8C_SetBank0
                                        (0123) 	or reg[PRT1IE], 0x01
                                        (0124) 	
                                        (0125) 	M8C_EnableGInt
                                        (0126) 	M8C_EnableIntMask INT_MSK0, INT_MSK0_GPIO
                                        (0127) 	
                                        (0128) 	
                                        (0129) mainloop:
                                        (0130) 	mov   A, 0                    ; row
                                        (0131)    	mov   X, 0                    ; column
                                        (0132)    	lcall LCD_1_Position
                                        (0133)    	mov   A, >sRomString20
                                        (0134)    	mov   X, <sRomString20
                                        (0135)    	lcall LCD_1_PrCString         ; Display string
                                        (0136) 	mov   A, 1                    ; row
                                        (0137)    	mov   X, 0                    ; column
                                        (0138)    	lcall LCD_1_Position
                                        (0139)    	mov   A, >sRomString21
                                        (0140)    	mov   X, <sRomString21
                                        (0141)    	lcall LCD_1_PrCString         ; Display string
                                        (0142) 
                                        (0143) 	cmp [modeSwitch],0x01
                                        (0144) 	jz switchMode
                                        (0145) 	
                                        (0146) 	cmp [watchSwitch],0x01
                                        (0147) 	jz mainloop
                                        (0148) 	
                                        (0149) 	cmp [watchSwitch],0x00
                                        (0150) 	jz mainloop
                                        (0151) 	
                                        (0152) 
                                        (0153) switchMode:
                                        (0154) 	mov [modeSwitch],0x00
                                        (0155) 	cmp [modeCounter],0x01
                                        (0156) 	jz stopWatchMode
                                        (0157) 	cmp [modeCounter],0x02
                                        (0158) 	jz accuracyMode
                                        (0159) 	cmp [modeCounter],0x03
                                        (0160) 	jz memoryMode
                                        (0161) 	cmp [modeCounter],0x04
                                        (0162) 	jz soundSensitivityMode
                                        (0163) 	cmp [modeCounter],0x05
                                        (0164) 	jz soundWatchMode
                                        (0165) 	
                                        (0166) 	
                                        (0167) 
                                        (0168) stopWatchMode:
                                        (0169) 	lcall LED_1_On
                                        (0170) 	mov [modeCounter],0x02
                                        (0171) 	lcall stopWatchModeStart
                                        (0172) 	mov [modeSwitch],0x00
                                        (0173) 	lcall LED_1_Off
                                        (0174) 	jmp switchMode
                                        (0175) 
                                        (0176) 
                                        (0177) accuracyMode:
                                        (0178) 	lcall LED_2_On
                                        (0179) 	mov [modeCounter],0x03
                                        (0180) 	lcall accuracyModeStart
                                        (0181) 	mov [modeSwitch],0x00
                                        (0182) 	lcall LED_2_Off
                                        (0183) 	jmp switchMode
                                        (0184) 	
                                        (0185) 	
                                        (0186) memoryMode:
                                        (0187) 	lcall LED_3_On
                                        (0188) 	mov [modeCounter],0x04
                                        (0189) 	lcall displayMemHistory
                                        (0190) 	mov [modeSwitch],0x00
                                        (0191) 	lcall LED_3_Off
                                        (0192) 	jmp switchMode
                                        (0193) 	
                                        (0194) 	
                                        (0195) soundSensitivityMode:
                                        (0196) 	lcall LED_4_On
                                        (0197) 	mov [modeCounter],0x05
                                        (0198) 	lcall startSoundSensitivityMode
                                        (0199) 	mov [modeSwitch],0x00
                                        (0200) 	lcall LED_4_Off
                                        (0201) 	jmp switchMode
                                        (0202) 
                                        (0203) 
                                        (0204) soundWatchMode:
                                        (0205) 	lcall LED_1_On
                                        (0206) 	lcall LED_3_On
                                        (0207) 	mov [modeCounter],0x00
                                        (0208) 	lcall startSoundWatchMode
                                        (0209) 	mov [modeSwitch],0x00
                                        (0210) 	lcall LED_1_Off
                                        (0211) 	lcall LED_3_Off
                                        (0212) 	jmp switchMode
                                        (0213) 
                                        (0214) area    lit
                                        (0215) 
                                        (0216) .LITERAL
                                        (0217) sRomString1::
                                        (0218) DS "Stopwatch Mode: "
                                        (0219) db 00h
                                        (0220) .ENDLITERAL
                                        (0221) 
                                        (0222) .LITERAL
                                        (0223) sRomString2::
                                        (0224) DS ":"
                                        (0225) db 00h
                                        (0226) .ENDLITERAL
                                        (0227) 
                                        (0228) .LITERAL
                                        (0229) sRomString3::
                                        (0230) DS "."
                                        (0231) db 00h	
                                        (0232) .ENDLITERAL
                                        (0233) 
                                        (0234) .LITERAL
                                        (0235) sRomString4::
                                        (0236) DS ".00"
                                        (0237) db 00h
                                        (0238) .ENDLITERAL
                                        (0239) 
                                        (0240) .LITERAL
                                        (0241) sRomString5::
                                        (0242) DS "Accuracy Mode: "
                                        (0243) db 00h
                                        (0244) .ENDLITERAL
                                        (0245) 
                                        (0246) .LITERAL
                                        (0247) sRomString6::
                                        (0248) DS "1 second       "
                                        (0249) db 00h
                                        (0250) .ENDLITERAL
                                        (0251) 
                                        (0252) .LITERAL
                                        (0253) sRomString7::
                                        (0254) DS "1/2 second     "
                                        (0255) db 00h
                                        (0256) .ENDLITERAL
                                        (0257) 
                                        (0258) .LITERAL
                                        (0259) sRomString8::
                                        (0260) DS "1/10 second    "
                                        (0261) db 00h
                                        (0262) .ENDLITERAL
                                        (0263) 
                                        (0264) .LITERAL
                                        (0265) sRomString9::
                                        (0266) DS "Memory Mode:   "
                                        (0267) db 00h
                                        (0268) .ENDLITERAL
                                        (0269) 
                                        (0270) .LITERAL
                                        (0271) sRomString10::
                                        (0272) DS "SavedReading 1:"
                                        (0273) db 00h
                                        (0274) .ENDLITERAL
                                        (0275) 
                                        (0276) .LITERAL
                                        (0277) sRomString11::
                                        (0278) DS "SavedReading 2:"
                                        (0279) db 00h
                                        (0280) .ENDLITERAL
                                        (0281) 
                                        (0282) .LITERAL
                                        (0283) sRomString12::
                                        (0284) DS "SavedReading 3:"
                                        (0285) db 00h
                                        (0286) .ENDLITERAL
                                        (0287) 
                                        (0288) .LITERAL
                                        (0289) sRomString13::
                                        (0290) DS "SavedReading 4:"
                                        (0291) db 00h
                                        (0292) .ENDLITERAL
                                        (0293) 
                                        (0294) .LITERAL
                                        (0295) sRomString14::
                                        (0296) DS "SavedReading 5:"
                                        (0297) db 00h
                                        (0298) .ENDLITERAL
                                        (0299) 
                                        (0300) .LITERAL
                                        (0301) sRomString15::
                                        (0302) DS "ShortestReading"
                                        (0303) db 00h
                                        (0304) .ENDLITERAL
                                        (0305) 
                                        (0306) .LITERAL
                                        (0307) sRomString16::
                                        (0308) DS "LongestReading:"
                                        (0309) db 00h
                                        (0310) .ENDLITERAL
                                        (0311) 
                                        (0312) .LITERAL
                                        (0313) sRomString17::
                                        (0314) DS "AvgOfReadings: "
                                        (0315) db 00h
                                        (0316) .ENDLITERAL
                                        (0317) 
                                        (0318) .LITERAL
                                        (0319) sRomString18::
                                        (0320) DS "Resolution=    "
                                        (0321) db 00h
                                        (0322) .ENDLITERAL
                                        (0323) 
                                        (0324) .LITERAL
                                        (0325) sRomString19::
                                        (0326) DS "Push Button    "
                                        (0327) db 00h
                                        (0328) .ENDLITERAL
                                        (0329) 
                                        (0330) .LITERAL
                                        (0331) sRomString20::
                                        (0332) DS "Sound-Control  "
                                        (0333) db 00h
                                        (0334) .ENDLITERAL
                                        (0335) 
                                        (0336) .LITERAL
                                        (0337) sRomString21::
                                        (0338) DS "Stopwatch      "
                                        (0339) db 00h
                                        (0340) .ENDLITERAL
                                        (0341) 
                                        (0342) .LITERAL
                                        (0343) sRomString22::
                                        (0344) DS "00000"
                                        (0345) db 00h
                                        (0346) .ENDLITERAL
                                        (0347) 
                                        (0348) .LITERAL
                                        (0349) sRomString23::
                                        (0350) DS "StopWatch Disp:"
                                        (0351) db 00h
                                        (0352) .ENDLITERAL
                                        (0353) 
                                        (0354) .LITERAL
                                        (0355) sRomString24::
                                        (0356) DS "Sound Sensi-   "
                                        (0357) db 00h
                                        (0358) .ENDLITERAL
                                        (0359) 
                                        (0360) .LITERAL
                                        (0361) sRomString25::
                                        (0362) DS "tivity Mode:   "
                                        (0363) db 00h
                                        (0364) .ENDLITERAL
                                        (0365) 
                                        (0366) .LITERAL
                                        (0367) sRomString26::
                                        (0368) DS "Detecting val: "
                                        (0369) db 00h
                                        (0370) .ENDLITERAL
                                        (0371) 
                                        (0372) .LITERAL
                                        (0373) sRomString27::
                                        (0374) DS "Sound-based    "
                                        (0375) db 00h
                                        (0376) .ENDLITERAL
                                        (0377) 
                                        (0378) .LITERAL
                                        (0379) sRomString28::
                                        (0380) DS "No history!    "
                                        (0381) db 00h
                                        (0382) .ENDLITERAL
                                        (0383) 
                                        (0384) .LITERAL
                                        (0385) sRomString29::
                                        (0386) DS "0"
                                        (0387) db 00h
                                        (0388) .ENDLITERAL
                                        (0389) 
                                        (0390) .terminate:
0331: 8F FF    JMP   0x0331             (0391)     jmp .terminate
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.3.2710
0431: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_timer1_Bank1
                                        (0006) export LoadConfigTBL_timer1_Bank0
                                        (0007) export LoadConfigTBL_timer1_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_timer1_Bank0:
                                        (0010) ;  Instance name ADCINC12_1, User Module ADCINC12
                                        (0011) ;       Instance name ADCINC12_1, Block Name ADC(ASD11)
                                        (0012) 	db		84h, 90h		;ADCINC12_1_AtoDcr0(ASD11CR0)
                                        (0013) 	db		85h, 00h		;ADCINC12_1_AtoDcr1(ASD11CR1)
                                        (0014) 	db		86h, 60h		;ADCINC12_1_AtoDcr2(ASD11CR2)
                                        (0015) 	db		87h, f0h		;ADCINC12_1_AtoDcr3(ASD11CR3)
                                        (0016) ;       Instance name ADCINC12_1, Block Name CNT(DBB21)
                                        (0017) 	db		47h, 00h		;ADCINC12_1_CounterCR0(DBB21CR0)
                                        (0018) 	db		45h, 00h		;ADCINC12_1_CounterDR1(DBB21DR1)
                                        (0019) 	db		46h, 00h		;ADCINC12_1_CounterDR2(DBB21DR2)
                                        (0020) ;       Instance name ADCINC12_1, Block Name TMR(DBB20)
                                        (0021) 	db		43h, 00h		;ADCINC12_1_TimerCR0(DBB20CR0)
                                        (0022) 	db		41h, 00h		;ADCINC12_1_TimerDR1(DBB20DR1)
                                        (0023) 	db		42h, 00h		;ADCINC12_1_TimerDR2(DBB20DR2)
                                        (0024) ;  Instance name LCD_1, User Module LCD
                                        (0025) ;  Instance name LED_1, User Module LED
                                        (0026) ;  Instance name LED_2, User Module LED
                                        (0027) ;  Instance name LED_3, User Module LED
                                        (0028) ;  Instance name LED_4, User Module LED
                                        (0029) ;  Instance name PGA_1, User Module PGA
                                        (0030) ;       Instance name PGA_1, Block Name GAIN(ACB01)
                                        (0031) 	db		75h, fdh		;PGA_1_GAIN_CR0(ACB01CR0)
                                        (0032) 	db		76h, 21h		;PGA_1_GAIN_CR1(ACB01CR1)
                                        (0033) 	db		77h, 20h		;PGA_1_GAIN_CR2(ACB01CR2)
                                        (0034) 	db		74h, 00h		;PGA_1_GAIN_CR3(ACB01CR3)
                                        (0035) ;  Instance name Timer16_1, User Module Timer16
                                        (0036) ;       Instance name Timer16_1, Block Name TIMER16_LSB(DBB00)
                                        (0037) 	db		23h, 00h		;Timer16_1_CONTROL_LSB_REG(DBB00CR0)
                                        (0038) 	db		21h, 4fh		;Timer16_1_PERIOD_LSB_REG(DBB00DR1)
                                        (0039) 	db		22h, 00h		;Timer16_1_COMPARE_LSB_REG(DBB00DR2)
                                        (0040) ;       Instance name Timer16_1, Block Name TIMER16_MSB(DBB01)
                                        (0041) 	db		27h, 04h		;Timer16_1_CONTROL_MSB_REG(DBB01CR0)
                                        (0042) 	db		25h, c3h		;Timer16_1_PERIOD_MSB_REG(DBB01DR1)
                                        (0043) 	db		26h, 00h		;Timer16_1_COMPARE_MSB_REG(DBB01DR2)
                                        (0044) ;  Instance name Timer16_2, User Module Timer16
                                        (0045) ;       Instance name Timer16_2, Block Name TIMER16_LSB(DCB02)
                                        (0046) 	db		2bh, 00h		;Timer16_2_CONTROL_LSB_REG(DCB02CR0)
                                        (0047) 	db		29h, 0fh		;Timer16_2_PERIOD_LSB_REG(DCB02DR1)
                                        (0048) 	db		2ah, 00h		;Timer16_2_COMPARE_LSB_REG(DCB02DR2)
                                        (0049) ;       Instance name Timer16_2, Block Name TIMER16_MSB(DCB03)
                                        (0050) 	db		2fh, 04h		;Timer16_2_CONTROL_MSB_REG(DCB03CR0)
                                        (0051) 	db		2dh, 27h		;Timer16_2_PERIOD_MSB_REG(DCB03DR1)
                                        (0052) 	db		2eh, 00h		;Timer16_2_COMPARE_MSB_REG(DCB03DR2)
                                        (0053) ;  Instance name Timer32_1, User Module Timer32
                                        (0054) ;       Instance name Timer32_1, Block Name TIMER32_ISB1(DBB11)
                                        (0055) 	db		37h, 00h		;Timer32_1_CONTROL_ISB1_REG(DBB11CR0)
                                        (0056) 	db		35h, 86h		;Timer32_1_PERIOD_ISB1_REG(DBB11DR1)
                                        (0057) 	db		36h, 00h		;Timer32_1_COMPARE_ISB1_REG(DBB11DR2)
                                        (0058) ;       Instance name Timer32_1, Block Name TIMER32_ISB2(DCB12)
                                        (0059) 	db		3bh, 00h		;Timer32_1_CONTROL_ISB2_REG(DCB12CR0)
                                        (0060) 	db		39h, 01h		;Timer32_1_PERIOD_ISB2_REG(DCB12DR1)
                                        (0061) 	db		3ah, 00h		;Timer32_1_COMPARE_ISB2_REG(DCB12DR2)
                                        (0062) ;       Instance name Timer32_1, Block Name TIMER32_LSB(DBB10)
                                        (0063) 	db		33h, 00h		;Timer32_1_CONTROL_LSB_REG(DBB10CR0)
                                        (0064) 	db		31h, 9fh		;Timer32_1_PERIOD_LSB_REG(DBB10DR1)
                                        (0065) 	db		32h, 00h		;Timer32_1_COMPARE_LSB_REG(DBB10DR2)
                                        (0066) ;       Instance name Timer32_1, Block Name TIMER32_MSB(DCB13)
                                        (0067) 	db		3fh, 04h		;Timer32_1_CONTROL_MSB_REG(DCB13CR0)
                                        (0068) 	db		3dh, 00h		;Timer32_1_PERIOD_MSB_REG(DCB13DR1)
                                        (0069) 	db		3eh, 00h		;Timer32_1_COMPARE_MSB_REG(DCB13DR2)
                                        (0070) ;  Global Register values Bank 0
                                        (0071) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0072) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0073) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0074) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0075) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0076) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0077) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0078) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0079) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0080) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0081) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0082) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0083) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0084) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0085) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0086) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0087) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0088) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0089) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0090) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0091) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0092) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0093) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0094) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0095) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0096) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0097) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0098) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0099) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0100) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0101) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0102) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0103) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0104) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0105) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0106) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0107) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0108) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0109) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0110) 	db		ffh
                                        (0111) LoadConfigTBL_timer1_Bank1:
                                        (0112) ;  Instance name ADCINC12_1, User Module ADCINC12
                                        (0113) ;       Instance name ADCINC12_1, Block Name ADC(ASD11)
                                        (0114) ;       Instance name ADCINC12_1, Block Name CNT(DBB21)
                                        (0115) 	db		44h, 21h		;ADCINC12_1_CounterFN(DBB21FN)
                                        (0116) 	db		45h, 55h		;ADCINC12_1_CounterSL(DBB21IN)
                                        (0117) 	db		46h, 40h		;ADCINC12_1_CounterOS(DBB21OU)
                                        (0118) ;       Instance name ADCINC12_1, Block Name TMR(DBB20)
                                        (0119) 	db		40h, 20h		;ADCINC12_1_TimerFN(DBB20FN)
                                        (0120) 	db		41h, 15h		;ADCINC12_1_TimerSL(DBA20IN)
                                        (0121) 	db		42h, 40h		;ADCINC12_1_TimerOS(DBA20OU)
                                        (0122) ;  Instance name LCD_1, User Module LCD
                                        (0123) ;  Instance name LED_1, User Module LED
                                        (0124) ;  Instance name LED_2, User Module LED
                                        (0125) ;  Instance name LED_3, User Module LED
                                        (0126) ;  Instance name LED_4, User Module LED
                                        (0127) ;  Instance name PGA_1, User Module PGA
                                        (0128) ;       Instance name PGA_1, Block Name GAIN(ACB01)
                                        (0129) ;  Instance name Timer16_1, User Module Timer16
                                        (0130) ;       Instance name Timer16_1, Block Name TIMER16_LSB(DBB00)
                                        (0131) 	db		20h, 00h		;Timer16_1_FUNC_LSB_REG(DBB00FN)
                                        (0132) 	db		21h, 06h		;Timer16_1_INPUT_LSB_REG(DBB00IN)
                                        (0133) 	db		22h, 40h		;Timer16_1_OUTPUT_LSB_REG(DBB00OU)
                                        (0134) ;       Instance name Timer16_1, Block Name TIMER16_MSB(DBB01)
                                        (0135) 	db		24h, 20h		;Timer16_1_FUNC_MSB_REG(DBB01FN)
                                        (0136) 	db		25h, 36h		;Timer16_1_INPUT_MSB_REG(DBB01IN)
                                        (0137) 	db		26h, 40h		;Timer16_1_OUTPUT_MSB_REG(DBB01OU)
                                        (0138) ;  Instance name Timer16_2, User Module Timer16
                                        (0139) ;       Instance name Timer16_2, Block Name TIMER16_LSB(DCB02)
                                        (0140) 	db		28h, 00h		;Timer16_2_FUNC_LSB_REG(DCB02FN)
                                        (0141) 	db		29h, 06h		;Timer16_2_INPUT_LSB_REG(DCB02IN)
                                        (0142) 	db		2ah, 40h		;Timer16_2_OUTPUT_LSB_REG(DCB02OU)
                                        (0143) ;       Instance name Timer16_2, Block Name TIMER16_MSB(DCB03)
                                        (0144) 	db		2ch, 20h		;Timer16_2_FUNC_MSB_REG(DCB03FN)
                                        (0145) 	db		2dh, 36h		;Timer16_2_INPUT_MSB_REG(DCB03IN)
                                        (0146) 	db		2eh, 40h		;Timer16_2_OUTPUT_MSB_REG(DCB03OU)
                                        (0147) ;  Instance name Timer32_1, User Module Timer32
                                        (0148) ;       Instance name Timer32_1, Block Name TIMER32_ISB1(DBB11)
                                        (0149) 	db		34h, 00h		;Timer32_1_FUNC_ISB1_REG(DBB11FN)
                                        (0150) 	db		35h, 36h		;Timer32_1_INPUT_ISB1_REG(DBB11IN)
                                        (0151) 	db		36h, 40h		;Timer32_1_OUTPUT_ISB1_REG(DBB11OU)
                                        (0152) ;       Instance name Timer32_1, Block Name TIMER32_ISB2(DCB12)
                                        (0153) 	db		38h, 00h		;Timer32_1_FUNC_ISB2_REG(DCB12FN)
                                        (0154) 	db		39h, 36h		;Timer32_1_INPUT_ISB2_REG(DCB12IN)
                                        (0155) 	db		3ah, 40h		;Timer32_1_OUTPUT_ISB2_REG(DCB12OU)
                                        (0156) ;       Instance name Timer32_1, Block Name TIMER32_LSB(DBB10)
                                        (0157) 	db		30h, 00h		;Timer32_1_FUNC_LSB_REG(DBB10FN)
                                        (0158) 	db		31h, 06h		;Timer32_1_INPUT_LSB_REG(DBB10IN)
                                        (0159) 	db		32h, 40h		;Timer32_1_OUTPUT_LSB_REG(DBB10OU)
                                        (0160) ;       Instance name Timer32_1, Block Name TIMER32_MSB(DCB13)
                                        (0161) 	db		3ch, 20h		;Timer32_1_FUNC_MSB_REG(DCB13FN)
                                        (0162) 	db		3dh, 36h		;Timer32_1_INPUT_MSB_REG(DCB13IN)
                                        (0163) 	db		3eh, 40h		;Timer32_1_OUTPUT_MSB_REG(DCB13OU)
                                        (0164) ;  Global Register values Bank 1
                                        (0165) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0166) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0167) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0168) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0169) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0170) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0171) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0172) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0173) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0174) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0175) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0176) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0177) 	db		e1h, feh		; OscillatorControl_1 register (OSC_CR1)
                                        (0178) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0179) 	db		dfh, 00h		; OscillatorControl_3 register (OSC_CR3)
                                        (0180) 	db		deh, 03h		; OscillatorControl_4 register (OSC_CR4)
                                        (0181) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0182) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0183) 	db		ffh
                                        (0184) AREA psoc_config(rom, rel)
                                        (0185) LoadConfigTBL_timer1_Ordered:
                                        (0186) ;  Ordered Global Register values
                                        (0187) 	M8C_SetBank0
0433: 62 00 00 MOV   REG[0x0],0x0       (0188) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0436: 71 10    OR    F,0x10             
                                        (0189) 	M8C_SetBank1
0438: 62 00 00 MOV   REG[0x0],0x0       (0190) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
043B: 62 01 FF MOV   REG[0x1],0xFF      (0191) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
043E: 70 EF    AND   F,0xEF             
                                        (0192) 	M8C_SetBank0
0440: 62 03 FF MOV   REG[0x3],0xFF      (0193) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
0443: 62 02 00 MOV   REG[0x2],0x0       (0194) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0446: 71 10    OR    F,0x10             
                                        (0195) 	M8C_SetBank1
0448: 62 02 00 MOV   REG[0x2],0x0       (0196) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
044B: 62 03 00 MOV   REG[0x3],0x0       (0197) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
044E: 70 EF    AND   F,0xEF             
                                        (0198) 	M8C_SetBank0
0450: 62 01 00 MOV   REG[0x1],0x0       (0199) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0453: 62 04 00 MOV   REG[0x4],0x0       (0200) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0456: 71 10    OR    F,0x10             
                                        (0201) 	M8C_SetBank1
0458: 62 04 9E MOV   REG[0x4],0x9E      (0202) 	mov	reg[04h], 9eh		; Port_1_DriveMode_0 register (PRT1DM0)
045B: 62 05 60 MOV   REG[0x5],0x60      (0203) 	mov	reg[05h], 60h		; Port_1_DriveMode_1 register (PRT1DM1)
045E: 70 EF    AND   F,0xEF             
                                        (0204) 	M8C_SetBank0
0460: 62 07 60 MOV   REG[0x7],0x60      (0205) 	mov	reg[07h], 60h		; Port_1_DriveMode_2 register (PRT1DM2)
0463: 62 06 00 MOV   REG[0x6],0x0       (0206) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0466: 71 10    OR    F,0x10             
                                        (0207) 	M8C_SetBank1
0468: 62 06 00 MOV   REG[0x6],0x0       (0208) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
046B: 62 07 01 MOV   REG[0x7],0x1       (0209) 	mov	reg[07h], 01h		; Port_1_IntCtrl_1 register (PRT1IC1)
046E: 70 EF    AND   F,0xEF             
                                        (0210) 	M8C_SetBank0
0470: 62 05 01 MOV   REG[0x5],0x1       (0211) 	mov	reg[05h], 01h		; Port_1_IntEn register (PRT1IE)
0473: 62 08 00 MOV   REG[0x8],0x0       (0212) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0476: 71 10    OR    F,0x10             
                                        (0213) 	M8C_SetBank1
0478: 62 08 7F MOV   REG[0x8],0x7F      (0214) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
047B: 62 09 80 MOV   REG[0x9],0x80      (0215) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
047E: 70 EF    AND   F,0xEF             
                                        (0216) 	M8C_SetBank0
0480: 62 0B 80 MOV   REG[0xB],0x80      (0217) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
0483: 62 0A 00 MOV   REG[0xA],0x0       (0218) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0486: 71 10    OR    F,0x10             
                                        (0219) 	M8C_SetBank1
0488: 62 0A 00 MOV   REG[0xA],0x0       (0220) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
048B: 62 0B 00 MOV   REG[0xB],0x0       (0221) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
048E: 70 EF    AND   F,0xEF             
                                        (0222) 	M8C_SetBank0
0490: 62 09 00 MOV   REG[0x9],0x0       (0223) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0493: 62 0C 00 MOV   REG[0xC],0x0       (0224) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0496: 71 10    OR    F,0x10             
                                        (0225) 	M8C_SetBank1
0498: 62 0C 00 MOV   REG[0xC],0x0       (0226) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
049B: 62 0D 00 MOV   REG[0xD],0x0       (0227) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
049E: 70 EF    AND   F,0xEF             
                                        (0228) 	M8C_SetBank0
04A0: 62 0F 00 MOV   REG[0xF],0x0       (0229) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
04A3: 62 0E 00 MOV   REG[0xE],0x0       (0230) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
04A6: 71 10    OR    F,0x10             
                                        (0231) 	M8C_SetBank1
04A8: 62 0E 00 MOV   REG[0xE],0x0       (0232) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
04AB: 62 0F 00 MOV   REG[0xF],0x0       (0233) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
04AE: 70 EF    AND   F,0xEF             
                                        (0234) 	M8C_SetBank0
04B0: 62 0D 00 MOV   REG[0xD],0x0       (0235) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
04B3: 62 10 00 MOV   REG[0x10],0x0      (0236) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
04B6: 71 10    OR    F,0x10             
                                        (0237) 	M8C_SetBank1
04B8: 62 10 00 MOV   REG[0x10],0x0      (0238) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
04BB: 62 11 00 MOV   REG[0x11],0x0      (0239) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
04BE: 70 EF    AND   F,0xEF             
                                        (0240) 	M8C_SetBank0
04C0: 62 13 00 MOV   REG[0x13],0x0      (0241) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
04C3: 62 12 00 MOV   REG[0x12],0x0      (0242) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
04C6: 71 10    OR    F,0x10             
                                        (0243) 	M8C_SetBank1
04C8: 62 12 00 MOV   REG[0x12],0x0      (0244) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
04CB: 62 13 00 MOV   REG[0x13],0x0      (0245) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
04CE: 70 EF    AND   F,0xEF             
                                        (0246) 	M8C_SetBank0
04D0: 62 11 00 MOV   REG[0x11],0x0      (0247) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
04D3: 62 14 00 MOV   REG[0x14],0x0      (0248) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
04D6: 71 10    OR    F,0x10             
                                        (0249) 	M8C_SetBank1
04D8: 62 14 00 MOV   REG[0x14],0x0      (0250) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
04DB: 62 15 00 MOV   REG[0x15],0x0      (0251) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
04DE: 70 EF    AND   F,0xEF             
                                        (0252) 	M8C_SetBank0
04E0: 62 17 00 MOV   REG[0x17],0x0      (0253) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
04E3: 62 16 00 MOV   REG[0x16],0x0      (0254) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
04E6: 71 10    OR    F,0x10             
                                        (0255) 	M8C_SetBank1
04E8: 62 16 00 MOV   REG[0x16],0x0      (0256) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
04EB: 62 17 00 MOV   REG[0x17],0x0      (0257) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
04EE: 70 EF    AND   F,0xEF             
                                        (0258) 	M8C_SetBank0
04F0: 62 15 00 MOV   REG[0x15],0x0      (0259) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
04F3: 62 18 00 MOV   REG[0x18],0x0      (0260) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
04F6: 71 10    OR    F,0x10             
                                        (0261) 	M8C_SetBank1
04F8: 62 18 00 MOV   REG[0x18],0x0      (0262) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
04FB: 62 19 00 MOV   REG[0x19],0x0      (0263) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
04FE: 70 EF    AND   F,0xEF             
                                        (0264) 	M8C_SetBank0
0500: 62 1B 00 MOV   REG[0x1B],0x0      (0265) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0503: 62 1A 00 MOV   REG[0x1A],0x0      (0266) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0506: 71 10    OR    F,0x10             
                                        (0267) 	M8C_SetBank1
0508: 62 1A 00 MOV   REG[0x1A],0x0      (0268) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
050B: 62 1B 00 MOV   REG[0x1B],0x0      (0269) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
050E: 70 EF    AND   F,0xEF             
                                        (0270) 	M8C_SetBank0
0510: 62 19 00 MOV   REG[0x19],0x0      (0271) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0513: 62 1C 00 MOV   REG[0x1C],0x0      (0272) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0516: 71 10    OR    F,0x10             
                                        (0273) 	M8C_SetBank1
0518: 62 1C 00 MOV   REG[0x1C],0x0      (0274) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
051B: 62 1D 00 MOV   REG[0x1D],0x0      (0275) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
051E: 70 EF    AND   F,0xEF             
                                        (0276) 	M8C_SetBank0
0520: 62 1F 00 MOV   REG[0x1F],0x0      (0277) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0523: 62 1E 00 MOV   REG[0x1E],0x0      (0278) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0526: 71 10    OR    F,0x10             
                                        (0279) 	M8C_SetBank1
0528: 62 1E 00 MOV   REG[0x1E],0x0      (0280) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
052B: 62 1F 00 MOV   REG[0x1F],0x0      (0281) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
052E: 70 EF    AND   F,0xEF             
                                        (0282) 	M8C_SetBank0
0530: 62 1D 00 MOV   REG[0x1D],0x0      (0283) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0533: 70 EF    AND   F,0xEF             
                                        (0284) 	M8C_SetBank0
0535: 7F       RET                      (0285) 	ret
                                        (0286) 
                                        (0287) 
                                        (0288) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.3.2710
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_timer1
                                        (0026) export _LoadConfig_timer1
                                        (0027) export Port_1_Data_SHADE
                                        (0028) export _Port_1_Data_SHADE
                                        (0029) export Port_2_Data_SHADE
                                        (0030) export _Port_2_Data_SHADE
                                        (0031) export Port_2_DriveMode_0_SHADE
                                        (0032) export _Port_2_DriveMode_0_SHADE
                                        (0033) export Port_2_DriveMode_1_SHADE
                                        (0034) export _Port_2_DriveMode_1_SHADE
                                        (0035) 
                                        (0036) 
                                        (0037) export NO_SHADOW
                                        (0038) export _NO_SHADOW
                                        (0039) 
                                        (0040) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0041) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0042) 
                                        (0043) AREA psoc_config(rom, rel)
                                        (0044) 
                                        (0045) ;---------------------------------------------------------------------------
                                        (0046) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0047) ;                  parameters handled by boot code, like CPU speed). This
                                        (0048) ;                  function can be called from user code, but typically it
                                        (0049) ;                  is only called from boot.
                                        (0050) ;
                                        (0051) ;       INPUTS: None.
                                        (0052) ;      RETURNS: Nothing.
                                        (0053) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0054) ;               In the large memory model currently only the page
                                        (0055) ;               pointer registers listed below are modified.  This does
                                        (0056) ;               not guarantee that in future implementations of this
                                        (0057) ;               function other page pointer registers will not be
                                        (0058) ;               modified.
                                        (0059) ;          
                                        (0060) ;               Page Pointer Registers Modified: 
                                        (0061) ;               CUR_PP
                                        (0062) ;
                                        (0063) _LoadConfigInit:
                                        (0064)  LoadConfigInit:
                                        (0065)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0066)     
0536: 55 00 00 MOV   [0x0],0x0          (0067) 	mov		[Port_1_Data_SHADE], 0h
0539: 55 01 00 MOV   [0x1],0x0          (0068) 	mov		[Port_2_Data_SHADE], 0h
053C: 55 02 7F MOV   [0x2],0x7F         (0069) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
053F: 55 03 80 MOV   [0x3],0x80         (0070) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0071) 
0542: 7C 05 49 LCALL 0x0549             (0072) 	lcall	LoadConfig_timer1
0545: 7C 04 31 LCALL 0x0431             (0073) 	lcall	LoadConfigTBL_timer1_Ordered
                                        (0074) 
                                        (0075) 
                                        (0076)     RAM_EPILOGUE RAM_USE_CLASS_4
0548: 7F       RET                      (0077)     ret
                                        (0078) 
                                        (0079) ;---------------------------------------------------------------------------
                                        (0080) ; Load Configuration timer1
                                        (0081) ;
                                        (0082) ;    Load configuration registers for timer1.
                                        (0083) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0084) ;
                                        (0085) ;       INPUTS: None.
                                        (0086) ;      RETURNS: Nothing.
                                        (0087) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0088) ;               modified as may the Page Pointer registers!
                                        (0089) ;               In the large memory model currently only the page
                                        (0090) ;               pointer registers listed below are modified.  This does
                                        (0091) ;               not guarantee that in future implementations of this
                                        (0092) ;               function other page pointer registers will not be
                                        (0093) ;               modified.
                                        (0094) ;          
                                        (0095) ;               Page Pointer Registers Modified: 
                                        (0096) ;               CUR_PP
                                        (0097) ;
                                        (0098) _LoadConfig_timer1:
                                        (0099)  LoadConfig_timer1:
                                        (0100)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101) 
0549: 10       PUSH  X                  (0102) 	push	x
054A: 70 EF    AND   F,0xEF             
                                        (0103)     M8C_SetBank0                    ; Force bank 0
054C: 50 00    MOV   A,0x0              (0104)     mov     a, 0                    ; Specify bank 0
054E: 67       ASR   A                  (0105)     asr     a                       ; Store in carry flag
                                        (0106)                                     ; Load bank 0 table:
054F: 50 03    MOV   A,0x3              (0107)     mov     A, >LoadConfigTBL_timer1_Bank0
0551: 57 33    MOV   X,0x33             (0108)     mov     X, <LoadConfigTBL_timer1_Bank0
0553: 7C 05 64 LCALL 0x0564             (0109)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0110) 
0556: 50 01    MOV   A,0x1              (0111)     mov     a, 1                    ; Specify bank 1
0558: 67       ASR   A                  (0112)     asr     a                       ; Store in carry flag
                                        (0113)                                     ; Load bank 1 table:
0559: 50 03    MOV   A,0x3              (0114)     mov     A, >LoadConfigTBL_timer1_Bank1
055B: 57 CE    MOV   X,0xCE             (0115)     mov     X, <LoadConfigTBL_timer1_Bank1
055D: 7C 05 64 LCALL 0x0564             (0116)     lcall   LoadConfig              ; Load the bank 1 values
0560: 70 EF    AND   F,0xEF             
                                        (0117) 
                                        (0118)     M8C_SetBank0                    ; Force return to bank 0
0562: 20       POP   X                  (0119) 	pop		x
                                        (0120) 
                                        (0121)     RAM_EPILOGUE RAM_USE_CLASS_4
0563: 7F       RET                      (0122)     ret
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) 
                                        (0127) ;---------------------------------------------------------------------------
                                        (0128) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0129) ;              pairs. Terminate on address=0xFF.
                                        (0130) ;
                                        (0131) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0132) ;           Flag Register Carry bit encodes the Register Bank
                                        (0133) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0134) ;
                                        (0135) ;  RETURNS: nothing.
                                        (0136) ;
                                        (0137) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0138) ;                X-3 Temporary store for register address
                                        (0139) ;                X-2 LSB of config table address
                                        (0140) ;                X-1 MSB of config table address
                                        (0141) ;
                                        (0142) LoadConfig:
                                        (0143)     RAM_PROLOGUE RAM_USE_CLASS_2
0564: 38 02    ADD   SP,0x2             (0144)     add     SP, 2                   ; Set up local vars
0566: 10       PUSH  X                  (0145)     push    X                       ; Save config table address on stack
0567: 08       PUSH  A                  (0146)     push    A
0568: 4F       MOV   X,SP               (0147)     mov     X, SP
0569: 56 FC 00 MOV   [X-4],0x0          (0148)     mov     [X-4], 0                ; Set default Destination to Bank 0
056C: D0 04    JNC   0x0571             (0149)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
056E: 56 FC 01 MOV   [X-4],0x1          (0150)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0151) .BankSelectSaved:
0571: 18       POP   A                  (0152)     pop     A
0572: 20       POP   X                  (0153)     pop     X
0573: 70 EF    AND   F,0xEF             
0575: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0154) 
                                        (0155) LoadConfigLp:
                                        (0156)     M8C_SetBank0                    ; Switch to bank 0
                                        (0157)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0578: 10       PUSH  X                  (0158)     push    X                       ; Preserve the config table address
0579: 08       PUSH  A                  (0159)     push    A
057A: 28       ROMX                     (0160)     romx                            ; Load register address from table
057B: 39 FF    CMP   A,0xFF             (0161)     cmp     A, END_CONFIG_TABLE     ; End of table?
057D: A0 1F    JZ    0x059D             (0162)     jz      EndLoadConfig           ;   Yes, go wrap it up
057F: 4F       MOV   X,SP               (0163)     mov     X, SP                   ;
0580: 48 FC 01 TST   [X-4],0x1          (0164)     tst     [X-4], 1                ; Loading IO Bank 1?
0583: A0 03    JZ    0x0587             (0165)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0585: 71 10    OR    F,0x10             
                                        (0166)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0167) .IOBankNowSet:
0587: 54 FD    MOV   [X-3],A            (0168)     mov     [X-3], A                ; Stash the register address
0589: 18       POP   A                  (0169)     pop     A                       ; Retrieve the table address
058A: 20       POP   X                  (0170)     pop     X
058B: 75       INC   X                  (0171)     inc     X                       ; Advance to the data byte
058C: 09 00    ADC   A,0x0              (0172)     adc     A, 0
058E: 10       PUSH  X                  (0173)     push    X                       ; Save the config table address again
058F: 08       PUSH  A                  (0174)     push    A
0590: 28       ROMX                     (0175)     romx                            ; load config data from the table
0591: 4F       MOV   X,SP               (0176)     mov     X, SP                   ; retrieve the register address
0592: 59 FD    MOV   X,[X-3]            (0177)     mov     X, [X-3]
0594: 61 00    MOV   REG[X+0x0],A       (0178)     mov     reg[X], A               ; Configure the register
0596: 18       POP   A                  (0179)     pop     A                       ; retrieve the table address
0597: 20       POP   X                  (0180)     pop     X
0598: 75       INC   X                  (0181)     inc     X                       ; advance to next table entry
0599: 09 00    ADC   A,0x0              (0182)     adc     A, 0
059B: 8F D7    JMP   0x0573             (0183)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0184) EndLoadConfig:
059D: 38 FC    ADD   SP,0xFC            (0185)     add     SP, -4
059F: 70 3F    AND   F,0x3F             
05A1: 71 C0    OR    F,0xC0             
                                        (0186)     RAM_EPILOGUE RAM_USE_CLASS_2
05A3: 7F       RET                      (0187)     ret
                                        (0188) 
                                        (0189) AREA InterruptRAM(ram, rel)
                                        (0190) 
                                        (0191) NO_SHADOW:
                                        (0192) _NO_SHADOW:
                                        (0193) ; write only register shadows
                                        (0194) _Port_1_Data_SHADE:
                                        (0195) Port_1_Data_SHADE:	BLK	1
                                        (0196) _Port_2_Data_SHADE:
                                        (0197) Port_2_Data_SHADE:	BLK	1
                                        (0198) _Port_2_DriveMode_0_SHADE:
                                        (0199) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0200) _Port_2_DriveMode_1_SHADE:
                                        (0201) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0202) 
FILE: lib\timer32_1int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer32_1INT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2012/9/21 at 11:59:43
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer32 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Timer32_1.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Timer32_1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer32_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer32_1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
05A4: 76 0C    INC   [sec]              (0075)    	inc [sec]
                                        (0076)    
05A6: 3C 0C 3B CMP   [sec],0x3B         (0077) 	cmp [sec],0x3B 
05A9: A0 5E    JZ    0x0608             (0078) 	jz calcMin
                                        (0079) 	
                                        (0080) 
                                        (0081) printLCD:
                                        (0082) 	;   hour
05AB: 50 01    MOV   A,0x1              (0083)    	mov   A, 1                    ; row
05AD: 57 00    MOV   X,0x0              (0084)    	mov   X, 0                    ; column
05AF: 7C 0B CA LCALL _LCD_1_Position    (0085)    	lcall LCD_1_Position          ; display result in hex 
05B2: 51 0E    MOV   A,[hour]           (0086)    	mov A,[hour]
05B4: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0087)    	lcall LCD_1_PrHexByte
                                        (0088) 	;  :
05B7: 50 01    MOV   A,0x1              (0089) 	mov   A, 1                    ; row
05B9: 57 02    MOV   X,0x2              (0090)    	mov   X, 2                    ; column
05BB: 7C 0B CA LCALL _LCD_1_Position    (0091)    	lcall LCD_1_Position
05BE: 50 01    MOV   A,0x1              (0092)    	mov   A, >sRomString2
05C0: 57 B1    MOV   X,0xB1             (0093)    	mov   X, <sRomString2
05C2: 7C 0A 45 LCALL _LCD_1_PrCString   (0094) 	lcall LCD_1_PrCString         ; Display string
                                        (0095) 	;  min
05C5: 50 01    MOV   A,0x1              (0096) 	mov   A, 1                    ; row
05C7: 57 03    MOV   X,0x3              (0097)    	mov   X, 3                    ; column
05C9: 7C 0B CA LCALL _LCD_1_Position    (0098)    	lcall LCD_1_Position          ; display result in hex 
05CC: 51 0D    MOV   A,[min]            (0099)    	mov A,[min]
05CE: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0100)    	lcall LCD_1_PrHexByte
                                        (0101) 	;   :
05D1: 50 01    MOV   A,0x1              (0102) 	mov   A, 1                    ; row
05D3: 57 05    MOV   X,0x5              (0103)    	mov   X, 5                    ; column
05D5: 7C 0B CA LCALL _LCD_1_Position    (0104)    	lcall LCD_1_Position
05D8: 50 01    MOV   A,0x1              (0105)    	mov   A, >sRomString2
05DA: 57 B1    MOV   X,0xB1             (0106)    	mov   X, <sRomString2
05DC: 7C 0A 45 LCALL _LCD_1_PrCString   (0107) 	lcall LCD_1_PrCString         ; Display string
                                        (0108) 	;  sec
05DF: 50 01    MOV   A,0x1              (0109) 	mov   A, 1                    ; row
05E1: 57 06    MOV   X,0x6              (0110)    	mov   X, 6                    ; column
05E3: 7C 0B CA LCALL _LCD_1_Position    (0111)    	lcall LCD_1_Position          ; display result in hex 
05E6: 51 0C    MOV   A,[sec]            (0112)    	mov A,[sec]
05E8: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0113)    	lcall LCD_1_PrHexByte
                                        (0114) 	; .00
05EB: 50 01    MOV   A,0x1              (0115) 	mov   A, 1                    ; row
05ED: 57 08    MOV   X,0x8              (0116)    	mov   X, 8                    ; column
05EF: 7C 0B CA LCALL _LCD_1_Position    (0117)    	lcall LCD_1_Position          ; display result in hex 
05F2: 50 01    MOV   A,0x1              (0118)    	mov   A, >sRomString4
05F4: 57 B5    MOV   X,0xB5             (0119)    	mov   X, <sRomString4
05F6: 7C 0A 45 LCALL _LCD_1_PrCString   (0120) 	lcall LCD_1_PrCString         ; Display string
                                        (0121) 	; 00000
05F9: 50 01    MOV   A,0x1              (0122) 	mov   A, 1                    ; row
05FB: 57 0B    MOV   X,0xB              (0123)    	mov   X, 11                    ; column
05FD: 7C 0B CA LCALL _LCD_1_Position    (0124)    	lcall LCD_1_Position
0600: 50 02    MOV   A,0x2              (0125)    	mov   A, >sRomString22
0602: 57 C9    MOV   X,0xC9             (0126)    	mov   X, <sRomString22
0604: 7C 0A 45 LCALL _LCD_1_PrCString   (0127) 	lcall LCD_1_PrCString         ; Display string
                                        (0128) 	
0607: 7E       RETI                     (0129) 	reti
                                        (0130) 	
                                        (0131) 
                                        (0132) calcMin:
0608: 55 0C 00 MOV   [sec],0x0          (0133) 	mov [sec],0x00
060B: 76 0D    INC   [min]              (0134) 	inc [min]
060D: 3C 0D 3B CMP   [min],0x3B         (0135) 	cmp [min],0x3B
0610: BF 9A    JNZ   0x05AB             (0136) 	jnz printLCD
                                        (0137) 
                                        (0138) calcHr:
0612: 55 0D 00 MOV   [min],0x0          (0139) 	mov [min],0x00
0615: 76 0E    INC   [hour]             (0140) 	inc [hour]
0617: 3C 0E 63 CMP   [hour],0x63        (0141) 	cmp [hour],0x63
061A: BF 90    JNZ   0x05AB             (0142) 	jnz printLCD
                                        (0143) 
                                        (0144) reset:
061C: 55 0C 00 MOV   [sec],0x0          (0145) 	mov [sec],0x00
061F: 55 0D 00 MOV   [min],0x0          (0146) 	mov [min],0x00
0622: 55 0E 00 MOV   [hour],0x0         (0147) 	mov [hour],0x00
0625: BF 85    JNZ   0x05AB             (0148) 	jnz printLCD
                                        (0149)    
                                        (0150)    ;---------------------------------------------------
                                        (0151)    ; Insert a lcall to a C function below this banner
                                        (0152)    ; and un-comment the lines between these banners
                                        (0153)    ;---------------------------------------------------
                                        (0154)    
                                        (0155)    ;PRESERVE_CPU_CONTEXT
                                        (0156)    ;lcall _My_C_Function
                                        (0157)    ;RESTORE_CPU_CONTEXT
                                        (0158)    
                                        (0159)    ;---------------------------------------------------
                                        (0160)    ; Insert a lcall to a C function above this banner
                                        (0161)    ; and un-comment the lines between these banners
                                        (0162)    ;---------------------------------------------------
                                        (0163)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0164) 
0627: 7E       RETI                     (0165)    reti
                                        (0166) 
                                        (0167) 
                                        (0168) ; end of file Timer32_1INT.asm
FILE: lib\timer32_1.asm                 (0001) ;;*****************************************************************************
0628: 43 E1 80 OR    REG[0xE1],0x80     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer32_1.asm
                                        (0004) ;;   Version: 2.6, Updated on 2012/9/21 at 11:59:43
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer32 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer32_1.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer32_1_EnableInt
                                        (0030) export _Timer32_1_EnableInt
                                        (0031) export  Timer32_1_DisableInt
                                        (0032) export _Timer32_1_DisableInt
                                        (0033) export  Timer32_1_Start
                                        (0034) export _Timer32_1_Start
                                        (0035) export  Timer32_1_Stop
                                        (0036) export _Timer32_1_Stop
                                        (0037) export  Timer32_1_WritePeriod
                                        (0038) export _Timer32_1_WritePeriod
                                        (0039) export  Timer32_1_WriteCompareValue
                                        (0040) export _Timer32_1_WriteCompareValue
                                        (0041) export  Timer32_1_ReadCompareValue
                                        (0042) export _Timer32_1_ReadCompareValue
                                        (0043) export  Timer32_1_ReadTimer
                                        (0044) export _Timer32_1_ReadTimer
                                        (0045) export  Timer32_1_ReadTimerSaveCV
                                        (0046) export _Timer32_1_ReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  Timer32_1_ReadCounter       ; obsolete
                                        (0051) export _Timer32_1_ReadCounter       ; obsolete
                                        (0052) export  Timer32_1_CaptureCounter    ; obsolete
                                        (0053) export _Timer32_1_CaptureCounter    ; obsolete
                                        (0054) 
                                        (0055) 
                                        (0056) AREA timer1_RAM (RAM,REL)
                                        (0057) 
                                        (0058) ;-----------------------------------------------
                                        (0059) ;  Constant Definitions
                                        (0060) ;-----------------------------------------------
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: Timer32_1_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  Timer32_1_EnableInt:
                                        (0091) _Timer32_1_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    Timer32_1_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
062B: 7F       RET                      (0095)    ret
062C: 41 E1 7F AND   REG[0xE1],0x7F     
                                        (0096) 
                                        (0097) .ENDSECTION
                                        (0098) 
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: Timer32_1_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS: 
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  Timer32_1_DisableInt:
                                        (0119) _Timer32_1_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    Timer32_1_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
062F: 7F       RET                      (0123)    ret
0630: 43 33 01 OR    REG[0x33],0x1      
                                        (0124) 
                                        (0125) .ENDSECTION
                                        (0126) 
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: Timer32_1_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     timer will begin counting on the next input clock.
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;
                                        (0137) ;  ARGUMENTS:    None
                                        (0138) ;  RETURNS:      Nothing
                                        (0139) ;  SIDE EFFECTS: 
                                        (0140) ;    The A and X registers may be modified by this or future implementations
                                        (0141) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0142) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0143) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0144) ;    functions.
                                        (0145) ;
                                        (0146)  Timer32_1_Start:
                                        (0147) _Timer32_1_Start:
                                        (0148)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0149)    Timer32_1_Start_M
                                        (0150)    RAM_EPILOGUE RAM_USE_CLASS_1
0633: 7F       RET                      (0151)    ret
0634: 41 33 FE AND   REG[0x33],0xFE     
                                        (0152) 
                                        (0153) .ENDSECTION
                                        (0154) 
                                        (0155) 
                                        (0156) .SECTION
                                        (0157) ;-----------------------------------------------------------------------------
                                        (0158) ;  FUNCTION NAME: Timer32_1_Stop
                                        (0159) ;
                                        (0160) ;  DESCRIPTION:
                                        (0161) ;     Disables timer operation by clearing the start bit in the Control
                                        (0162) ;     register of the LSB block.
                                        (0163) ;-----------------------------------------------------------------------------
                                        (0164) ;
                                        (0165) ;  ARGUMENTS:    None
                                        (0166) ;  RETURNS:      Nothing
                                        (0167) ;  SIDE EFFECTS: 
                                        (0168) ;    The A and X registers may be modified by this or future implementations
                                        (0169) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0170) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0171) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0172) ;    functions.
                                        (0173) ;
                                        (0174)  Timer32_1_Stop:
                                        (0175) _Timer32_1_Stop:
                                        (0176)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0177)    Timer32_1_Stop_M
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_1
0637: 7F       RET                      (0179)    ret
                                        (0180) 
                                        (0181) .ENDSECTION
                                        (0182) 
                                        (0183) 
                                        (0184) .SECTION
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;  FUNCTION NAME: Timer32_1_WritePeriod
                                        (0187) ;
                                        (0188) ;  DESCRIPTION:
                                        (0189) ;     Write the 32-bit period value into the Period register (DR1). If the
                                        (0190) ;     Timer user module is stopped, then this value will also be latched
                                        (0191) ;     into the Count register (DR0).
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;
                                        (0194) ;  ARGUMENTS: fastcall16 DWORD dwPeriodValue (on stack)
                                        (0195) ;  RETURNS:   Nothing
                                        (0196) ;  SIDE EFFECTS:
                                        (0197) ;    If the timer user module is stopped, then this value will also be
                                        (0198) ;    latched into the Count registers (DR0).
                                        (0199) ;    
                                        (0200) ;    The A and X registers may be modified by this or future implementations
                                        (0201) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0202) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0203) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0204) ;    functions.
                                        (0205) ;
                                        (0206) _Timer32_1_WritePeriod:
                                        (0207)  Timer32_1_WritePeriod:
                                        (0208)    RAM_PROLOGUE RAM_USE_CLASS_2
0638: 4F       MOV   X,SP               (0209)    mov   X, SP
0639: 52 FA    MOV   A,[X-6]            (0210)    mov   A, [X-6]                                ; load the period registers
063B: 60 3D    MOV   REG[0x3D],A        (0211)    mov   reg[Timer32_1_PERIOD_MSB_REG],  A
063D: 52 FB    MOV   A,[X-5]            (0212)    mov   A, [X-5]
063F: 60 39    MOV   REG[0x39],A        (0213)    mov   reg[Timer32_1_PERIOD_ISB2_REG], A
0641: 52 FC    MOV   A,[X-4]            (0214)    mov   A, [X-4]
0643: 60 35    MOV   REG[0x35],A        (0215)    mov   reg[Timer32_1_PERIOD_ISB1_REG], A
0645: 52 FD    MOV   A,[X-3]            (0216)    mov   A, [X-3]
0647: 60 31    MOV   REG[0x31],A        (0217)    mov   reg[Timer32_1_PERIOD_LSB_REG],  A
0649: 70 3F    AND   F,0x3F             
064B: 71 C0    OR    F,0xC0             
                                        (0218)    RAM_EPILOGUE RAM_USE_CLASS_2
064D: 7F       RET                      (0219)    ret
                                        (0220) 
                                        (0221) .ENDSECTION
                                        (0222) 
                                        (0223) 
                                        (0224) .SECTION
                                        (0225) ;-----------------------------------------------------------------------------
                                        (0226) ;  FUNCTION NAME: Timer32_1_WriteCompareValue
                                        (0227) ;
                                        (0228) ;  DESCRIPTION:
                                        (0229) ;     Writes compare value into the Compare register (DR2).
                                        (0230) ;
                                        (0231) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0232) ;           Compare register. (Call Timer32_1_Stop to disable).
                                        (0233) ;-----------------------------------------------------------------------------
                                        (0234) ;
                                        (0235) ;  ARGUMENTS:    fastcall16 DWORD dwCompareValue (on stack)
                                        (0236) ;  RETURNS:      Nothing
                                        (0237) ;  SIDE EFFECTS: 
                                        (0238) ;    The A and X registers may be modified by this or future implementations
                                        (0239) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0240) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0241) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0242) ;    functions.
                                        (0243) ;
                                        (0244) _Timer32_1_WriteCompareValue:
                                        (0245)  Timer32_1_WriteCompareValue:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_2
064E: 4F       MOV   X,SP               (0247)    mov   X, SP
064F: 52 FA    MOV   A,[X-6]            (0248)    mov   A, [X-6]                                ; load the compare registers
0651: 60 3E    MOV   REG[0x3E],A        (0249)    mov   reg[Timer32_1_COMPARE_MSB_REG],  A
0653: 52 FB    MOV   A,[X-5]            (0250)    mov   A, [X-5]
0655: 60 3A    MOV   REG[0x3A],A        (0251)    mov   reg[Timer32_1_COMPARE_ISB2_REG], A
0657: 52 FC    MOV   A,[X-4]            (0252)    mov   A, [X-4]
0659: 60 36    MOV   REG[0x36],A        (0253)    mov   reg[Timer32_1_COMPARE_ISB1_REG], A
065B: 52 FD    MOV   A,[X-3]            (0254)    mov   A, [X-3]
065D: 60 32    MOV   REG[0x32],A        (0255)    mov   reg[Timer32_1_COMPARE_LSB_REG],  A
065F: 70 3F    AND   F,0x3F             
0661: 71 C0    OR    F,0xC0             
                                        (0256)    RAM_EPILOGUE RAM_USE_CLASS_2
0663: 7F       RET                      (0257)    ret
0664: 70 BF    AND   F,0xBF             
0666: 60 D3    MOV   REG[0xD3],A        
                                        (0258) 
                                        (0259) .ENDSECTION
                                        (0260) 
                                        (0261) 
                                        (0262) .SECTION
                                        (0263) ;-----------------------------------------------------------------------------
                                        (0264) ;  FUNCTION NAME: Timer32_1_ReadCompareValue
                                        (0265) ;
                                        (0266) ;  DESCRIPTION:
                                        (0267) ;     Reads the Compare registers.
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;
                                        (0270) ;  ARGUMENTS: fastcall16 DWORD * pdwCompareValue
                                        (0271) ;             (pointer: LSB in X, MSB in A, for pass-by-reference update)
                                        (0272) ;  RETURNS:   Nothing (but see Side Effects).
                                        (0273) ;  SIDE EFFECTS:
                                        (0274) ;     1. The DWORD pointed to by X takes on the value read from DR2
                                        (0275) ;     2. The A and X registers may be modified by this or future implementations
                                        (0276) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0277) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0278) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0279) ;        functions.
                                        (0280) ;              
                                        (0281) ;        Currently only the page pointer registers listed below are modified: 
                                        (0282) ;              IDX_PP
                                        (0283) 
                                        (0284) ;
                                        (0285)  Timer32_1_ReadCompareValue:
                                        (0286) _Timer32_1_ReadCompareValue:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0288)    RAM_SETPAGE_IDX A 
0668: 5D 3E    MOV   A,REG[0x3E]        (0289)    mov   A, reg[Timer32_1_COMPARE_MSB_REG]
066A: 54 00    MOV   [X+0],A            (0290)    mov   [X+0], A
066C: 5D 3A    MOV   A,REG[0x3A]        (0291)    mov   A, reg[Timer32_1_COMPARE_ISB2_REG]
066E: 54 01    MOV   [X+1],A            (0292)    mov   [X+1], A
0670: 5D 36    MOV   A,REG[0x36]        (0293)    mov   A, reg[Timer32_1_COMPARE_ISB1_REG]
0672: 54 02    MOV   [X+2],A            (0294)    mov   [X+2], A
0674: 5D 32    MOV   A,REG[0x32]        (0295)    mov   A, reg[Timer32_1_COMPARE_LSB_REG]
0676: 54 03    MOV   [X+3],A            (0296)    mov   [X+3], A
0678: 70 3F    AND   F,0x3F             
067A: 71 C0    OR    F,0xC0             
                                        (0297)    RAM_EPILOGUE RAM_USE_CLASS_3
067C: 7F       RET                      (0298)    ret
067D: 70 BF    AND   F,0xBF             
067F: 60 D3    MOV   REG[0xD3],A        
                                        (0299) 
                                        (0300) .ENDSECTION
                                        (0301) 
                                        (0302) 
                                        (0303) .SECTION
                                        (0304) ;-----------------------------------------------------------------------------
                                        (0305) ;  FUNCTION NAME: Timer32_1_ReadTimerSaveCV
                                        (0306) ;
                                        (0307) ;  DESCRIPTION:
                                        (0308) ;     Retrieves the value in the Count register (DR0), preserving the
                                        (0309) ;     value in the compare register (DR2).
                                        (0310) ;-----------------------------------------------------------------------------
                                        (0311) ;
                                        (0312) ;  ARGUMENTS: fastcall16 DWORD * pdwCount
                                        (0313) ;             (pointer: LSB in X, MSB in A, for pass-by-reference update)
                                        (0314) ;  RETURNS:   Nothing (but see Side Effects).
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;     1) The DWORD pointed to by X takes on the value read from DR0
                                        (0317) ;     2) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0318) ;     3) If enabled, Global interrupts are momentarily disabled.
                                        (0319) ;     4) The user module is stopped momentarily while the compare value is
                                        (0320) ;        restored.  This may cause the Count register to miss one or more
                                        (0321) ;        counts depending on the input clock speed.
                                        (0322) ;     5) The A and X registers may be modified by this or future implementations
                                        (0323) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0324) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0325) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0326) ;        functions.
                                        (0327) ;              
                                        (0328) ;        Currently only the page pointer registers listed below are modified: 
                                        (0329) ;              IDX_PP
                                        (0330) ;
                                        (0331) ;  THEORY of OPERATION:
                                        (0332) ;     1) Read and save the Compare register.
                                        (0333) ;     2) Read the Count register, causing its data to be latched into
                                        (0334) ;        the Compare register.
                                        (0335) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0336) ;        to the buffer.
                                        (0337) ;     4) Disable global interrupts
                                        (0338) ;     5) Halt the timer
                                        (0339) ;     6) Restore the Compare register values
                                        (0340) ;     7) Start the Timer again
                                        (0341) ;     8) Restore global interrupt state
                                        (0342) ;
                                        (0343)  Timer32_1_ReadTimerSaveCV:
                                        (0344) _Timer32_1_ReadTimerSaveCV:
                                        (0345)  Timer32_1_ReadCounter:                          ; this name deprecated
                                        (0346) _Timer32_1_ReadCounter:                          ; this name deprecated
                                        (0347) 
                                        (0348)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0349)    RAM_SETPAGE_IDX A 
                                        (0350) 
                                        (0351)    ; save the Control register on the stack
0681: 5D 33    MOV   A,REG[0x33]        (0352)    mov   A, reg[Timer32_1_CONTROL_LSB_REG]
0683: 08       PUSH  A                  (0353)    push  A
                                        (0354) 
                                        (0355)    ; save the Compare register value
0684: 5D 3E    MOV   A,REG[0x3E]        (0356)    mov   A, reg[Timer32_1_COMPARE_MSB_REG]
0686: 08       PUSH  A                  (0357)    push  A
0687: 5D 3A    MOV   A,REG[0x3A]        (0358)    mov   A, reg[Timer32_1_COMPARE_ISB2_REG]
0689: 08       PUSH  A                  (0359)    push  A
068A: 5D 36    MOV   A,REG[0x36]        (0360)    mov   A, reg[Timer32_1_COMPARE_ISB1_REG]
068C: 08       PUSH  A                  (0361)    push  A
068D: 5D 32    MOV   A,REG[0x32]        (0362)    mov   A, reg[Timer32_1_COMPARE_LSB_REG]
068F: 08       PUSH  A                  (0363)    push  A
                                        (0364) 
                                        (0365)    ; Read the LSB count. This latches the Count register data into the
                                        (0366)    ; Compare register of all bytes of chained PSoC blocks!
                                        (0367)    ; This may cause an interrupt.
0690: 5D 30    MOV   A,REG[0x30]        (0368)    mov   A, reg[Timer32_1_COUNTER_LSB_REG]
                                        (0369) 
                                        (0370)    ; Read the Compare register, which contains the counter value
                                        (0371)    ; and store the return result
0692: 5D 3E    MOV   A,REG[0x3E]        (0372)    mov   A, reg[Timer32_1_COMPARE_MSB_REG]
0694: 54 00    MOV   [X+0],A            (0373)    mov   [X+0], A
0696: 5D 3A    MOV   A,REG[0x3A]        (0374)    mov   A, reg[Timer32_1_COMPARE_ISB2_REG]
0698: 54 01    MOV   [X+1],A            (0375)    mov   [X+1], A
069A: 5D 36    MOV   A,REG[0x36]        (0376)    mov   A, reg[Timer32_1_COMPARE_ISB1_REG]
069C: 54 02    MOV   [X+2],A            (0377)    mov   [X+2], A
069E: 5D 32    MOV   A,REG[0x32]        (0378)    mov   A, reg[Timer32_1_COMPARE_LSB_REG]
06A0: 54 03    MOV   [X+3],A            (0379)    mov   [X+3], A
                                        (0380) 
                                        (0381)    ; determine current interrupt state and save in X
06A2: 50 00    MOV   A,0x0              (0382)    mov   A, 0
06A4: 49 F7 01 TST   REG[0xF7],0x1      (0383)    tst   reg[CPU_F], FLAG_GLOBAL_IE
06A7: A0 03    JZ    0x06AB             (0384)    jz    .SetupStatusFlag
06A9: 50 01    MOV   A,0x1              (0385)    mov   A, FLAG_GLOBAL_IE
                                        (0386) .SetupStatusFlag:
06AB: 5C       MOV   X,A                (0387)    mov   X, A
06AC: 70 FE    AND   F,0xFE             
06AE: 41 33 FE AND   REG[0x33],0xFE     
                                        (0388) 
                                        (0389)    ; disable interrupts for the time being
                                        (0390)    M8C_DisableGInt
                                        (0391) 
                                        (0392)    ; stop the timer
                                        (0393)    Timer32_1_Stop_M
                                        (0394) 
                                        (0395)    ; Restore the Compare register
06B1: 18       POP   A                  (0396)    pop   A
06B2: 60 32    MOV   REG[0x32],A        (0397)    mov   reg[Timer32_1_COMPARE_LSB_REG],  A
06B4: 18       POP   A                  (0398)    pop   A
06B5: 60 36    MOV   REG[0x36],A        (0399)    mov   reg[Timer32_1_COMPARE_ISB1_REG], A
06B7: 18       POP   A                  (0400)    pop   A
06B8: 60 3A    MOV   REG[0x3A],A        (0401)    mov   reg[Timer32_1_COMPARE_ISB2_REG], A
06BA: 18       POP   A                  (0402)    pop   A
06BB: 60 3E    MOV   REG[0x3E],A        (0403)    mov   reg[Timer32_1_COMPARE_MSB_REG],  A
                                        (0404) 
                                        (0405)    ; restore start state of the timer
06BD: 18       POP   A                  (0406)    pop   A
06BE: 60 33    MOV   REG[0x33],A        (0407)    mov   reg[Timer32_1_CONTROL_LSB_REG], A
                                        (0408) 
                                        (0409)    ; push the flag register to restore on the stack
06C0: 10       PUSH  X                  (0410)    push  X
06C1: 70 3F    AND   F,0x3F             
06C3: 71 C0    OR    F,0xC0             
                                        (0411) 
                                        (0412)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0413)    ; Use RETI because it pops a the flag register off the stack
                                        (0414)    ; and then returns to the caller.
06C5: 7E       RETI                     (0415)    reti
06C6: 70 BF    AND   F,0xBF             
06C8: 60 D3    MOV   REG[0xD3],A        
                                        (0416) 
                                        (0417) .ENDSECTION
                                        (0418) 
                                        (0419) 
                                        (0420) .SECTION
                                        (0421) ;-----------------------------------------------------------------------------
                                        (0422) ;  FUNCTION NAME: Timer32_1_ReadTimer
                                        (0423) ;
                                        (0424) ;  DESCRIPTION:
                                        (0425) ;     Performs a software capture of the Count register.  A synchronous
                                        (0426) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0427) ;
                                        (0428) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;
                                        (0431) ;  ARGUMENTS: fastcall16 DWORD * pdwCount
                                        (0432) ;             (pointer: LSB in X, MSB in A, for pass-by-reference update)
                                        (0433) ;  RETURNS:   Nothing (but see Side Effects).
                                        (0434) ;  SIDE EFFECTS:
                                        (0435) ;     1) The DWORD pointed to by X takes on the value read from DR2.
                                        (0436) ;     2) May cause an interrupt.
                                        (0437) ;     3) The A and X registers may be modified by this or future implementations
                                        (0438) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0439) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0440) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0441) ;        functions.
                                        (0442) ;              
                                        (0443) ;        Currently only the page pointer registers listed below are modified: 
                                        (0444) ;              IDX_PP
                                        (0445) ;
                                        (0446) ;  THEORY of OPERATION:
                                        (0447) ;     1) Read the Count register - this causes the count value to be
                                        (0448) ;        latched into the Compare registers.
                                        (0449) ;     2) Read and return the Count register values from the Compare
                                        (0450) ;        registers into the return buffer.
                                        (0451) ;
                                        (0452)  Timer32_1_ReadTimer:
                                        (0453) _Timer32_1_ReadTimer:
                                        (0454)  Timer32_1_CaptureCounter:                       ; this name deprecated
                                        (0455) _Timer32_1_CaptureCounter:                       ; this name deprecated
                                        (0456) 
                                        (0457)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0458)    RAM_SETPAGE_IDX A 
                                        (0459) 
                                        (0460)    ; Read the LSB of the Count register, DR0. This latches the count data into
                                        (0461)    ; the Compare register of all bytes of chained PSoC blocks and may cause
                                        (0462)    ; an interrupt.
06CA: 5D 30    MOV   A,REG[0x30]        (0463)    mov   A, reg[Timer32_1_COUNTER_LSB_REG]
                                        (0464) 
                                        (0465)    ; Read the Compare register, which contains the counter value
                                        (0466)    ; and store ther return result
06CC: 5D 3E    MOV   A,REG[0x3E]        (0467)    mov   A, reg[Timer32_1_COMPARE_MSB_REG]
06CE: 54 00    MOV   [X+0],A            (0468)    mov   [X+0], A
06D0: 5D 3A    MOV   A,REG[0x3A]        (0469)    mov   A, reg[Timer32_1_COMPARE_ISB2_REG]
06D2: 54 01    MOV   [X+1],A            (0470)    mov   [X+1], A
06D4: 5D 36    MOV   A,REG[0x36]        (0471)    mov   A, reg[Timer32_1_COMPARE_ISB1_REG]
06D6: 54 02    MOV   [X+2],A            (0472)    mov   [X+2], A
06D8: 5D 32    MOV   A,REG[0x32]        (0473)    mov   A, reg[Timer32_1_COMPARE_LSB_REG]
06DA: 54 03    MOV   [X+3],A            (0474)    mov   [X+3], A
06DC: 70 3F    AND   F,0x3F             
06DE: 71 C0    OR    F,0xC0             
                                        (0475)    RAM_EPILOGUE RAM_USE_CLASS_3
06E0: 7F       RET                      (0476)    ret
                                        (0477) 
                                        (0478) .ENDSECTION
                                        (0479) 
                                        (0480) ; End of File Timer32_1.asm
FILE: lib\timer16_2int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16_2INT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2012/9/21 at 11:59:42
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Timer16_2.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Timer16_2_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer16_2_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer16_2_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    	
06E1: 06 0B 0A ADD   [milisec],0xA      (0075) 	add [milisec],0xA
06E4: 76 0A    INC   [msec]             (0076)    	inc [msec]
                                        (0077) 	
06E6: 3C 0A 0A CMP   [msec],0xA         (0078) 	cmp [msec],0xA
06E9: A0 7D    JZ    0x0767             (0079) 	jz calcSec
                                        (0080) 
                                        (0081) printLCD:
                                        (0082) 	
06EB: 50 00    MOV   A,0x0              (0083) 	mov   A, 0                    ; row
06ED: 57 00    MOV   X,0x0              (0084)    	mov   X, 0                    ; column
06EF: 7C 0B CA LCALL _LCD_1_Position    (0085)    	lcall LCD_1_Position
06F2: 50 02    MOV   A,0x2              (0086)    	mov   A, >sRomString23
06F4: 57 CF    MOV   X,0xCF             (0087)    	mov   X, <sRomString23
06F6: 7C 0A 45 LCALL _LCD_1_PrCString   (0088)    	lcall LCD_1_PrCString         ; Display string
                                        (0089) 	;   hour
06F9: 50 01    MOV   A,0x1              (0090)    	mov   A, 1                    ; row
06FB: 57 00    MOV   X,0x0              (0091)    	mov   X, 0                    ; column
06FD: 7C 0B CA LCALL _LCD_1_Position    (0092)    	lcall LCD_1_Position          ; display result in hex 
0700: 51 0E    MOV   A,[hour]           (0093)    	mov A,[hour]
0702: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0094)    	lcall LCD_1_PrHexByte
                                        (0095) 	
                                        (0096) 	;  :
0705: 50 01    MOV   A,0x1              (0097) 	mov   A, 1                    ; row
0707: 57 02    MOV   X,0x2              (0098)    	mov   X, 2                    ; column
0709: 7C 0B CA LCALL _LCD_1_Position    (0099)    	lcall LCD_1_Position
070C: 50 01    MOV   A,0x1              (0100)    	mov   A, >sRomString2
070E: 57 B1    MOV   X,0xB1             (0101)    	mov   X, <sRomString2
0710: 7C 0A 45 LCALL _LCD_1_PrCString   (0102) 	lcall LCD_1_PrCString         ; Display string
                                        (0103) 	
                                        (0104) 	
                                        (0105) 	;  min
0713: 50 01    MOV   A,0x1              (0106) 	mov   A, 1                    ; row
0715: 57 03    MOV   X,0x3              (0107)    	mov   X, 3                    ; column
0717: 7C 0B CA LCALL _LCD_1_Position    (0108)    	lcall LCD_1_Position          ; display result in hex 
071A: 51 0D    MOV   A,[min]            (0109)    	mov A,[min]
071C: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0110)    	lcall LCD_1_PrHexByte
                                        (0111) 	
                                        (0112) 	;   :
071F: 50 01    MOV   A,0x1              (0113) 	mov   A, 1                    ; row
0721: 57 05    MOV   X,0x5              (0114)    	mov   X, 5                    ; column
0723: 7C 0B CA LCALL _LCD_1_Position    (0115)    	lcall LCD_1_Position
0726: 50 01    MOV   A,0x1              (0116)    	mov   A, >sRomString2
0728: 57 B1    MOV   X,0xB1             (0117)    	mov   X, <sRomString2
072A: 7C 0A 45 LCALL _LCD_1_PrCString   (0118) 	lcall LCD_1_PrCString         ; Display string
                                        (0119) 	
                                        (0120) 
                                        (0121) 	;  sec
072D: 50 01    MOV   A,0x1              (0122) 	mov   A, 1                    ; row
072F: 57 06    MOV   X,0x6              (0123)    	mov   X, 6                    ; column
0731: 7C 0B CA LCALL _LCD_1_Position    (0124)    	lcall LCD_1_Position          ; display result in hex 
0734: 51 0C    MOV   A,[sec]            (0125)    	mov A,[sec]
0736: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0126)    	lcall LCD_1_PrHexByte
                                        (0127) 	
                                        (0128) 	;  .
0739: 50 01    MOV   A,0x1              (0129) 	mov   A, 1                    ; row
073B: 57 08    MOV   X,0x8              (0130)    	mov   X, 8                    ; column
073D: 7C 0B CA LCALL _LCD_1_Position    (0131)    	lcall LCD_1_Position
0740: 50 01    MOV   A,0x1              (0132)    	mov   A, >sRomString3
0742: 57 B3    MOV   X,0xB3             (0133)    	mov   X, <sRomString3
0744: 7C 0A 45 LCALL _LCD_1_PrCString   (0134) 	lcall LCD_1_PrCString         ; Display string
                                        (0135) 	
                                        (0136) 	;  msec
0747: 50 01    MOV   A,0x1              (0137) 	mov   A, 1                    ; row
0749: 57 09    MOV   X,0x9              (0138)    	mov   X, 9                    ; column
074B: 7C 0B CA LCALL _LCD_1_Position    (0139)    	lcall LCD_1_Position          ; display result in hex 
074E: 51 0B    MOV   A,[milisec]        (0140) 	mov A,[milisec]
0750: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0141)    	lcall LCD_1_PrHexByte
                                        (0142) 	
                                        (0143) 	; 00000
0753: 50 01    MOV   A,0x1              (0144) 	mov   A, 1                    ; row
0755: 57 0B    MOV   X,0xB              (0145)    	mov   X, 11                    ; column
0757: 7C 0B CA LCALL _LCD_1_Position    (0146)    	lcall LCD_1_Position
075A: 50 02    MOV   A,0x2              (0147)    	mov   A, >sRomString22
075C: 57 C9    MOV   X,0xC9             (0148)    	mov   X, <sRomString22
075E: 7C 0A 45 LCALL _LCD_1_PrCString   (0149) 	lcall LCD_1_PrCString         ; Display string
                                        (0150) 	
0761: 7E       RETI                     (0151) 	reti
                                        (0152) 
                                        (0153) 
                                        (0154) setmillis:
0762: 55 0B 00 MOV   [milisec],0x0      (0155) 	mov [milisec],0x00
0765: 80 09    JMP   0x076F             (0156) 	jmp returnfrmmillis
                                        (0157) 	
                                        (0158) calcSec:
0767: 55 0A 00 MOV   [msec],0x0         (0159) 	mov [msec],0x0
076A: 3C 0B 64 CMP   [milisec],0x64     (0160) 	cmp [milisec],0x64
076D: AF F4    JZ    0x0762             (0161) 	jz setmillis
                                        (0162) returnfrmmillis:
076F: 76 0C    INC   [sec]              (0163) 	inc [sec]
0771: 3C 0C 3B CMP   [sec],0x3B         (0164) 	cmp [sec],0x3B
0774: BF 76    JNZ   0x06EB             (0165) 	jnz printLCD
                                        (0166) 
                                        (0167) calcMin:
0776: 55 0C 00 MOV   [sec],0x0          (0168) 	mov [sec],0x00
0779: 76 0D    INC   [min]              (0169) 	inc [min]
077B: 3C 0D 3B CMP   [min],0x3B         (0170) 	cmp [min],0x3B
077E: BF 6C    JNZ   0x06EB             (0171) 	jnz printLCD
                                        (0172) 
                                        (0173) calcHr:
0780: 55 0D 00 MOV   [min],0x0          (0174) 	mov [min],0x00
0783: 76 0E    INC   [hour]             (0175) 	inc [hour]
0785: 3C 0E 63 CMP   [hour],0x63        (0176) 	cmp [hour],0x63
0788: BF 62    JNZ   0x06EB             (0177) 	jnz printLCD
                                        (0178) 
                                        (0179) reset:
078A: 55 0B 00 MOV   [milisec],0x0      (0180) 	mov [milisec],0x00
078D: 55 0C 00 MOV   [sec],0x0          (0181) 	mov [sec],0x00
0790: 55 0D 00 MOV   [min],0x0          (0182) 	mov [min],0x00
0793: 55 0E 00 MOV   [hour],0x0         (0183) 	mov [hour],0x00
0796: BF 54    JNZ   0x06EB             (0184) 	jnz printLCD
                                        (0185)     
                                        (0186) 	
                                        (0187)    ;---------------------------------------------------
                                        (0188)    ; Insert a lcall to a C function below this banner
                                        (0189)    ; and un-comment the lines between these banners
                                        (0190)    ;---------------------------------------------------
                                        (0191)    
                                        (0192)    ;PRESERVE_CPU_CONTEXT
                                        (0193)    ;lcall _My_C_Function
                                        (0194)    ;RESTORE_CPU_CONTEXT
                                        (0195)    
                                        (0196)    ;---------------------------------------------------
                                        (0197)    ; Insert a lcall to a C function above this banner
                                        (0198)    ; and un-comment the lines between these banners
                                        (0199)    ;---------------------------------------------------
                                        (0200)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0201) 
0798: 7E       RETI                     (0202)    reti
                                        (0203) 
                                        (0204) 
                                        (0205) ; end of file Timer16_2INT.asm
FILE: lib\timer16_2.asm                 (0001) ;;*****************************************************************************
0799: 43 E1 08 OR    REG[0xE1],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16_2.asm
                                        (0004) ;;   Version: 2.6, Updated on 2012/9/21 at 11:59:42
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer16_2.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer16_2_EnableInt
                                        (0030) export _Timer16_2_EnableInt
                                        (0031) export  Timer16_2_DisableInt
                                        (0032) export _Timer16_2_DisableInt
                                        (0033) export  Timer16_2_Start
                                        (0034) export _Timer16_2_Start
                                        (0035) export  Timer16_2_Stop
                                        (0036) export _Timer16_2_Stop
                                        (0037) export  Timer16_2_WritePeriod
                                        (0038) export _Timer16_2_WritePeriod
                                        (0039) export  Timer16_2_WriteCompareValue
                                        (0040) export _Timer16_2_WriteCompareValue
                                        (0041) export  Timer16_2_wReadCompareValue
                                        (0042) export _Timer16_2_wReadCompareValue
                                        (0043) export  Timer16_2_wReadTimer
                                        (0044) export _Timer16_2_wReadTimer
                                        (0045) export  Timer16_2_wReadTimerSaveCV
                                        (0046) export _Timer16_2_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wTimer16_2_ReadCompareValue  ; deprecated
                                        (0051) export _wTimer16_2_ReadCompareValue  ; deprecated
                                        (0052) export  wTimer16_2_ReadTimer         ; deprecated
                                        (0053) export _wTimer16_2_ReadTimer         ; deprecated
                                        (0054) export  wTimer16_2_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wTimer16_2_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wTimer16_2_ReadCounter       ; obsolete
                                        (0058) export _wTimer16_2_ReadCounter       ; obsolete
                                        (0059) export  wTimer16_2_CaptureCounter    ; obsolete
                                        (0060) export _wTimer16_2_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA timer1_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer16_2_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer16_2_EnableInt:
                                        (0098) _Timer16_2_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer16_2_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
079C: 7F       RET                      (0102)    ret
079D: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer16_2_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer16_2_DisableInt:
                                        (0126) _Timer16_2_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer16_2_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
07A0: 7F       RET                      (0130)    ret
07A1: 43 2B 01 OR    REG[0x2B],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer16_2_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer16_2_Start:
                                        (0154) _Timer16_2_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer16_2_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
07A4: 7F       RET                      (0158)    ret
07A5: 41 2B FE AND   REG[0x2B],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer16_2_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer16_2_Stop:
                                        (0182) _Timer16_2_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer16_2_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
07A8: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer16_2_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer16_2_WritePeriod:
                                        (0211) _Timer16_2_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
07A9: 60 29    MOV   REG[0x29],A        (0213)    mov   reg[Timer16_2_PERIOD_LSB_REG], A
07AB: 5B       MOV   A,X                (0214)    mov   A, X
07AC: 60 2D    MOV   REG[0x2D],A        (0215)    mov   reg[Timer16_2_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
07AE: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: Timer16_2_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call Timer16_2_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  Timer16_2_WriteCompareValue:
                                        (0243) _Timer16_2_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
07AF: 60 2A    MOV   REG[0x2A],A        (0245)    mov   reg[Timer16_2_COMPARE_LSB_REG], A
07B1: 5B       MOV   A,X                (0246)    mov   A, X
07B2: 60 2E    MOV   REG[0x2E],A        (0247)    mov   reg[Timer16_2_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
07B4: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: Timer16_2_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  Timer16_2_wReadCompareValue:
                                        (0272) _Timer16_2_wReadCompareValue:
                                        (0273)  wTimer16_2_ReadCompareValue:                    ; this name deprecated
                                        (0274) _wTimer16_2_ReadCompareValue:                    ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
07B5: 5D 2E    MOV   A,REG[0x2E]        (0276)    mov   A, reg[Timer16_2_COMPARE_MSB_REG]
07B7: 5C       MOV   X,A                (0277)    mov   X, A
07B8: 5D 2A    MOV   A,REG[0x2A]        (0278)    mov   A, reg[Timer16_2_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
07BA: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: Timer16_2_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  Timer16_2_wReadTimerSaveCV:
                                        (0321) _Timer16_2_wReadTimerSaveCV:
                                        (0322)  wTimer16_2_ReadTimerSaveCV:                     ; this name deprecated
                                        (0323) _wTimer16_2_ReadTimerSaveCV:                     ; this name deprecated
                                        (0324)  wTimer16_2_ReadCounter:                         ; this name deprecated
                                        (0325) _wTimer16_2_ReadCounter:                         ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
07BB: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
07BC: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
07BE: 5D 2B    MOV   A,REG[0x2B]        (0334)    mov   A, reg[Timer16_2_CONTROL_LSB_REG]       ; save the Control register
07C0: 08       PUSH  A                  (0335)    push  A
07C1: 5D 2A    MOV   A,REG[0x2A]        (0336)    mov   A, reg[Timer16_2_COMPARE_LSB_REG]       ; save the Compare register
07C3: 08       PUSH  A                  (0337)    push  A
07C4: 5D 2E    MOV   A,REG[0x2E]        (0338)    mov   A, reg[Timer16_2_COMPARE_MSB_REG]
07C6: 08       PUSH  A                  (0339)    push  A
07C7: 5D 28    MOV   A,REG[0x28]        (0340)    mov   A, reg[Timer16_2_COUNTER_LSB_REG]       ; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
07C9: 5D 2E    MOV   A,REG[0x2E]        (0342)    mov   A, reg[Timer16_2_COMPARE_MSB_REG]       ; Now grab DR2 (DR0) and save
07CB: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
07CD: 5D 2A    MOV   A,REG[0x2A]        (0344)    mov   A, reg[Timer16_2_COMPARE_LSB_REG]
07CF: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
07D1: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
07D3: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
07D6: A0 03    JZ    0x07DA             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
07D8: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
07DA: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
07DC: 70 FE    AND   F,0xFE             
07DE: 41 2B FE AND   REG[0x2B],0xFE     
                                        (0352)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0353)    Timer16_2_Stop_M                              ; Disable (stop) the timer
07E1: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
07E2: 60 2E    MOV   REG[0x2E],A        (0355)    mov   reg[Timer16_2_COMPARE_MSB_REG], A
07E4: 18       POP   A                  (0356)    pop   A
07E5: 60 2A    MOV   REG[0x2A],A        (0357)    mov   reg[Timer16_2_COMPARE_LSB_REG], A
07E7: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
07E8: 60 2B    MOV   REG[0x2B],A        (0359)    mov   reg[Timer16_2_CONTROL_LSB_REG], A
07EA: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
07EB: 20       POP   X                  (0361)    pop   X
07EC: 70 3F    AND   F,0x3F             
07EE: 71 C0    OR    F,0xC0             
                                        (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
07F0: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: Timer16_2_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  Timer16_2_wReadTimer:
                                        (0397) _Timer16_2_wReadTimer:
                                        (0398)  wTimer16_2_ReadTimer:                           ; this name deprecated
                                        (0399) _wTimer16_2_ReadTimer:                           ; this name deprecated
                                        (0400)  wTimer16_2_CaptureCounter:                      ; this name deprecated
                                        (0401) _wTimer16_2_CaptureCounter:                      ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
07F1: 5D 28    MOV   A,REG[0x28]        (0404)    mov   A, reg[Timer16_2_COUNTER_LSB_REG]       ; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
07F3: 5D 2E    MOV   A,REG[0x2E]        (0407)    mov   A, reg[Timer16_2_COMPARE_MSB_REG]       ; Return DR2 (actually DR0)
07F5: 5C       MOV   X,A                (0408)    mov   X, A
07F6: 5D 2A    MOV   A,REG[0x2A]        (0409)    mov   A, reg[Timer16_2_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
07F8: 7F       RET                      (0411)    ret
                                        (0412) 
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) ; End of File Timer16_2.asm
FILE: lib\timer16_1int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16_1INT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2012/9/21 at 11:59:42
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Timer16_1.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Timer16_1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer16_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer16_1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
07F9: 76 0B    INC   [milisec]          (0075)    	inc [milisec]
                                        (0076)    
07FB: 68 0B    ASR   [milisec]          (0077) 	asr [milisec]
07FD: D0 7D    JNC   0x087B             (0078) 	jnc calcSec
07FF: 6B 0B    RLC   [milisec]          (0079) 	rlc [milisec]
0801: 55 0A 50 MOV   [msec],0x50        (0080) 	mov [msec], 0x50
                                        (0081) 
                                        (0082) printLCD:
                                        (0083) 
0804: 50 00    MOV   A,0x0              (0084) 	mov   A, 0                    ; row
0806: 57 00    MOV   X,0x0              (0085)    	mov   X, 0                    ; column
0808: 7C 0B CA LCALL _LCD_1_Position    (0086)    	lcall LCD_1_Position
080B: 50 02    MOV   A,0x2              (0087)    	mov   A, >sRomString23
080D: 57 CF    MOV   X,0xCF             (0088)    	mov   X, <sRomString23
080F: 7C 0A 45 LCALL _LCD_1_PrCString   (0089)    	lcall LCD_1_PrCString         ; Display string
                                        (0090) 	;   hour
0812: 50 01    MOV   A,0x1              (0091)    	mov   A, 1                    ; row
0814: 57 00    MOV   X,0x0              (0092)    	mov   X, 0                    ; column
0816: 7C 0B CA LCALL _LCD_1_Position    (0093)    	lcall LCD_1_Position          ; display result in hex 
0819: 51 0E    MOV   A,[hour]           (0094)    	mov A,[hour]
081B: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0095)    	lcall LCD_1_PrHexByte
                                        (0096) 	;  :
081E: 50 01    MOV   A,0x1              (0097) 	mov   A, 1                    ; row
0820: 57 02    MOV   X,0x2              (0098)    	mov   X, 2                    ; column
0822: 7C 0B CA LCALL _LCD_1_Position    (0099)    	lcall LCD_1_Position
0825: 50 01    MOV   A,0x1              (0100)    	mov   A, >sRomString2
0827: 57 B1    MOV   X,0xB1             (0101)    	mov   X, <sRomString2
0829: 7C 0A 45 LCALL _LCD_1_PrCString   (0102) 	lcall LCD_1_PrCString         ; Display string
                                        (0103) 	;  min
082C: 50 01    MOV   A,0x1              (0104) 	mov   A, 1                    ; row
082E: 57 03    MOV   X,0x3              (0105)    	mov   X, 3                    ; column
0830: 7C 0B CA LCALL _LCD_1_Position    (0106)    	lcall LCD_1_Position          ; display result in hex 
0833: 51 0D    MOV   A,[min]            (0107)    	mov A,[min]
0835: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0108)    	lcall LCD_1_PrHexByte
                                        (0109) 	;   :
0838: 50 01    MOV   A,0x1              (0110) 	mov   A, 1                    ; row
083A: 57 05    MOV   X,0x5              (0111)    	mov   X, 5                    ; column
083C: 7C 0B CA LCALL _LCD_1_Position    (0112)    	lcall LCD_1_Position
083F: 50 01    MOV   A,0x1              (0113)    	mov   A, >sRomString2
0841: 57 B1    MOV   X,0xB1             (0114)    	mov   X, <sRomString2
0843: 7C 0A 45 LCALL _LCD_1_PrCString   (0115) 	lcall LCD_1_PrCString         ; Display string
                                        (0116) 	;  sec
0846: 50 01    MOV   A,0x1              (0117) 	mov   A, 1                    ; row
0848: 57 06    MOV   X,0x6              (0118)    	mov   X, 6                    ; column
084A: 7C 0B CA LCALL _LCD_1_Position    (0119)    	lcall LCD_1_Position          ; display result in hex 
084D: 51 0C    MOV   A,[sec]            (0120)    	mov A,[sec]
084F: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0121)    	lcall LCD_1_PrHexByte
                                        (0122) 	;  .
0852: 50 01    MOV   A,0x1              (0123) 	mov   A, 1                    ; row
0854: 57 08    MOV   X,0x8              (0124)    	mov   X, 8                    ; column
0856: 7C 0B CA LCALL _LCD_1_Position    (0125)    	lcall LCD_1_Position
0859: 50 01    MOV   A,0x1              (0126)    	mov   A, >sRomString3
085B: 57 B3    MOV   X,0xB3             (0127)    	mov   X, <sRomString3
085D: 7C 0A 45 LCALL _LCD_1_PrCString   (0128) 	lcall LCD_1_PrCString         ; Display string
                                        (0129) 	;  msec
0860: 50 01    MOV   A,0x1              (0130) 	mov   A, 1                    ; row
0862: 57 09    MOV   X,0x9              (0131)    	mov   X, 9                    ; column
0864: 7C 0B CA LCALL _LCD_1_Position    (0132)    	lcall LCD_1_Position          ; display result in hex 
0867: 51 0A    MOV   A,[msec]           (0133) 	mov A,[msec]
0869: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0134)    	lcall LCD_1_PrHexByte
                                        (0135) 	; 00000
086C: 50 01    MOV   A,0x1              (0136) 	mov   A, 1                    ; row
086E: 57 0B    MOV   X,0xB              (0137)    	mov   X, 11                    ; column
0870: 7C 0B CA LCALL _LCD_1_Position    (0138)    	lcall LCD_1_Position
0873: 50 02    MOV   A,0x2              (0139)    	mov   A, >sRomString22
0875: 57 C9    MOV   X,0xC9             (0140)    	mov   X, <sRomString22
0877: 7C 0A 45 LCALL _LCD_1_PrCString   (0141) 	lcall LCD_1_PrCString         ; Display string
                                        (0142) 	
087A: 7E       RETI                     (0143) 	reti
                                        (0144) 	
                                        (0145) 	
                                        (0146) calcSec:
087B: 6B 0B    RLC   [milisec]          (0147) 	rlc [milisec]
087D: 55 0A 00 MOV   [msec],0x0         (0148) 	mov [msec], 0x0
0880: 55 0B 00 MOV   [milisec],0x0      (0149) 	mov [milisec], 0x0
0883: 76 0C    INC   [sec]              (0150) 	inc [sec]
0885: 3C 0C 3B CMP   [sec],0x3B         (0151) 	cmp [sec],0x3B
0888: BF 7B    JNZ   0x0804             (0152) 	jnz printLCD
                                        (0153) 
                                        (0154) calcMin:
088A: 55 0C 00 MOV   [sec],0x0          (0155) 	mov [sec],0x00
088D: 76 0D    INC   [min]              (0156) 	inc [min]
088F: 3C 0D 3B CMP   [min],0x3B         (0157) 	cmp [min],0x3B
0892: BF 71    JNZ   0x0804             (0158) 	jnz printLCD
                                        (0159) 
                                        (0160) calcHr:
0894: 55 0D 00 MOV   [min],0x0          (0161) 	mov [min],0x00
0897: 76 0E    INC   [hour]             (0162) 	inc [hour]
0899: 3C 0E 63 CMP   [hour],0x63        (0163) 	cmp [hour],0x63
089C: BF 67    JNZ   0x0804             (0164) 	jnz printLCD
                                        (0165) 
                                        (0166) reset:
089E: 55 0B 00 MOV   [milisec],0x0      (0167) 	mov [milisec],0x00
08A1: 55 0C 00 MOV   [sec],0x0          (0168) 	mov [sec],0x00
08A4: 55 0D 00 MOV   [min],0x0          (0169) 	mov [min],0x00
08A7: 55 0E 00 MOV   [hour],0x0         (0170) 	mov [hour],0x00
08AA: BF 59    JNZ   0x0804             (0171) 	jnz printLCD
                                        (0172)      
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function below this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    
                                        (0178)    ;PRESERVE_CPU_CONTEXT
                                        (0179)    ;lcall _My_C_Function
                                        (0180)    ;RESTORE_CPU_CONTEXT
                                        (0181)    
                                        (0182)    ;---------------------------------------------------
                                        (0183)    ; Insert a lcall to a C function above this banner
                                        (0184)    ; and un-comment the lines between these banners
                                        (0185)    ;---------------------------------------------------
                                        (0186)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0187) 
08AC: 7E       RETI                     (0188)    reti
                                        (0189) 
                                        (0190) 
                                        (0191) ; end of file Timer16_1INT.asm
FILE: lib\timer16_1.asm                 (0001) ;;*****************************************************************************
08AD: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16_1.asm
                                        (0004) ;;   Version: 2.6, Updated on 2012/9/21 at 11:59:42
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer16_1.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer16_1_EnableInt
                                        (0030) export _Timer16_1_EnableInt
                                        (0031) export  Timer16_1_DisableInt
                                        (0032) export _Timer16_1_DisableInt
                                        (0033) export  Timer16_1_Start
                                        (0034) export _Timer16_1_Start
                                        (0035) export  Timer16_1_Stop
                                        (0036) export _Timer16_1_Stop
                                        (0037) export  Timer16_1_WritePeriod
                                        (0038) export _Timer16_1_WritePeriod
                                        (0039) export  Timer16_1_WriteCompareValue
                                        (0040) export _Timer16_1_WriteCompareValue
                                        (0041) export  Timer16_1_wReadCompareValue
                                        (0042) export _Timer16_1_wReadCompareValue
                                        (0043) export  Timer16_1_wReadTimer
                                        (0044) export _Timer16_1_wReadTimer
                                        (0045) export  Timer16_1_wReadTimerSaveCV
                                        (0046) export _Timer16_1_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wTimer16_1_ReadCompareValue  ; deprecated
                                        (0051) export _wTimer16_1_ReadCompareValue  ; deprecated
                                        (0052) export  wTimer16_1_ReadTimer         ; deprecated
                                        (0053) export _wTimer16_1_ReadTimer         ; deprecated
                                        (0054) export  wTimer16_1_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wTimer16_1_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wTimer16_1_ReadCounter       ; obsolete
                                        (0058) export _wTimer16_1_ReadCounter       ; obsolete
                                        (0059) export  wTimer16_1_CaptureCounter    ; obsolete
                                        (0060) export _wTimer16_1_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA timer1_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer16_1_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer16_1_EnableInt:
                                        (0098) _Timer16_1_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer16_1_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
08B0: 7F       RET                      (0102)    ret
08B1: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer16_1_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer16_1_DisableInt:
                                        (0126) _Timer16_1_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer16_1_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
08B4: 7F       RET                      (0130)    ret
08B5: 43 23 01 OR    REG[0x23],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer16_1_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer16_1_Start:
                                        (0154) _Timer16_1_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer16_1_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
08B8: 7F       RET                      (0158)    ret
08B9: 41 23 FE AND   REG[0x23],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer16_1_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer16_1_Stop:
                                        (0182) _Timer16_1_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer16_1_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
08BC: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer16_1_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer16_1_WritePeriod:
                                        (0211) _Timer16_1_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
08BD: 60 21    MOV   REG[0x21],A        (0213)    mov   reg[Timer16_1_PERIOD_LSB_REG], A
08BF: 5B       MOV   A,X                (0214)    mov   A, X
08C0: 60 25    MOV   REG[0x25],A        (0215)    mov   reg[Timer16_1_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
08C2: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: Timer16_1_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call Timer16_1_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  Timer16_1_WriteCompareValue:
                                        (0243) _Timer16_1_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
08C3: 60 22    MOV   REG[0x22],A        (0245)    mov   reg[Timer16_1_COMPARE_LSB_REG], A
08C5: 5B       MOV   A,X                (0246)    mov   A, X
08C6: 60 26    MOV   REG[0x26],A        (0247)    mov   reg[Timer16_1_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
08C8: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: Timer16_1_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  Timer16_1_wReadCompareValue:
                                        (0272) _Timer16_1_wReadCompareValue:
                                        (0273)  wTimer16_1_ReadCompareValue:                    ; this name deprecated
                                        (0274) _wTimer16_1_ReadCompareValue:                    ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
08C9: 5D 26    MOV   A,REG[0x26]        (0276)    mov   A, reg[Timer16_1_COMPARE_MSB_REG]
08CB: 5C       MOV   X,A                (0277)    mov   X, A
08CC: 5D 22    MOV   A,REG[0x22]        (0278)    mov   A, reg[Timer16_1_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
08CE: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: Timer16_1_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  Timer16_1_wReadTimerSaveCV:
                                        (0321) _Timer16_1_wReadTimerSaveCV:
                                        (0322)  wTimer16_1_ReadTimerSaveCV:                     ; this name deprecated
                                        (0323) _wTimer16_1_ReadTimerSaveCV:                     ; this name deprecated
                                        (0324)  wTimer16_1_ReadCounter:                         ; this name deprecated
                                        (0325) _wTimer16_1_ReadCounter:                         ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
08CF: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
08D0: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
08D2: 5D 23    MOV   A,REG[0x23]        (0334)    mov   A, reg[Timer16_1_CONTROL_LSB_REG]       ; save the Control register
08D4: 08       PUSH  A                  (0335)    push  A
08D5: 5D 22    MOV   A,REG[0x22]        (0336)    mov   A, reg[Timer16_1_COMPARE_LSB_REG]       ; save the Compare register
08D7: 08       PUSH  A                  (0337)    push  A
08D8: 5D 26    MOV   A,REG[0x26]        (0338)    mov   A, reg[Timer16_1_COMPARE_MSB_REG]
08DA: 08       PUSH  A                  (0339)    push  A
08DB: 5D 20    MOV   A,REG[0x20]        (0340)    mov   A, reg[Timer16_1_COUNTER_LSB_REG]       ; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
08DD: 5D 26    MOV   A,REG[0x26]        (0342)    mov   A, reg[Timer16_1_COMPARE_MSB_REG]       ; Now grab DR2 (DR0) and save
08DF: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
08E1: 5D 22    MOV   A,REG[0x22]        (0344)    mov   A, reg[Timer16_1_COMPARE_LSB_REG]
08E3: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
08E5: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
08E7: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
08EA: A0 03    JZ    0x08EE             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
08EC: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
08EE: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
08F0: 70 FE    AND   F,0xFE             
08F2: 41 23 FE AND   REG[0x23],0xFE     
                                        (0352)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0353)    Timer16_1_Stop_M                              ; Disable (stop) the timer
08F5: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
08F6: 60 26    MOV   REG[0x26],A        (0355)    mov   reg[Timer16_1_COMPARE_MSB_REG], A
08F8: 18       POP   A                  (0356)    pop   A
08F9: 60 22    MOV   REG[0x22],A        (0357)    mov   reg[Timer16_1_COMPARE_LSB_REG], A
08FB: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
08FC: 60 23    MOV   REG[0x23],A        (0359)    mov   reg[Timer16_1_CONTROL_LSB_REG], A
08FE: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
08FF: 20       POP   X                  (0361)    pop   X
0900: 70 3F    AND   F,0x3F             
0902: 71 C0    OR    F,0xC0             
                                        (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
0904: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: Timer16_1_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  Timer16_1_wReadTimer:
                                        (0397) _Timer16_1_wReadTimer:
                                        (0398)  wTimer16_1_ReadTimer:                           ; this name deprecated
                                        (0399) _wTimer16_1_ReadTimer:                           ; this name deprecated
                                        (0400)  wTimer16_1_CaptureCounter:                      ; this name deprecated
                                        (0401) _wTimer16_1_CaptureCounter:                      ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
0905: 5D 20    MOV   A,REG[0x20]        (0404)    mov   A, reg[Timer16_1_COUNTER_LSB_REG]       ; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
0907: 5D 26    MOV   A,REG[0x26]        (0407)    mov   A, reg[Timer16_1_COMPARE_MSB_REG]       ; Return DR2 (actually DR0)
0909: 5C       MOV   X,A                (0408)    mov   X, A
090A: 5D 22    MOV   A,REG[0x22]        (0409)    mov   A, reg[Timer16_1_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
090C: 7F       RET                      (0411)    ret
                                        (0412) 
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) ; End of File Timer16_1.asm
FILE: lib\pga_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_1.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2012/9/21 at 11:59:15
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_1.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_1_Start
                                        (0060) export _PGA_1_Start
                                        (0061) export  PGA_1_SetPower
                                        (0062) export _PGA_1_SetPower
                                        (0063) 
                                        (0064) export  PGA_1_SetGain
                                        (0065) export _PGA_1_SetGain
                                        (0066) 
                                        (0067) export  PGA_1_Stop
                                        (0068) export _PGA_1_Stop
                                        (0069) 
                                        (0070) IF (PGA_1_AGNDBUFAPI)
                                        (0071) export  PGA_1_EnableAGNDBuffer
                                        (0072) export _PGA_1_EnableAGNDBuffer
                                        (0073) export  PGA_1_DisableAGNDBuffer
                                        (0074) export _PGA_1_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_1_Start
                                        (0092) ;  FUNCTION NAME: PGA_1_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_1_Start:
                                        (0111) _PGA_1_Start:
                                        (0112)  PGA_1_SetPower:
                                        (0113) _PGA_1_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
090D: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
090F: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
0910: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0911: 5D 77    MOV   A,REG[0x77]        (0120)    mov  A, reg[PGA_1_GAIN_CR2]                             ; read power value
0913: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
0915: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
0917: 60 77    MOV   REG[0x77],A        (0123)    mov  reg[PGA_1_GAIN_CR2], A                        ; move complete value back to register
0919: 18       POP   A                  (0124)    pop  A
091A: 70 3F    AND   F,0x3F             
091C: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
091E: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_1_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_1_SetGain:
                                        (0154) _PGA_1_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
091F: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
0921: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
0922: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
0923: 5D 75    MOV   A,REG[0x75]        (0161)    mov  A, reg[PGA_1_GAIN_CR0]                             ; read mux settings
0925: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
0927: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
092A: B0 0E    JNZ   0x0939             (0164)    jnz  .SETHIGHGAIN
092C: 41 74 FE AND   REG[0x74],0xFE     (0165)    and  reg[PGA_1_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
092F: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
0931: 60 75    MOV   REG[0x75],A        (0167)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
0933: 18       POP   A                  (0168)    pop  A
0934: 70 3F    AND   F,0x3F             
0936: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
0938: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
0939: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
093C: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
093E: 60 75    MOV   REG[0x75],A        (0175)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
0940: 43 74 01 OR    REG[0x74],0x1      (0176)    or   reg[PGA_1_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
0943: 18       POP   A                  (0177)    pop  A
0944: 70 3F    AND   F,0x3F             
0946: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
0948: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_1_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_1_Stop:
                                        (0203) _PGA_1_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
0949: 41 77 FC AND   REG[0x77],0xFC     (0206)    and REG[PGA_1_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
094C: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_1_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_1_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_1_EnableAGNDBuffer:
                                        (0233) _PGA_1_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_1_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_1_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_1_DisableAGNDBuffer:
                                        (0261) _PGA_1_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_1_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_1.asm
FILE: lib\led_4.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_4.asm
                                        (0004) ;;  Version: 1.40, Updated on 2012/9/21 at 11:59:10
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_4.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_4_Start
                                        (0027) export  LED_4_Start
                                        (0028) 
                                        (0029) export _LED_4_Stop
                                        (0030) export  LED_4_Stop
                                        (0031) 
                                        (0032) export _LED_4_On
                                        (0033) export  LED_4_On
                                        (0034) 
                                        (0035) export _LED_4_Off
                                        (0036) export  LED_4_Off
                                        (0037) 
                                        (0038) export _LED_4_Switch
                                        (0039) export  LED_4_Switch
                                        (0040) 
                                        (0041) export _LED_4_Invert
                                        (0042) export  LED_4_Invert
                                        (0043) 
                                        (0044) export _LED_4_GetState
                                        (0045) export  LED_4_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_4_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_4_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_4_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_4_On:
                                        (0079)  LED_4_On:
094D: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
094F: 80 03    JMP   _LED_4_Switch      (0081)    jmp  LED_4_Switch 
                                        (0082) 
                                        (0083) _LED_4_Start:
                                        (0084)  LED_4_Start:
                                        (0085) _LED_4_Stop:
                                        (0086)  LED_4_Stop:
                                        (0087) _LED_4_Off:
                                        (0088)  LED_4_Off:
0951: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
0953: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0090) 
                                        (0091) _LED_4_Switch:
                                        (0092)  LED_4_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0096) 
0956: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
0958: A0 06    JZ    0x095F             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(0)                                            ; Active High Digit Drive
                                        (0102)    or   [Port_1_Data_SHADE],LED_4_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
095A: 26 00 EF AND   [0x0],0xEF         (0104)    and  [Port_1_Data_SHADE],~LED_4_PinMask
                                        (0105) ENDIF
095D: 80 04    JMP   0x0962             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(0)                      ; Active High Digit Drive
                                        (0110)    and  [Port_1_Data_SHADE],~LED_4_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
095F: 2E 00 10 OR    [0x0],0x10         (0112)    or   [Port_1_Data_SHADE],LED_4_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0962: 51 00    MOV   A,[0x0]            (0116)    mov  A,[Port_1_Data_SHADE]
0964: 60 04    MOV   REG[0x4],A         (0117)    mov  reg[LED_4_PortDR],A
0966: 70 3F    AND   F,0x3F             
0968: 71 C0    OR    F,0xC0             
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
096A: 7F       RET                      (0121)    ret
096B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_4_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_4_Invert:
                                        (0144)  LED_4_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0148) 
096E: 36 00 10 XOR   [0x0],0x10         (0149)    xor  [Port_1_Data_SHADE],LED_4_PinMask
0971: 51 00    MOV   A,[0x0]            (0150)    mov  A,[Port_1_Data_SHADE]
0973: 60 04    MOV   REG[0x4],A         (0151)    mov  reg[LED_4_PortDR],A
0975: 70 3F    AND   F,0x3F             
0977: 71 C0    OR    F,0xC0             
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
0979: 7F       RET                      (0155)    ret
097A: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_4_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_4_GetState:
                                        (0177)  LED_4_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0181) 
097D: 51 00    MOV   A,[0x0]            (0182)    mov   A,[Port_1_Data_SHADE]         ; Get shade value
                                        (0183) IF(0)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
097F: 73       CPL   A                  (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
0980: 21 10    AND   A,0x10             (0188)    and   A,LED_4_PinMask               ; Mask off the trash
0982: A0 03    JZ    0x0986             (0189)    jz    .End_LED_GS                   ; If zero, we're done
0984: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
0986: 70 3F    AND   F,0x3F             
0988: 71 C0    OR    F,0xC0             
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
098A: 7F       RET                      (0195)    ret
FILE: lib\led_3.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_3.asm
                                        (0004) ;;  Version: 1.40, Updated on 2012/9/21 at 11:59:10
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_3.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_3_Start
                                        (0027) export  LED_3_Start
                                        (0028) 
                                        (0029) export _LED_3_Stop
                                        (0030) export  LED_3_Stop
                                        (0031) 
                                        (0032) export _LED_3_On
                                        (0033) export  LED_3_On
                                        (0034) 
                                        (0035) export _LED_3_Off
                                        (0036) export  LED_3_Off
                                        (0037) 
                                        (0038) export _LED_3_Switch
                                        (0039) export  LED_3_Switch
                                        (0040) 
                                        (0041) export _LED_3_Invert
                                        (0042) export  LED_3_Invert
                                        (0043) 
                                        (0044) export _LED_3_GetState
                                        (0045) export  LED_3_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_3_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_3_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_3_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_3_On:
                                        (0079)  LED_3_On:
098B: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
098D: 80 03    JMP   _LED_3_Switch      (0081)    jmp  LED_3_Switch 
                                        (0082) 
                                        (0083) _LED_3_Start:
                                        (0084)  LED_3_Start:
                                        (0085) _LED_3_Stop:
                                        (0086)  LED_3_Stop:
                                        (0087) _LED_3_Off:
                                        (0088)  LED_3_Off:
098F: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
0991: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0090) 
                                        (0091) _LED_3_Switch:
                                        (0092)  LED_3_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0096) 
0994: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
0996: A0 06    JZ    0x099D             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(0)                                            ; Active High Digit Drive
                                        (0102)    or   [Port_1_Data_SHADE],LED_3_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
0998: 26 00 F7 AND   [0x0],0xF7         (0104)    and  [Port_1_Data_SHADE],~LED_3_PinMask
                                        (0105) ENDIF
099B: 80 04    JMP   0x09A0             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(0)                      ; Active High Digit Drive
                                        (0110)    and  [Port_1_Data_SHADE],~LED_3_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
099D: 2E 00 08 OR    [0x0],0x8          (0112)    or   [Port_1_Data_SHADE],LED_3_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
09A0: 51 00    MOV   A,[0x0]            (0116)    mov  A,[Port_1_Data_SHADE]
09A2: 60 04    MOV   REG[0x4],A         (0117)    mov  reg[LED_3_PortDR],A
09A4: 70 3F    AND   F,0x3F             
09A6: 71 C0    OR    F,0xC0             
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
09A8: 7F       RET                      (0121)    ret
09A9: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_3_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_3_Invert:
                                        (0144)  LED_3_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0148) 
09AC: 36 00 08 XOR   [0x0],0x8          (0149)    xor  [Port_1_Data_SHADE],LED_3_PinMask
09AF: 51 00    MOV   A,[0x0]            (0150)    mov  A,[Port_1_Data_SHADE]
09B1: 60 04    MOV   REG[0x4],A         (0151)    mov  reg[LED_3_PortDR],A
09B3: 70 3F    AND   F,0x3F             
09B5: 71 C0    OR    F,0xC0             
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
09B7: 7F       RET                      (0155)    ret
09B8: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_3_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_3_GetState:
                                        (0177)  LED_3_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0181) 
09BB: 51 00    MOV   A,[0x0]            (0182)    mov   A,[Port_1_Data_SHADE]         ; Get shade value
                                        (0183) IF(0)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
09BD: 73       CPL   A                  (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
09BE: 21 08    AND   A,0x8              (0188)    and   A,LED_3_PinMask               ; Mask off the trash
09C0: A0 03    JZ    0x09C4             (0189)    jz    .End_LED_GS                   ; If zero, we're done
09C2: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
09C4: 70 3F    AND   F,0x3F             
09C6: 71 C0    OR    F,0xC0             
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
09C8: 7F       RET                      (0195)    ret
FILE: lib\led_2.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_2.asm
                                        (0004) ;;  Version: 1.40, Updated on 2012/9/21 at 11:59:10
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_2.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_2_Start
                                        (0027) export  LED_2_Start
                                        (0028) 
                                        (0029) export _LED_2_Stop
                                        (0030) export  LED_2_Stop
                                        (0031) 
                                        (0032) export _LED_2_On
                                        (0033) export  LED_2_On
                                        (0034) 
                                        (0035) export _LED_2_Off
                                        (0036) export  LED_2_Off
                                        (0037) 
                                        (0038) export _LED_2_Switch
                                        (0039) export  LED_2_Switch
                                        (0040) 
                                        (0041) export _LED_2_Invert
                                        (0042) export  LED_2_Invert
                                        (0043) 
                                        (0044) export _LED_2_GetState
                                        (0045) export  LED_2_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_2_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_2_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_2_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_2_On:
                                        (0079)  LED_2_On:
09C9: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
09CB: 80 03    JMP   _LED_2_Switch      (0081)    jmp  LED_2_Switch 
                                        (0082) 
                                        (0083) _LED_2_Start:
                                        (0084)  LED_2_Start:
                                        (0085) _LED_2_Stop:
                                        (0086)  LED_2_Stop:
                                        (0087) _LED_2_Off:
                                        (0088)  LED_2_Off:
09CD: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
09CF: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0090) 
                                        (0091) _LED_2_Switch:
                                        (0092)  LED_2_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0096) 
09D2: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
09D4: A0 06    JZ    0x09DB             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(0)                                            ; Active High Digit Drive
                                        (0102)    or   [Port_1_Data_SHADE],LED_2_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
09D6: 26 00 FB AND   [0x0],0xFB         (0104)    and  [Port_1_Data_SHADE],~LED_2_PinMask
                                        (0105) ENDIF
09D9: 80 04    JMP   0x09DE             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(0)                      ; Active High Digit Drive
                                        (0110)    and  [Port_1_Data_SHADE],~LED_2_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
09DB: 2E 00 04 OR    [0x0],0x4          (0112)    or   [Port_1_Data_SHADE],LED_2_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
09DE: 51 00    MOV   A,[0x0]            (0116)    mov  A,[Port_1_Data_SHADE]
09E0: 60 04    MOV   REG[0x4],A         (0117)    mov  reg[LED_2_PortDR],A
09E2: 70 3F    AND   F,0x3F             
09E4: 71 C0    OR    F,0xC0             
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
09E6: 7F       RET                      (0121)    ret
09E7: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_2_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_2_Invert:
                                        (0144)  LED_2_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0148) 
09EA: 36 00 04 XOR   [0x0],0x4          (0149)    xor  [Port_1_Data_SHADE],LED_2_PinMask
09ED: 51 00    MOV   A,[0x0]            (0150)    mov  A,[Port_1_Data_SHADE]
09EF: 60 04    MOV   REG[0x4],A         (0151)    mov  reg[LED_2_PortDR],A
09F1: 70 3F    AND   F,0x3F             
09F3: 71 C0    OR    F,0xC0             
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
09F5: 7F       RET                      (0155)    ret
09F6: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_2_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_2_GetState:
                                        (0177)  LED_2_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0181) 
09F9: 51 00    MOV   A,[0x0]            (0182)    mov   A,[Port_1_Data_SHADE]         ; Get shade value
                                        (0183) IF(0)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
09FB: 73       CPL   A                  (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
09FC: 21 04    AND   A,0x4              (0188)    and   A,LED_2_PinMask               ; Mask off the trash
09FE: A0 03    JZ    0x0A02             (0189)    jz    .End_LED_GS                   ; If zero, we're done
0A00: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
0A02: 70 3F    AND   F,0x3F             
0A04: 71 C0    OR    F,0xC0             
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
0A06: 7F       RET                      (0195)    ret
FILE: lib\led_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_1.asm
                                        (0004) ;;  Version: 1.40, Updated on 2012/9/21 at 11:59:10
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_1_Start
                                        (0027) export  LED_1_Start
                                        (0028) 
                                        (0029) export _LED_1_Stop
                                        (0030) export  LED_1_Stop
                                        (0031) 
                                        (0032) export _LED_1_On
                                        (0033) export  LED_1_On
                                        (0034) 
                                        (0035) export _LED_1_Off
                                        (0036) export  LED_1_Off
                                        (0037) 
                                        (0038) export _LED_1_Switch
                                        (0039) export  LED_1_Switch
                                        (0040) 
                                        (0041) export _LED_1_Invert
                                        (0042) export  LED_1_Invert
                                        (0043) 
                                        (0044) export _LED_1_GetState
                                        (0045) export  LED_1_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_1_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_1_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_1_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_1_On:
                                        (0079)  LED_1_On:
0A07: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
0A09: 80 03    JMP   _LED_1_Switch      (0081)    jmp  LED_1_Switch 
                                        (0082) 
                                        (0083) _LED_1_Start:
                                        (0084)  LED_1_Start:
                                        (0085) _LED_1_Stop:
                                        (0086)  LED_1_Stop:
                                        (0087) _LED_1_Off:
                                        (0088)  LED_1_Off:
0A0B: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
0A0D: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0090) 
                                        (0091) _LED_1_Switch:
                                        (0092)  LED_1_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0096) 
0A10: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
0A12: A0 06    JZ    0x0A19             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(0)                                            ; Active High Digit Drive
                                        (0102)    or   [Port_1_Data_SHADE],LED_1_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
0A14: 26 00 FD AND   [0x0],0xFD         (0104)    and  [Port_1_Data_SHADE],~LED_1_PinMask
                                        (0105) ENDIF
0A17: 80 04    JMP   0x0A1C             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(0)                      ; Active High Digit Drive
                                        (0110)    and  [Port_1_Data_SHADE],~LED_1_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
0A19: 2E 00 02 OR    [0x0],0x2          (0112)    or   [Port_1_Data_SHADE],LED_1_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0A1C: 51 00    MOV   A,[0x0]            (0116)    mov  A,[Port_1_Data_SHADE]
0A1E: 60 04    MOV   REG[0x4],A         (0117)    mov  reg[LED_1_PortDR],A
0A20: 70 3F    AND   F,0x3F             
0A22: 71 C0    OR    F,0xC0             
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
0A24: 7F       RET                      (0121)    ret
0A25: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_1_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_1_Invert:
                                        (0144)  LED_1_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0148) 
0A28: 36 00 02 XOR   [0x0],0x2          (0149)    xor  [Port_1_Data_SHADE],LED_1_PinMask
0A2B: 51 00    MOV   A,[0x0]            (0150)    mov  A,[Port_1_Data_SHADE]
0A2D: 60 04    MOV   REG[0x4],A         (0151)    mov  reg[LED_1_PortDR],A
0A2F: 70 3F    AND   F,0x3F             
0A31: 71 C0    OR    F,0xC0             
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
0A33: 7F       RET                      (0155)    ret
0A34: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_1_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_1_GetState:
                                        (0177)  LED_1_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0181) 
0A37: 51 00    MOV   A,[0x0]            (0182)    mov   A,[Port_1_Data_SHADE]         ; Get shade value
                                        (0183) IF(0)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
0A39: 73       CPL   A                  (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
0A3A: 21 02    AND   A,0x2              (0188)    and   A,LED_1_PinMask               ; Mask off the trash
0A3C: A0 03    JZ    0x0A40             (0189)    jz    .End_LED_GS                   ; If zero, we're done
0A3E: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
0A40: 70 3F    AND   F,0x3F             
0A42: 71 C0    OR    F,0xC0             
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
0A44: 7F       RET                      (0195)    ret
FILE: lib\lcd_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD_1.asm
                                        (0004) ;;  Version: 1.60, Updated on 2012/9/21 at 11:59:10
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD_1.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_1_Start
                                        (0044) export  _LCD_1_Start
                                        (0045) export   LCD_1_Init
                                        (0046) export  _LCD_1_Init
                                        (0047) 
                                        (0048) export   LCD_1_WriteData
                                        (0049) export  _LCD_1_WriteData
                                        (0050) 
                                        (0051) export   LCD_1_Control
                                        (0052) export  _LCD_1_Control
                                        (0053) 
                                        (0054) export  LCD_1_PrString
                                        (0055) export _LCD_1_PrString
                                        (0056) 
                                        (0057) export  LCD_1_PrCString
                                        (0058) export _LCD_1_PrCString
                                        (0059) 
                                        (0060) export  LCD_1_Position
                                        (0061) export _LCD_1_Position
                                        (0062) 
                                        (0063) export  LCD_1_PrHexByte
                                        (0064) export _LCD_1_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_1_PrHexInt
                                        (0067) export _LCD_1_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_1_Delay50uTimes
                                        (0070) export _LCD_1_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_1_Delay50u
                                        (0073) export _LCD_1_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_1_BARGRAPH_ENABLE)
                                        (0081) export  LCD_1_InitBG
                                        (0082) export _LCD_1_InitBG
                                        (0083) 
                                        (0084) export  LCD_1_InitVBG
                                        (0085) export _LCD_1_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_1_DrawVBG and
                                        (0090) ;    LCD_1_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_1_DrawVBG
                                        (0112) export _LCD_1_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_1_DrawVBG
                                        (0117) export  LCD_1_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_1_Write_Data
                                        (0127) export  _LCD_1_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_1_Port:           equ    PRT2DR
                                        (0135) LCD_1_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_1_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_1_E:              equ    10h
                                        (0139) LCD_1_RW:             equ    40h
                                        (0140) LCD_1_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_1_DATA_MASK:      equ    0Fh
                                        (0143) LCD_1_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_1_DATA_READ:      equ    ( LCD_1_E | LCD_1_RW | LCD_1_RS )
                                        (0146) LCD_1_CNTL_READ:      equ    ( LCD_1_E | LCD_1_RW )
                                        (0147) LCD_1_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_1_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_1_DISP_INC:       equ    03h
                                        (0151) LCD_1_DISP_OFF:       equ    08h
                                        (0152) LCD_1_DISP_ON:        equ    0Ch
                                        (0153) LCD_1_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_1_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_1_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_1_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_1_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_1_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_1_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_1_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_1_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_1_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_1_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_1_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_1_PrCString:
                                        (0205) _LCD_1_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0A45: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0A46: 10       PUSH  X                  (0209)     push  X
0A47: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0A48: B0 04    JNZ   0x0A4D             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0A4A: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0A4B: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0A4C: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0A4D: 90 44    CALL  _LCD_1_Write_Data|LCD_1_WriteData|_LCD_1_WriteData|LCD_1_Write_Data(0218)     call  LCD_1_WriteData              ; Write data to LCD
0A4F: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0A50: 18       POP   A                  (0220)     pop   A
0A51: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0A52: DF F2    JNC   _LCD_1_PrCString   (0222)     jnc   .Loop_PrCString
0A54: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0A55: 8F EF    JMP   _LCD_1_PrCString   (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_1_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_1_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_1_PrHexByte:
                                        (0258) _LCD_1_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0A67: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0A68: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0A69: 67       ASR   A                  (0262)     asr   A
0A6A: 67       ASR   A                  (0263)     asr   A
0A6B: 67       ASR   A                  (0264)     asr   A
0A6C: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0A6E: FF E7    INDEX LCD_1_HEX_STR      (0266)     index LCD_1_HEX_STR                  ; Get Hex value
0A70: 90 21    CALL  _LCD_1_Write_Data|LCD_1_WriteData|_LCD_1_WriteData|LCD_1_Write_Data(0267)     call  LCD_1_WriteData              ; Write data to screen
0A72: 18       POP   A                  (0268)     pop   A                            ; Restore value
0A73: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
0A75: FF E0    INDEX LCD_1_HEX_STR      (0270)     index LCD_1_HEX_STR                  ; Get Hex value
0A77: 90 1A    CALL  _LCD_1_Write_Data|LCD_1_WriteData|_LCD_1_WriteData|LCD_1_Write_Data(0271)     call  LCD_1_WriteData              ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0A79: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_1_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_1_PrHexInt:
                                        (0303) _LCD_1_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0A7A: 4B       SWAP  A,X                (0305)     swap  A,X
0A7B: 9F EA    CALL  _LCD_1_PrHexByte   (0306)     call  LCD_1_PrHexByte              ; Print MSB
0A7D: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0A7E: 9F E7    CALL  _LCD_1_PrHexByte   (0308)     call  LCD_1_PrHexByte              ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
0A80: 7F       RET                      (0310)     ret
0A81: 70 BF    AND   F,0xBF             
0A83: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_1_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_1_PrString:
                                        (0342) _LCD_1_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0A85: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0A87: A0 06    JZ    0x0A8E             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_1_writeData is known not to modify X so no need to preserve
0A89: 90 08    CALL  _LCD_1_Write_Data|LCD_1_WriteData|_LCD_1_WriteData|LCD_1_Write_Data(0349)     call  LCD_1_WriteData              ; Write data to screen
0A8B: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0A8C: 8F F8    JMP   0x0A85             (0351)     jmp   .Loop_PrString               ; Go get next character
0A8E: 70 3F    AND   F,0x3F             
0A90: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0A92: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_1_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_1_WriteData:
                                        (0382) _LCD_1_WriteData:
                                        (0383)  LCD_1_Write_Data:   ; Do not use
                                        (0384) _LCD_1_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
0A93: 90 65    CALL  0x0AFA             (0386)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_1_Check_Ready
0A95: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0A96: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0A97: 67       ASR   A                  (0390)     asr   A
0A98: 67       ASR   A                  (0391)     asr   A
0A99: 67       ASR   A                  (0392)     asr   A
0A9A: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0A9C: 90 3B    CALL  0x0AD9             (0394)     call  LCD_1_WDATA_Nibble           ; Write Upper nibble
0A9E: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
0A9F: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
0AA1: 40       NOP                      (0397)     nop
0AA2: 40       NOP                      (0398)     nop
0AA3: 40       NOP                      (0399)     nop
0AA4: 90 33    CALL  0x0AD9             (0400)     call  LCD_1_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0AA6: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_1_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_1_Control:
                                        (0430) _LCD_1_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0AA7: 90 51    CALL  0x0AFA             (0432)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_1_Check_Ready
0AA9: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0AAA: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0AAB: 67       ASR   A                  (0436)     asr   A
0AAC: 67       ASR   A                  (0437)     asr   A
0AAD: 67       ASR   A                  (0438)     asr   A
0AAE: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
0AB0: 90 09    CALL  0x0ABB             (0440)     call  LCD_1_WCNTL_Nibble           ; Write high nibble
0AB2: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
0AB3: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0AB5: 40       NOP                      (0443)     nop
0AB6: 40       NOP                      (0444)     nop
0AB7: 40       NOP                      (0445)     nop
0AB8: 90 01    CALL  0x0ABB             (0446)     call  LCD_1_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0ABA: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_1_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_1_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0ABB: 08       PUSH  A                  (0477)     push  A
0ABC: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0ABF: 26 01 80 AND   [0x1],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_1_PORT_MASK
0AC2: 51 01    MOV   A,[0x1]            (0480)     mov   A,[Port_2_Data_SHADE]
0AC4: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_1_Port],A                      ; Reset control lines
                                        (0482) 
0AC6: 18       POP   A                  (0483)     pop   A
0AC7: 21 0F    AND   A,0xF              (0484)     and   A,LCD_1_DATA_MASK                      ; Make sure no bogus data in MSN
0AC9: 29 10    OR    A,0x10             (0485)     or    A,LCD_1_E                              ; Bring "E" Enable line high
0ACB: 2A 01    OR    A,[0x1]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0ACD: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_1_Port], A                     ; Write data
0ACF: 53 01    MOV   [0x1],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0AD1: 40       NOP                      (0489)     nop
0AD2: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK)   ; Disable E signal and leave data on bus.
0AD4: 53 01    MOV   [0x1],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0AD6: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_1_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0AD8: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_1_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_1_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0AD9: 08       PUSH  A                  (0523)     push  A
0ADA: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0ADD: 26 01 80 AND   [0x1],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_1_PORT_MASK
0AE0: 2E 01 20 OR    [0x1],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_1_RS                ; Raise RS to signify a Data Write
0AE3: 51 01    MOV   A,[0x1]            (0527)     mov   A,[Port_2_Data_SHADE]
0AE5: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_1_Port],A
                                        (0529) 
0AE7: 18       POP   A                  (0530)     pop   A
0AE8: 21 0F    AND   A,0xF              (0531)     and   A,LCD_1_DATA_MASK                           ; Make sure no bogus data in A[7:4]
0AEA: 29 30    OR    A,0x30             (0532)     or    A,(LCD_1_E | LCD_1_RS)                      ; Bring "E" Enable line high
0AEC: 2A 01    OR    A,[0x1]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0AEE: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_1_Port], A                            ; Write data
0AF0: 53 01    MOV   [0x1],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0AF2: 40       NOP                      (0536)     NOP
0AF3: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK|LCD_1_RS)  ; Disable E signal and leave Data on bus
0AF5: 53 01    MOV   [0x1],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0AF7: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_1_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0AF9: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_1_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_1_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0AFA: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
0AFB: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
0AFE: 26 01 80 AND   [0x1],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_1_PORT_MASK        ; Mask of all LCD bits
0B01: 51 01    MOV   A,[0x1]            (0574)     mov   A,[Port_2_Data_SHADE]
0B03: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_1_Port],A                           ; Zero LCD port bits
                                        (0576) 
0B05: 26 02 F0 AND   [0x2],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_1_DATA_MASK ; Clear out LCD mode bits.
0B08: 51 02    MOV   A,[0x2]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0B0A: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0B0C: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for reading
0B0E: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0B10: 2E 01 40 OR    [0x1],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_1_RW                ; Raise RW to signify Read operation
0B13: 51 01    MOV   A,[0x1]            (0584)     mov   A,[Port_2_Data_SHADE]
0B15: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_1_Port],A
0B17: 40       NOP                      (0586)     NOP
                                        (0587) 
0B18: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0B19: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0B1B: 2E 01 50 OR    [0x1],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_1_CNTL_READ                  ; Raise E to start cycle
0B1E: 51 01    MOV   A,[0x1]            (0593)     mov   A,[Port_2_Data_SHADE]
0B20: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_1_Port],A
                                        (0595) 
0B22: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0B23: 40       NOP                      (0597)     nop
0B24: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_1_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0B26: 08       PUSH  A                  (0610)     push  A
0B27: 26 01 C0 AND   [0x1],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
0B2A: 51 01    MOV   A,[0x1]            (0612)     mov   A,[Port_2_Data_SHADE]
0B2C: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_1_Port],A
                                        (0614) 
0B2E: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0B2F: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0B30: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0B31: 2E 01 50 OR    [0x1],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_1_CNTL_READ                   ; Raise E to start cycle
0B34: 51 01    MOV   A,[0x1]            (0620)     mov   A,[Port_2_Data_SHADE]
0B36: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_1_Port],A
                                        (0622) 
0B38: 40       NOP                      (0623)     nop
0B39: 40       NOP                      (0624)     nop
                                        (0625) 
0B3A: 26 01 C0 AND   [0x1],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
0B3D: 51 01    MOV   A,[0x1]            (0627)     mov   A,[Port_2_Data_SHADE]
0B3F: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_1_Port],A
                                        (0629) 
0B41: 18       POP   A                  (0630)     pop   A
0B42: 21 08    AND   A,0x8              (0631)     and   A,LCD_1_READY_BIT                                       ; Check busy
                                        (0632) 
0B44: A0 04    JZ    0x0B49             (0633)     jz    .UNLOCK
0B46: 79       DEC   X                  (0634)     dec   X
0B47: BF D3    JNZ   0x0B1B             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0B49: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0B4A: 2E 02 7F OR    [0x2],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_1_PORT_WRITE ; Revert Data bit to Write mode
0B4D: 51 02    MOV   A,[0x2]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
0B4F: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0B51: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for writing
0B53: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0B55: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0B56: 7F       RET                      (0646)     ret
0B57: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_1_Start
                                        (0652) ;  FUNCTION NAME: LCD_1_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_1_Start:
                                        (0679) _LCD_1_Start:
                                        (0680)  LCD_1_Init:
                                        (0681) _LCD_1_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0B5A: 26 02 80 AND   [0x2],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
0B5D: 2E 02 7F OR    [0x2],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_1_PORT_WRITE           ; Set LCD port for writing
0B60: 26 03 80 AND   [0x3],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
                                        (0688) 
0B63: 51 02    MOV   A,[0x2]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
0B65: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0B67: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_1_PortMode0],A                                ; Setup LCD Port for writing
0B69: 51 03    MOV   A,[0x3]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0B6B: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_1_PortMode1],A
0B6D: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
0B6F: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0B71: 90 67    CALL  _LCD_1_Delay50uTimes(0697)     call  LCD_1_Delay50uTimes
0B73: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0B75: 90 63    CALL  _LCD_1_Delay50uTimes(0699)     call  LCD_1_Delay50uTimes
                                        (0700) 
0B77: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0B79: 9F 40    CALL  0x0ABB             (0702)     call  LCD_1_WCNTL_Nibble
                                        (0703) 
0B7B: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0B7D: 90 5B    CALL  _LCD_1_Delay50uTimes(0705)     call  LCD_1_Delay50uTimes
                                        (0706) 
0B7F: 50 03    MOV   A,0x3              (0707)     mov   A,03h
0B81: 9F 38    CALL  0x0ABB             (0708)     call  LCD_1_WCNTL_Nibble
                                        (0709) 
0B83: 90 63    CALL  _LCD_1_Delay50u    (0710)     call  LCD_1_Delay50u
0B85: 90 61    CALL  _LCD_1_Delay50u    (0711)     call  LCD_1_Delay50u
0B87: 90 5F    CALL  _LCD_1_Delay50u    (0712)     call  LCD_1_Delay50u
                                        (0713) 
0B89: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0B8B: 9F 2E    CALL  0x0ABB             (0715)     call  LCD_1_WCNTL_Nibble
                                        (0716) 
0B8D: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0B8F: 90 49    CALL  _LCD_1_Delay50uTimes(0718)     call  LCD_1_Delay50uTimes
                                        (0719) 
0B91: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0B93: 9F 26    CALL  0x0ABB             (0721)     call  LCD_1_WCNTL_Nibble
                                        (0722) 
0B95: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0B97: 90 41    CALL  _LCD_1_Delay50uTimes(0724)     call  LCD_1_Delay50uTimes
                                        (0725) 
0B99: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0B9B: 9F 0A    CALL  _LCD_1_Control     (0727)     call  LCD_1_Control
0B9D: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0B9F: 90 39    CALL  _LCD_1_Delay50uTimes(0729)     call  LCD_1_Delay50uTimes
                                        (0730) 
0BA1: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0BA3: 9F 02    CALL  _LCD_1_Control     (0732)     call  LCD_1_Control
0BA5: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0BA7: 90 31    CALL  _LCD_1_Delay50uTimes(0734)     call  LCD_1_Delay50uTimes
                                        (0735) 
0BA9: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0BAB: 9E FA    CALL  _LCD_1_Control     (0737)     call  LCD_1_Control
                                        (0738) 
0BAD: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0BAF: 9E F6    CALL  _LCD_1_Control     (0740)     call  LCD_1_Control
                                        (0741) 
0BB1: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_1_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0BB3: 9E F2    CALL  _LCD_1_Control     (0743)     call  LCD_1_Control
                                        (0744) 
0BB5: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_1_DISP_OFF
0BB7: 9E EE    CALL  _LCD_1_Control     (0746)     call  LCD_1_Control
                                        (0747) 
0BB9: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_1_DISP_ON
0BBB: 9E EA    CALL  _LCD_1_Control     (0749)     call  LCD_1_Control
                                        (0750) 
0BBD: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_1_DISP_INC
0BBF: 9E E6    CALL  _LCD_1_Control     (0752)     call  LCD_1_Control
                                        (0753) 
0BC1: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0BC3: 90 15    CALL  _LCD_1_Delay50uTimes(0755)     call  LCD_1_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0BC5: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_1_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_1_ROW_OFFSET::
                                        (0783)      DB    LCD_1_ROW1_OFFSET, LCD_1_ROW2_OFFSET, LCD_1_ROW3_OFFSET, LCD_1_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_1_Position:
                                        (0788) _LCD_1_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0BCA: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0BCC: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0BCD: FF F7    INDEX LCD_1_ROW_OFFSET   (0792)     index LCD_1_ROW_OFFSET ; Get ROW memory offset from table
0BCF: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0BD0: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0BD2: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0BD3: 9E D2    CALL  _LCD_1_Control     (0797)     call  LCD_1_Control                ; Write control byte
0BD5: 70 3F    AND   F,0x3F             
0BD7: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0BD9: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_1_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_1_Delay50uTimes:
                                        (0825) _LCD_1_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0BDA: 90 0C    CALL  _LCD_1_Delay50u    (0827)     call  LCD_1_Delay50u
0BDC: 78       DEC   A                  (0828)     dec   A
0BDD: BF FC    JNZ   _LCD_1_Delay50uTimes(0829)     jnz   LCD_1_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0BDF: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_1_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_1_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_1_Delay50u:
                                        (0869)  _LCD_1_Delay50u:                      ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0BE8: 08       PUSH  A                  (0871)     push  A
0BE9: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0BEB: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0BED: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0BEF: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0BF1: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0BF3: D0 06    JNC   0x0BFA             (0877)     jnc   .Delay50u_End
0BF5: FF E9    INDEX LCD_1_Delay50u_Table(0878)     index LCD_1_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0BF7: 78       DEC   A                  (0880)     dec   A                              ; [4]
0BF8: BF FE    JNZ   0x0BF7             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0BFA: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0BFB: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_1_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_1_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_1_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_1_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_1_Position               ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_1_WriteData              ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_1_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_1_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_1_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_1_Position               ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_1_WriteData              ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_1_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_1_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_1_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_1_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_1_Control                ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_1_WriteData              ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_1_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_1_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_1_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_1_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_1_Control                ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_1_WriteData              ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_1_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_1_InitVBG:
                                        (1236) _LCD_1_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_1_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_1_Control                ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_1_WriteData              ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_1_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_1_Control                 ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_1_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_1_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_1_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_1_InitBG:
                                        (1317) _LCD_1_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_1_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_1_Control                ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_1_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_1_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_1_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_1_DISP_ON
                                        (1347)     call  LCD_1_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD_1.asm
FILE: lib\adcinc12_1int.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   ADCINC12_1INT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2012/9/21 at 11:56:49
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:
                                        (0008) ;;    Assembler source for interrupt routines the 12 bit Incremential
                                        (0009) ;;    A/D converter.
                                        (0010) ;;-----------------------------------------------------------------------------
                                        (0011) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0012) ;;*****************************************************************************
                                        (0013) ;;*****************************************************************************
                                        (0014) 
                                        (0015) include "ADCINC12_1.inc"
                                        (0016) include "m8c.inc"
                                        (0017) include "memory.inc"
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) export _ADCINC12_1_CNT_ISR
                                        (0023) export _ADCINC12_1_TMR_ISR
                                        (0024) export  ADCINC12_1_cTimerU
                                        (0025) export  ADCINC12_1_cCounterU
                                        (0026) export _ADCINC12_1_iIncr
                                        (0027) export  ADCINC12_1_iIncr
                                        (0028) export _ADCINC12_1_fIncr
                                        (0029) export  ADCINC12_1_fIncr
                                        (0030) export  ADCINC12_1_bIncrC
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ; Variable Allocation
                                        (0034) ;-----------------------------------------------
                                        (0035) AREA InterruptRAM (RAM,REL,CON)
                                        (0036)     ADCINC12_1_cTimerU:   BLK  1                 ;The Upper byte of the Timer
                                        (0037)     ADCINC12_1_cCounterU: BLK  1                 ;The Upper byte of the Counter
                                        (0038)    _ADCINC12_1_iIncr:
                                        (0039)     ADCINC12_1_iIncr:     BLK  2                 ;A/D value
                                        (0040)    _ADCINC12_1_fIncr:
                                        (0041)     ADCINC12_1_fIncr:     BLK  1                 ;Data Valid Flag
                                        (0042)     ADCINC12_1_bIncrC:    BLK  1                 ;# of times to run A/D
                                        (0043) 
                                        (0044) 
                                        (0045) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations below this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) 
                                        (0050) ;------------------------
                                        (0051) ; Includes
                                        (0052) ;------------------------
                                        (0053) 
                                        (0054) 	
                                        (0055) ;------------------------
                                        (0056) ;  Constant Definitions
                                        (0057) ;------------------------
                                        (0058) 
                                        (0059) 
                                        (0060) ;------------------------
                                        (0061) ; Variable Allocation
                                        (0062) ;------------------------
                                        (0063) 
                                        (0064) 
                                        (0065) ;---------------------------------------------------
                                        (0066) ; Insert your custom declarations above this banner
                                        (0067) ;---------------------------------------------------
                                        (0068) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0069) 
                                        (0070) 
                                        (0071) AREA UserModules (ROM, REL)
                                        (0072) ;-----------------------------------------------
                                        (0073) ;  EQUATES
                                        (0074) ;-----------------------------------------------
                                        (0075) LowByte:   equ 1
                                        (0076) HighByte:  equ 0
                                        (0077) 
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: _ADCINC12_1_CNT_ISR
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;    Increment the upper (software) half on the counter whenever the
                                        (0083) ;    lower (hardware) half of the counter underflows.
                                        (0084) ;
                                        (0085) ;-----------------------------------------------------------------------------
                                        (0086) ;
                                        (0087) _ADCINC12_1_CNT_ISR:
0BFC: 76 05    INC   [0x5]              (0088)    inc [ADCINC12_1_cCounterU]
                                        (0089)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0090)    ;---------------------------------------------------
                                        (0091)    ; Insert your custom assembly code below this banner
                                        (0092)    ;---------------------------------------------------
                                        (0093)    ;   NOTE: interrupt service routines must preserve
                                        (0094)    ;   the values of the A and X CPU registers.
                                        (0095)    
                                        (0096)    ;---------------------------------------------------
                                        (0097)    ; Insert your custom assembly code above this banner
                                        (0098)    ;---------------------------------------------------
                                        (0099)    
                                        (0100)    ;---------------------------------------------------
                                        (0101)    ; Insert a lcall to a C function below this banner
                                        (0102)    ; and un-comment the lines between these banners
                                        (0103)    ;---------------------------------------------------
                                        (0104)    
                                        (0105)    ;PRESERVE_CPU_CONTEXT
                                        (0106)    ;lcall _My_C_Function
                                        (0107)    ;RESTORE_CPU_CONTEXT
                                        (0108)    
                                        (0109)    ;---------------------------------------------------
                                        (0110)    ; Insert a lcall to a C function above this banner
                                        (0111)    ; and un-comment the lines between these banners
                                        (0112)    ;---------------------------------------------------
                                        (0113)    ;@PSoC_UserCode_END@ (Do not change this line.)
0BFE: 7E       RETI                     (0114)    reti
                                        (0115) 
                                        (0116) ;-----------------------------------------------------------------------------
                                        (0117) ;  FUNCTION NAME: _ADCINC12_1_TMR_ISR
                                        (0118) ;
                                        (0119) ;  DESCRIPTION:
                                        (0120) ;    This routine allows the counter to collect data for 64 timer cycles
                                        (0121) ;    This routine then holds the integrater in reset for one cycle while
                                        (0122) ;    the A/D value is calculated.
                                        (0123) ;
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;
                                        (0126) _ADCINC12_1_TMR_ISR:
0BFF: 7A 04    DEC   [0x4]              (0127)    dec [ADCINC12_1_cTimerU]
                                        (0128) ;  if(upper count >0 )
0C01: A0 02    JZ    0x0C04             (0129)    jz  else1
0C03: 7E       RETI                     (0130)       reti
                                        (0131)    else1:;(upper count decremented to 0)
0C04: 49 87 10 TST   REG[0x87],0x10     (0132)       tst reg[ADCINC12_1_AtoDcr3],10h
0C07: A0 0F    JZ    0x0C17             (0133)       jz   else2
                                        (0134) ;     if(A/D has been in reset mode)
0C09: 40       NOP                      (0135)          nop                                     ; Dummy statement to keep time
                                        (0136)                                              ; between turning on and off counter
                                        (0137)                          ; the same.
0C0A: 62 47 05 MOV   REG[0x47],0x5      (0138)          mov reg[ADCINC12_1_CounterCR0],(ADCINC12_1_fDBLK_ENABLE|ADCINC12_1_fPULSE_WIDE)    ; Enable Counter
0C0D: 41 87 EF AND   REG[0x87],0xEF     (0139)          and reg[ADCINC12_1_AtoDcr3],~10h        ; Enable Analog Integrator
                                        (0140) IF ADCINC12_1_NoAZ
0C10: 41 86 DF AND   REG[0x86],0xDF     (0141)          and reg[ADCINC12_1_AtoDcr2],~20h
                                        (0142) ENDIF
0C13: 55 04 40 MOV   [0x4],0x40         (0143)          mov [ADCINC12_1_cTimerU],(1<<(ADCINC12_1_NUMBITS - 6))
                                        (0144)                                                  ; This will be the real counter value
0C16: 7E       RETI                     (0145)          reti
0C17: 71 10    OR    F,0x10             
                                        (0146)       else2:;(A/D has been in integrate mode)
                                        (0147)          M8C_SetBank1
0C19: 41 45 0F AND   REG[0x45],0xF      (0148)          and reg[ADCINC12_1_CounterSL], 0x0F     ; Disable input to counter
0C1C: 70 EF    AND   F,0xEF             
                                        (0149)          M8C_SetBank0
                                        (0150) 
0C1E: 71 01    OR    F,0x1              (0151)          or  F,01h                               ;Enable the interrupts
                                        (0152)          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0153)          ; Good place to add code to switch inputs for multiplexed input to ADC
                                        (0154)          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0155)          ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0156)          ;---------------------------------------------------
                                        (0157)          ; Insert your custom assembly code below this banner
                                        (0158)          ;---------------------------------------------------
                                        (0159)          ;   NOTE: interrupt service routines must preserve
                                        (0160)          ;   the values of the A and X CPU registers.
                                        (0161)          
                                        (0162)          ;---------------------------------------------------
                                        (0163)          ; Insert your custom assembly code above this banner
                                        (0164)          ;---------------------------------------------------
                                        (0165)          
                                        (0166)          ;---------------------------------------------------
                                        (0167)          ; Insert a lcall to a C function below this banner
                                        (0168)          ; and un-comment the lines between these banners
                                        (0169)          ;---------------------------------------------------
                                        (0170)          
                                        (0171)          ;PRESERVE_CPU_CONTEXT
                                        (0172)          ;lcall _My_C_Function
                                        (0173)          ;RESTORE_CPU_CONTEXT
                                        (0174)          
                                        (0175)          ;---------------------------------------------------
                                        (0176)          ; Insert a lcall to a C function above this banner
                                        (0177)          ; and un-comment the lines between these banners
                                        (0178)          ;---------------------------------------------------
                                        (0179)          ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0180) 
                                        (0181) IF ADCINC12_1_NoAZ
0C20: 43 86 20 OR    REG[0x86],0x20     (0182)          or  reg[ADCINC12_1_AtoDcr2],20h         ;Reset Integrator
                                        (0183) ENDIF
0C23: 43 87 10 OR    REG[0x87],0x10     (0184)          or  reg[ADCINC12_1_AtoDcr3],10h
0C26: 08       PUSH  A                  (0185)          push A
0C27: 5D 44    MOV   A,REG[0x44]        (0186)          mov A, reg[ADCINC12_1_CounterDR0]       ;read Counter
0C29: 5D 46    MOV   A,REG[0x46]        (0187)          mov A, reg[ADCINC12_1_CounterDR2]       ;now you really read the data
                                        (0188) 
0C2B: 62 47 00 MOV   REG[0x47],0x0      (0189)          mov reg[ADCINC12_1_CounterCR0],00h      ;disable counter
0C2E: 71 10    OR    F,0x10             
                                        (0190)      M8C_SetBank1
0C30: 43 45 50 OR    REG[0x45],0x50     (0191)          or  reg[ADCINC12_1_CounterSL],ADCINC12_1_CNTINPUT  ; Reconnect counter to comparitor
0C33: 70 EF    AND   F,0xEF             
                                        (0192)      M8C_SetBank0
                                        (0193) 
                                        (0194) 
0C35: 73       CPL   A                  (0195)          cpl A
0C36: 3C 05 20 CMP   [0x5],0x20         (0196)          cmp [ADCINC12_1_cCounterU],(1<<(ADCINC12_1_NUMBITS - 7))
0C39: B0 05    JNZ   0x0C3F             (0197)          jnz endif10
                                        (0198) ;        if(max positive value)
0C3B: 7A 05    DEC   [0x5]              (0199)             dec [ADCINC12_1_cCounterU]
0C3D: 50 FF    MOV   A,0xFF             (0200)             mov A,ffh
                                        (0201)          endif10:
0C3F: 68 05    ASR   [0x5]              (0202)          asr [ADCINC12_1_cCounterU]              ; divide by 4
0C41: 6D       RRC   A                  (0203)          rrc A
0C42: 68 05    ASR   [0x5]              (0204)          asr [ADCINC12_1_cCounterU]
0C44: 6D       RRC   A                  (0205)          rrc A
                                        (0206) ;
0C45: 5F 06 05 MOV   [0x6],[0x5]        (0207)          mov [(ADCINC12_1_iIncr + HighByte)],[ADCINC12_1_cCounterU]
0C48: 53 07    MOV   [0x7],A            (0208)          mov [(ADCINC12_1_iIncr + LowByte)],A
0C4A: 55 08 01 MOV   [0x8],0x1          (0209)          mov [ADCINC12_1_fIncr],01h              ;Set AD data flag
0C4D: 18       POP   A                  (0210)          pop A
                                        (0211)          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0212)          ; User code here for interrupt system.
                                        (0213)          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0214) 
                                        (0215)          ;@PSoC_UserCode_BODY_3@ (Do not change this line.)
                                        (0216)          ;---------------------------------------------------
                                        (0217)          ; Insert your custom assembly code below this banner
                                        (0218)          ;---------------------------------------------------
                                        (0219)          ;   NOTE: interrupt service routines must preserve
                                        (0220)          ;   the values of the A and X CPU registers.
                                        (0221)          
                                        (0222)          ;---------------------------------------------------
                                        (0223)          ; Insert your custom assembly code above this banner
                                        (0224)          ;---------------------------------------------------
                                        (0225)          
                                        (0226)          ;---------------------------------------------------
                                        (0227)          ; Insert a lcall to a C function below this banner
                                        (0228)          ; and un-comment the lines between these banners
                                        (0229)          ;---------------------------------------------------
                                        (0230)          
                                        (0231)          ;PRESERVE_CPU_CONTEXT
                                        (0232)          ;lcall _My_C_Function
                                        (0233)          ;RESTORE_CPU_CONTEXT
                                        (0234)          
                                        (0235)          ;---------------------------------------------------
                                        (0236)          ; Insert a lcall to a C function above this banner
                                        (0237)          ; and un-comment the lines between these banners
                                        (0238)          ;---------------------------------------------------
                                        (0239)          ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0240) 
0C4E: 3C 09 00 CMP   [0x9],0x0          (0241)          cmp [ADCINC12_1_bIncrC],00h
0C51: A0 17    JZ    0x0C69             (0242)          jz  endif3
                                        (0243) ;        if(ADCINC12_1_bIncrC is not zero)
0C53: 7A 09    DEC   [0x9]              (0244)             dec [ADCINC12_1_bIncrC]
0C55: B0 13    JNZ   0x0C69             (0245)             jnz endif4
                                        (0246) ;           if(ADCINC12_1_bIncrC has decremented down to zero to 0)
0C57: 62 43 00 MOV   REG[0x43],0x0      (0247)                mov reg[ADCINC12_1_TimerCR0],00h      ;disable the Timer
0C5A: 62 47 00 MOV   REG[0x47],0x0      (0248)                mov reg[ADCINC12_1_CounterCR0],00h    ;disable the Counter
0C5D: 40       NOP                      (0249)                nop
0C5E: 40       NOP                      (0250)                nop
0C5F: 41 E1 FC AND   REG[0xE1],0xFC     (0251)                and reg[INT_MSK1],~(ADCINC12_1_TimerMask | ADCINC12_1_CounterMask)
                                        (0252)                                                            ;Disable both interrupts
                                        (0253) IF ADCINC12_1_NoAZ
0C62: 43 86 20 OR    REG[0x86],0x20     (0254)                or  reg[ADCINC12_1_AtoDcr2],20h       ;Reset Integrator
                                        (0255) ENDIF
0C65: 43 87 10 OR    REG[0x87],0x10     (0256)                or  reg[ADCINC12_1_AtoDcr3],10h
0C68: 7E       RETI                     (0257)                reti
                                        (0258)             endif4:;
                                        (0259)          endif3:;
                                        (0260)       endif2:;
0C69: 55 04 01 MOV   [0x4],0x1          (0261)       mov [ADCINC12_1_cTimerU],1                     ;Set Timer for one cycle of reset
0C6C: 55 05 E0 MOV   [0x5],0xE0         (0262)       mov [ADCINC12_1_cCounterU],(-(1<<(ADCINC12_1_NUMBITS - 7)))  ;Set Counter hardware for easy enable
0C6F: 62 45 FF MOV   REG[0x45],0xFF     (0263)       mov reg[ADCINC12_1_CounterDR1],ffh
0C72: 7E       RETI                     (0264)       reti
                                        (0265)    endif1:;
                                        (0266) 
                                        (0267) ; end of file ADCINC12_1INT.asm
FILE: lib\adcinc12_1.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   ADCINC12_1.asm
                                        (0004) ;;  Version: 5.3, Updated on 2012/9/21 at 11:56:49
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: ADCINC12 12 bit incremental A/D converter User Module
                                        (0008) ;;               software implementation file.
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.        
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "ADCINC12_1.inc"
                                        (0024) include "m8c.inc"
                                        (0025) include "memory.inc"
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  ADCINC12_1_Start
                                        (0031) export _ADCINC12_1_Start
                                        (0032) export  ADCINC12_1_SetPower
                                        (0033) export _ADCINC12_1_SetPower
                                        (0034) export  ADCINC12_1_Stop
                                        (0035) export _ADCINC12_1_Stop
                                        (0036) export  ADCINC12_1_GetSamples
                                        (0037) export _ADCINC12_1_GetSamples
                                        (0038) export  ADCINC12_1_StopAD
                                        (0039) export _ADCINC12_1_StopAD
                                        (0040) export  ADCINC12_1_fIsData
                                        (0041) export _ADCINC12_1_fIsData
                                        (0042) export  ADCINC12_1_fIsDataAvailable
                                        (0043) export _ADCINC12_1_fIsDataAvailable
                                        (0044) export  ADCINC12_1_iGetData
                                        (0045) export _ADCINC12_1_iGetData
                                        (0046) export  ADCINC12_1_ClearFlag
                                        (0047) export _ADCINC12_1_ClearFlag
                                        (0048) 
                                        (0049) ;-----------------------------------------------
                                        (0050) ;  EQUATES
                                        (0051) ;-----------------------------------------------
                                        (0052) LowByte:   equ 1
                                        (0053) HighByte:  equ 0
                                        (0054) 
                                        (0055) AREA UserModules (ROM, REL)
                                        (0056) .SECTION
                                        (0057) ;-----------------------------------------------------------------------------
                                        (0058) ;  FUNCTION NAME: ADCINC12_1_Start
                                        (0059) ;  FUNCTION NAME: ADCINC12_1_SetPower
                                        (0060) ;
                                        (0061) ;  DESCRIPTION:
                                        (0062) ;     Applies power setting to the module's analog PSoC block.
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:
                                        (0067) ;    A  contains the power setting
                                        (0068) ;
                                        (0069) ;  RETURNS: none
                                        (0070) ;
                                        (0071) ;  SIDE EFFECTS:
                                        (0072) ;    The A and X registers may be modified by this or future implementations
                                        (0073) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0074) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0075) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0076) ;    functions.
                                        (0077) ;
                                        (0078)  ADCINC12_1_Start:
                                        (0079) _ADCINC12_1_Start:
                                        (0080)  ADCINC12_1_SetPower:
                                        (0081) _ADCINC12_1_SetPower:
                                        (0082)    RAM_PROLOGUE RAM_USE_CLASS_2
0C73: 10       PUSH  X                  (0083)    push X                              ;save X
0C74: 4F       MOV   X,SP               (0084)    mov  X,SP                           ;X will point at next pushed value
0C75: 21 03    AND   A,0x3              (0085)    and  A,03h
0C77: 08       PUSH  A                  (0086)    push A                              ;X points at copy of A
0C78: 5D 87    MOV   A,REG[0x87]        (0087)    mov  A,reg[ADCINC12_1_AtoDcr3]
0C7A: 21 FC    AND   A,0xFC             (0088)    and  A,~03h                         ;clear power bits
0C7C: 2B 00    OR    A,[X+0]            (0089)    or   A,[ X ]
0C7E: 60 87    MOV   REG[0x87],A        (0090)    mov  reg[ADCINC12_1_AtoDcr3],A
0C80: 18       POP   A                  (0091)    pop  A
0C81: 20       POP   X                  (0092)    pop  X
0C82: 70 3F    AND   F,0x3F             
0C84: 71 C0    OR    F,0xC0             
                                        (0093)    RAM_EPILOGUE RAM_USE_CLASS_2
0C86: 7F       RET                      (0094)    ret
                                        (0095) .ENDSECTION
                                        (0096) 
                                        (0097) .SECTION
                                        (0098) ;-----------------------------------------------------------------------------
                                        (0099) ;  FUNCTION NAME: ADCINC12_1_Stop
                                        (0100) ;
                                        (0101) ;  DESCRIPTION:
                                        (0102) ;    Removes power from the module's analog PSoC Block
                                        (0103) ;
                                        (0104) ;-----------------------------------------------------------------------------
                                        (0105) ;
                                        (0106) ;  ARGUMENTS: none
                                        (0107) ;
                                        (0108) ;  RETURNS: none
                                        (0109) ;
                                        (0110) ;  SIDE EFFECTS:
                                        (0111) ;    The A and X registers may be modified by this or future implementations
                                        (0112) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0113) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0114) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0115) ;    functions.
                                        (0116) ;
                                        (0117)  ADCINC12_1_Stop:
                                        (0118) _ADCINC12_1_Stop:
                                        (0119)    RAM_PROLOGUE RAM_USE_CLASS_1
0C87: 41 87 FC AND   REG[0x87],0xFC     (0120)    and reg[ADCINC12_1_AtoDcr3], ~03h
                                        (0121)    RAM_EPILOGUE RAM_USE_CLASS_1
0C8A: 7F       RET                      (0122)    ret
0C8B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0123) .ENDSECTION
                                        (0124) 
                                        (0125) .SECTION
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;  FUNCTION NAME: ADCINC12_1_Get_Samples
                                        (0128) ;
                                        (0129) ;  DESCRIPTION:
                                        (0130) ;    Starts the A/D convertor and will place data is memory.  A flag
                                        (0131) ;    is set whenever a new data value is available.
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS:
                                        (0136) ;    A  passes the number of samples to be taken.  (0 is continous)
                                        (0137) ;
                                        (0138) ;  RETURNS:
                                        (0139) ;
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;          
                                        (0147) ;    Currently only the page pointer registers listed below are modified: 
                                        (0148) ;          CUR_PP
                                        (0149) ;
                                        (0150)  ADCINC12_1_GetSamples:
                                        (0151) _ADCINC12_1_GetSamples:
                                        (0152)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0153)    RAM_SETPAGE_CUR >ADCINC12_1_bIncrC
0C8E: 53 09    MOV   [0x9],A            (0154)    mov [ADCINC12_1_bIncrC],A                     ;number of samples
0C90: 43 DF 01 OR    REG[0xDF],0x1      (0155)    or  reg[ADCINC12_1_TimerIntReg],ADCINC12_1_TimerMask
0C93: 43 DF 02 OR    REG[0xDF],0x2      (0156)    or  reg[ADCINC12_1_CounterIntReg], ADCINC12_1_CounterMask
                                        (0157)                                                  ;Enable both interrupts
0C96: 55 04 01 MOV   [0x4],0x1          (0158)    mov [ADCINC12_1_cTimerU],1                    ;Force the Timer to do one cycle of rest
                                        (0159) IF ADCINC12_1_NoAZ
0C99: 43 86 20 OR    REG[0x86],0x20     (0160)    or  reg[ADCINC12_1_AtoDcr2],20h               ;force the Integrator into reset
                                        (0161) ENDIF
0C9C: 43 87 10 OR    REG[0x87],0x10     (0162)    or  reg[ADCINC12_1_AtoDcr3],10h
0C9F: 55 05 E0 MOV   [0x5],0xE0         (0163)    mov [ADCINC12_1_cCounterU],(-(1<<(ADCINC12_1_NUMBITS - 7)));Initialize Counter
0CA2: 62 41 FF MOV   REG[0x41],0xFF     (0164)    mov reg[ADCINC12_1_TimerDR1],ffh
0CA5: 62 45 FF MOV   REG[0x45],0xFF     (0165)    mov reg[ADCINC12_1_CounterDR1],ffh
0CA8: 62 43 01 MOV   REG[0x43],0x1      (0166)    mov reg[ADCINC12_1_TimerCR0],01h              ;enable the Timer
0CAB: 55 08 00 MOV   [0x8],0x0          (0167)    mov [ADCINC12_1_fIncr],00h                    ;A/D Data Ready Flag is reset
                                        (0168)    RAM_EPILOGUE RAM_USE_CLASS_4
0CAE: 7F       RET                      (0169)    ret
0CAF: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0170) .ENDSECTION
                                        (0171) 
                                        (0172) .SECTION
                                        (0173) ;-----------------------------------------------------------------------------
                                        (0174) ;  FUNCTION NAME: ADCINC12_1_StopAD
                                        (0175) ;
                                        (0176) ;  DESCRIPTION:
                                        (0177) ;    Completely shuts down the A/D is an orderly manner.  Both the
                                        (0178) ;    Timer and COunter interrupts are disabled.
                                        (0179) ;
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;
                                        (0182) ;  ARGUMENTS:  none
                                        (0183) ;
                                        (0184) ;  RETURNS:  none
                                        (0185) ;
                                        (0186) ;  SIDE EFFECTS:
                                        (0187) ;    The A and X registers may be modified by this or future implementations
                                        (0188) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0189) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0190) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0191) ;    functions.
                                        (0192) ;          
                                        (0193) ;    Currently only the page pointer registers listed below are modified: 
                                        (0194) ;          CUR_PP
                                        (0195) ;
                                        (0196)  ADCINC12_1_StopAD:
                                        (0197) _ADCINC12_1_StopAD:
                                        (0198)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0199)    RAM_SETPAGE_CUR >ADCINC12_1_bIncrC   
0CB2: 62 43 00 MOV   REG[0x43],0x0      (0200)    mov reg[ADCINC12_1_TimerCR0],00h              ;disable the Timer
0CB5: 62 47 00 MOV   REG[0x47],0x0      (0201)    mov reg[ADCINC12_1_CounterCR0],00h            ;disable the Counter
0CB8: 40       NOP                      (0202)    nop
0CB9: 40       NOP                      (0203)    nop
0CBA: 41 DF FE AND   REG[0xDF],0xFE     
0CBD: 41 DF FD AND   REG[0xDF],0xFD     
                                        (0204)    ;Disable both interrupts
                                        (0205)    M8C_DisableIntMask ADCINC12_1_TimerIntReg, ADCINC12_1_TimerMask 
                                        (0206)    M8C_DisableIntMask ADCINC12_1_CounterIntReg, ADCINC12_1_CounterMask 
                                        (0207) IF ADCINC12_1_NoAZ
0CC0: 43 86 20 OR    REG[0x86],0x20     (0208)    or  reg[ADCINC12_1_AtoDcr2],20h               ;reset Integrator
                                        (0209) ENDIF
0CC3: 43 87 10 OR    REG[0x87],0x10     (0210)    or  reg[ADCINC12_1_AtoDcr3],10h
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_4
0CC6: 7F       RET                      (0212)    ret
0CC7: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: ADCINC12_1_fIsDataAvailable
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;    This function returns a non-zero value when the ADC conversion
                                        (0221) ;    is complete.
                                        (0222) ;
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS: none
                                        (0226) ;
                                        (0227) ;  RETURNS:
                                        (0228) ;    A returns conversion status  A  = 0, conversion not complete
                                        (0229) ;                                 A != 0, Data available
                                        (0230) ;
                                        (0231) ;  SIDE EFFECTS:
                                        (0232) ;    The A and X registers may be modified by this or future implementations
                                        (0233) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0234) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0235) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0236) ;    functions.
                                        (0237) ;          
                                        (0238) ;    Currently only the page pointer registers listed below are modified: 
                                        (0239) ;          CUR_PP
                                        (0240) ;
                                        (0241)  ADCINC12_1_fIsData:
                                        (0242) _ADCINC12_1_fIsData:
                                        (0243)  ADCINC12_1_fIsDataAvailable:
                                        (0244) _ADCINC12_1_fIsDataAvailable:
                                        (0245)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0246)    RAM_SETPAGE_CUR >ADCINC12_1_bIncrC   
0CCA: 51 08    MOV   A,[0x8]            (0247)    mov A,[ADCINC12_1_fIncr]
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_4
0CCC: 7F       RET                      (0249)    ret
0CCD: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0250) .ENDSECTION
                                        (0251) 
                                        (0252) .SECTION
                                        (0253) ;-----------------------------------------------------------------------------
                                        (0254) ;  FUNCTION NAME: ADCINC12_1_iGetData
                                        (0255) ;
                                        (0256) ;  DESCRIPTION:
                                        (0257) ;    Returns the data from the A/D.  Does not check if data is available.
                                        (0258) ;    Is set whenever a new data value is available.
                                        (0259) ;
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS: none
                                        (0263) ;
                                        (0264) ;  RETURNS:
                                        (0265) ;    Returns 16 bit ADC result  X contains MSB
                                        (0266) ;                               A contains LSB
                                        (0267) ;
                                        (0268) ;  SIDE EFFECTS:
                                        (0269) ;    The A and X registers may be modified by this or future implementations
                                        (0270) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0271) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0272) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0273) ;    functions.
                                        (0274) ;          
                                        (0275) ;    Currently only the page pointer registers listed below are modified: 
                                        (0276) ;          CUR_PP
                                        (0277) ;
                                        (0278)  ADCINC12_1_iGetData:
                                        (0279) _ADCINC12_1_iGetData:
                                        (0280)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0281)    RAM_SETPAGE_CUR >ADCINC12_1_bIncrC   
0CD0: 58 06    MOV   X,[0x6]            (0282)    mov X,[(ADCINC12_1_iIncr + HighByte)]
0CD2: 51 07    MOV   A,[0x7]            (0283)    mov A,[(ADCINC12_1_iIncr + LowByte)]
                                        (0284)    RAM_EPILOGUE RAM_USE_CLASS_4
0CD4: 7F       RET                      (0285)    ret
0CD5: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0286) .ENDSECTION
                                        (0287) 
                                        (0288) .SECTION
                                        (0289) ;-----------------------------------------------------------------------------
                                        (0290) ;  FUNCTION NAME: ADCINC12_1_ClearFlag
                                        (0291) ;
                                        (0292) ;  DESCRIPTION:
                                        (0293) ;    Clears data ready flag.
                                        (0294) ;
                                        (0295) ;-----------------------------------------------------------------------------
                                        (0296) ;
                                        (0297) ;  ARGUMENTS: none
                                        (0298) ;
                                        (0299) ;  RETURNS:  none
                                        (0300) ;
                                        (0301) ;  SIDE EFFECTS:
                                        (0302) ;    The A and X registers may be modified by this or future implementations
                                        (0303) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;    functions.
                                        (0307) ;          
                                        (0308) ;    Currently only the page pointer registers listed below are modified: 
                                        (0309) ;          CUR_PP
                                        (0310) ;
                                        (0311)  ADCINC12_1_ClearFlag:
                                        (0312) _ADCINC12_1_ClearFlag:
                                        (0313)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0314)    RAM_SETPAGE_CUR >ADCINC12_1_bIncrC   
0CD8: 55 08 00 MOV   [0x8],0x0          (0315)    mov [ADCINC12_1_fIncr],00h
                                        (0316)    RAM_EPILOGUE RAM_USE_CLASS_4
0CDB: 7F       RET                      (0317)    ret
                                        (0318) .ENDSECTION
                                        (0319) 
                                        (0320) ; End of File ADCINC12_1.asm
FILE: .\accuracymode.asm                (0001) 
                                        (0002) include "m8c.inc"       ; part specific constants and macros
                                        (0003) include "memory.inc"    ; Constants & macros for SMM/LMM and Compiler
                                        (0004) include "PSoCAPI.inc"   ; PSoC API definitions for all User Modules
                                        (0005) 
                                        (0006) export accuracyModeStart
                                        (0007) 
                                        (0008) area text(ROM)
                                        (0009) 
                                        (0010) .SECTION
                                        (0011) accuracyModeStart:
0CDC: 50 00    MOV   A,0x0              (0012) 	mov   A, 0                    ; row
0CDE: 57 00    MOV   X,0x0              (0013)    	mov   X, 0                    ; column
0CE0: 7C 0B CA LCALL _LCD_1_Position    (0014)    	lcall LCD_1_Position
0CE3: 50 01    MOV   A,0x1              (0015)    	mov   A, >sRomString5
0CE5: 57 B9    MOV   X,0xB9             (0016)    	mov   X, <sRomString5
0CE7: 7C 0A 45 LCALL _LCD_1_PrCString   (0017)    	lcall LCD_1_PrCString         ; Display string	
                                        (0018) 	
0CEA: 3C 10 01 CMP   [modeSwitch],0x1   (0019) 	cmp [modeSwitch],0x01
0CED: A0 9A    JZ    0x0D88             (0020) 	jz accuracyModeEnd
                                        (0021) 
0CEF: 3C 0F 00 CMP   [watchSwitch],0x0  (0022) 	cmp [watchSwitch],0x00
0CF2: A0 06    JZ    0x0CF9             (0023) 	jz accuracy1
                                        (0024) 
0CF4: 3C 0F 02 CMP   [watchSwitch],0x2  (0025) 	cmp [watchSwitch],0x02
0CF7: AF E4    JZ    __UserModules_end|accuracyModeStart|__text_start(0026) 	jz accuracyModeStart
                                        (0027) 	
                                        (0028) accuracy1:
0CF9: 55 12 01 MOV   [accuracy],0x1     (0029) 	mov [accuracy], 0x01
                                        (0030) 	
0CFC: 50 00    MOV   A,0x0              (0031) 	mov   A, 0                    ; row
0CFE: 57 00    MOV   X,0x0              (0032)    	mov   X, 0                    ; column
0D00: 7C 0B CA LCALL _LCD_1_Position    (0033)    	lcall LCD_1_Position
0D03: 50 02    MOV   A,0x2              (0034)    	mov   A, >sRomString18
0D05: 57 89    MOV   X,0x89             (0035)    	mov   X, <sRomString18
0D07: 7C 0A 45 LCALL _LCD_1_PrCString   (0036)    	lcall LCD_1_PrCString         ; Display string
0D0A: 50 01    MOV   A,0x1              (0037) 	mov   A, 1                    ; row
0D0C: 57 00    MOV   X,0x0              (0038)    	mov   X, 0                    ; column
0D0E: 7C 0B CA LCALL _LCD_1_Position    (0039)    	lcall LCD_1_Position
0D11: 50 01    MOV   A,0x1              (0040)    	mov   A, >sRomString6
0D13: 57 C9    MOV   X,0xC9             (0041)    	mov   X, <sRomString6
0D15: 7C 0A 45 LCALL _LCD_1_PrCString   (0042)    	lcall LCD_1_PrCString         ; Display string
                                        (0043) 	
0D18: 3C 10 01 CMP   [modeSwitch],0x1   (0044) 	cmp [modeSwitch],0x01
0D1B: A0 6C    JZ    0x0D88             (0045) 	jz accuracyModeEnd
                                        (0046) 	
0D1D: 3C 0F 01 CMP   [watchSwitch],0x1  (0047) 	cmp [watchSwitch],0x01
0D20: A0 06    JZ    0x0D27             (0048) 	jz accuracy2
                                        (0049) 	
0D22: 3C 0F 00 CMP   [watchSwitch],0x0  (0050) 	cmp [watchSwitch],0x00
0D25: AF D3    JZ    0x0CF9             (0051) 	jz accuracy1
                                        (0052) 	
                                        (0053) 		
                                        (0054) accuracy2:
0D27: 55 12 02 MOV   [accuracy],0x2     (0055) 	mov [accuracy], 0x02
                                        (0056) 	
0D2A: 50 00    MOV   A,0x0              (0057) 	mov   A, 0                    ; row
0D2C: 57 00    MOV   X,0x0              (0058)    	mov   X, 0                    ; column
0D2E: 7C 0B CA LCALL _LCD_1_Position    (0059)    	lcall LCD_1_Position
0D31: 50 02    MOV   A,0x2              (0060)    	mov   A, >sRomString18
0D33: 57 89    MOV   X,0x89             (0061)    	mov   X, <sRomString18
0D35: 7C 0A 45 LCALL _LCD_1_PrCString   (0062)    	lcall LCD_1_PrCString         ; Display string
0D38: 50 01    MOV   A,0x1              (0063) 	mov   A, 1                    ; row
0D3A: 57 00    MOV   X,0x0              (0064)    	mov   X, 0                    ; column
0D3C: 7C 0B CA LCALL _LCD_1_Position    (0065)    	lcall LCD_1_Position
0D3F: 50 01    MOV   A,0x1              (0066)    	mov   A, >sRomString7
0D41: 57 D9    MOV   X,0xD9             (0067)    	mov   X, <sRomString7
0D43: 7C 0A 45 LCALL _LCD_1_PrCString   (0068)    	lcall LCD_1_PrCString         ; Display string
                                        (0069) 	
0D46: 3C 10 01 CMP   [modeSwitch],0x1   (0070) 	cmp [modeSwitch],0x01
0D49: A0 3E    JZ    0x0D88             (0071) 	jz accuracyModeEnd
                                        (0072) 	
0D4B: 3C 0F 00 CMP   [watchSwitch],0x0  (0073) 	cmp [watchSwitch],0x00
0D4E: A0 06    JZ    0x0D55             (0074) 	jz accuracy3
                                        (0075) 	
0D50: 3C 0F 01 CMP   [watchSwitch],0x1  (0076) 	cmp [watchSwitch],0x01
0D53: AF D3    JZ    0x0D27             (0077) 	jz accuracy2
                                        (0078) 	
                                        (0079) 	
                                        (0080) accuracy3:
0D55: 55 12 04 MOV   [accuracy],0x4     (0081) 	mov [accuracy], 0x04
                                        (0082) 	
0D58: 50 00    MOV   A,0x0              (0083) 	mov   A, 0                    ; row
0D5A: 57 00    MOV   X,0x0              (0084)    	mov   X, 0                    ; column
0D5C: 7C 0B CA LCALL _LCD_1_Position    (0085)    	lcall LCD_1_Position
0D5F: 50 02    MOV   A,0x2              (0086)    	mov   A, >sRomString18
0D61: 57 89    MOV   X,0x89             (0087)    	mov   X, <sRomString18
0D63: 7C 0A 45 LCALL _LCD_1_PrCString   (0088)    	lcall LCD_1_PrCString         ; Display string
0D66: 50 01    MOV   A,0x1              (0089) 	mov   A, 1                    ; row
0D68: 57 00    MOV   X,0x0              (0090)    	mov   X, 0                    ; column
0D6A: 7C 0B CA LCALL _LCD_1_Position    (0091)    	lcall LCD_1_Position
0D6D: 50 01    MOV   A,0x1              (0092)    	mov   A, >sRomString8
0D6F: 57 E9    MOV   X,0xE9             (0093)    	mov   X, <sRomString8
0D71: 7C 0A 45 LCALL _LCD_1_PrCString   (0094)    	lcall LCD_1_PrCString         ; Display string
                                        (0095) 	
0D74: 3C 10 01 CMP   [modeSwitch],0x1   (0096) 	cmp [modeSwitch],0x01
0D77: A0 10    JZ    0x0D88             (0097) 	jz accuracyModeEnd
                                        (0098) 	
0D79: 3C 0F 01 CMP   [watchSwitch],0x1  (0099) 	cmp [watchSwitch],0x01
0D7C: A0 06    JZ    0x0D83             (0100) 	jz resetBeforeAccuracy1
                                        (0101) 	
0D7E: 3C 0F 00 CMP   [watchSwitch],0x0  (0102) 	cmp [watchSwitch],0x00
0D81: AF D3    JZ    0x0D55             (0103) 	jz accuracy3
                                        (0104) 	
                                        (0105) resetBeforeAccuracy1:
0D83: 55 0F 00 MOV   [watchSwitch],0x0  (0106) 	mov [watchSwitch],0x00
0D86: 8F 72    JMP   0x0CF9             (0107) 	jmp accuracy1
                                        (0108) 		
                                        (0109) accuracyModeEnd:
0D88: 7C 0B 57 LCALL _LCD_1_Start|_LCD_1_Init|LCD_1_Init(0110) 	lcall LCD_1_Init
0D8B: 7F       RET                      (0111) 	ret
                                        (0112) 
                                        (0113) .ENDSECTION
FILE: .\delay.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: delay.asm
                                        (0004) ;;
                                        (0005) ;;  DESCRIPTION: Delay functions implementation file
                                        (0006) ;;
                                        (0007) ;;-----------------------------------------------------------------------------
                                        (0008) ;;  Copyright (c) Cypress MicroSystems 2002-2006. All Rights Reserved.
                                        (0009) ;;*****************************************************************************
                                        (0010) ;;*****************************************************************************
                                        (0011) 
                                        (0012) ;-----------------------------------------------------------------------------
                                        (0013) ;  Include Files
                                        (0014) ;-----------------------------------------------------------------------------
                                        (0015) include "m8c.inc"
                                        (0016) include "memory.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------------------------------------
                                        (0021) export  Delay50uTimes
                                        (0022) export _Delay50uTimes
                                        (0023) 
                                        (0024) export  Delay50u
                                        (0025) export _Delay50u
                                        (0026) 
                                        (0027) export  Delay10msTimes
                                        (0028) export _Delay10msTimes
                                        (0029) 
                                        (0030) 
                                        (0031) area text(rom)
                                        (0032) .SECTION
                                        (0033) ;-----------------------------------------------------------------------------
                                        (0034) ;  FUNCTION NAME: DelaySeconds
                                        (0035) ;
                                        (0036) ;  DESCRIPTION:
                                        (0037) ;     Delay increments of 10mSeconds
                                        (0038) ;
                                        (0039) ;-----------------------------------------------------------------------------
                                        (0040) ;
                                        (0041) ;  ARGUMENTS:
                                        (0042) ;     A contains the delay multiplier
                                        (0043) ;
                                        (0044) ;  RETURNS:
                                        (0045) ;
                                        (0046) ;  SIDE EFFECTS:
                                        (0047) ;    The A and X registers may be modified by this or future implementations
                                        (0048) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0049) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0050) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0051) ;    functions.
                                        (0052) 
                                        (0053) 
                                        (0054)  Delay10msTimes:
                                        (0055) _Delay10msTimes:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_1
0D8C: 08       PUSH  A                  (0057) 	push A
                                        (0058) 
0D8D: 50 C8    MOV   A,0xC8             (0059) 	mov A, 200
                                        (0060) 	DELAY50US:
0D8F: 90 16    CALL  _Delay50u          (0061)     call  Delay50u
0D91: 78       DEC   A                  (0062)     dec   A
0D92: BF FC    JNZ   0x0D8F             (0063)     jnz   DELAY50US
                                        (0064) 
0D94: 18       POP   A                  (0065) 	pop A
0D95: 78       DEC   A                  (0066) 	dec   A
0D96: BF F5    JNZ   _Delay10msTimes    (0067)     jnz   Delay10msTimes
                                        (0068) 
                                        (0069)     RAM_EPILOGUE RAM_USE_CLASS_1
0D98: 7F       RET                      (0070)     ret
                                        (0071) .ENDSECTION
                                        (0072) 
                                        (0073) 
                                        (0074) 
                                        (0075) 
                                        (0076) .SECTION
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  FUNCTION NAME: Delay50uTimes
                                        (0079) ;
                                        (0080) ;  DESCRIPTION:
                                        (0081) ;     Delay increments of 50uSeconds
                                        (0082) ;
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:
                                        (0086) ;     A contains the delay multiplier
                                        (0087) ;
                                        (0088) ;  RETURNS:
                                        (0089) ;
                                        (0090) ;  SIDE EFFECTS:
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097) ;
                                        (0098) 
                                        (0099)  Delay50uTimes:
                                        (0100) _Delay50uTimes:
                                        (0101)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0102) 
0D99: 90 0C    CALL  _Delay50u          (0103)     call  Delay50u
0D9B: 78       DEC   A                  (0104) 	dec A
0D9C: BF FC    JNZ   _Delay50uTimes     (0105)     jnz   Delay50uTimes
                                        (0106) 
                                        (0107) 	
                                        (0108)     RAM_EPILOGUE RAM_USE_CLASS_1
0D9E: 7F       RET                      (0109)     ret
                                        (0110) 
                                        (0111) .ENDSECTION
                                        (0112) 
                                        (0113) ;-----------------------------------------------------------------------------
                                        (0114) ;  FUNCTION NAME: Delay50u
                                        (0115) ;
                                        (0116) ;  DESCRIPTION:
                                        (0117) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0118) ;     Slower clock frequencies the delay will be;
                                        (0119) ;           1.5
                                        (0120) ;        -------------- * 50uSec
                                        (0121) ;        clock_freq(MHz)
                                        (0122) ;
                                        (0123) ;
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;
                                        (0126) ;  ARGUMENTS: none
                                        (0127) ;
                                        (0128) ;  RETURNS: none
                                        (0129) ;
                                        (0130) ;  SIDE EFFECTS:
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137) ;  THEORY of OPERATION or PROCEDURE:
                                        (0138) ;
                                        (0139) .LITERAL
                                        (0140)  Delay50u_Table::
                                        (0141)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0142) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0143) .ENDLITERAL
                                        (0144) .SECTION
                                        (0145) 
                                        (0146)   Delay50u:
                                        (0147)  _Delay50u:                      ; [11]  Call
                                        (0148)     RAM_PROLOGUE RAM_USE_CLASS_1
0DA7: 08       PUSH  A                  (0149)     push  A
0DA8: 71 10    OR    F,0x10             
                                        (0150)     M8C_SetBank1                       ; [4]
0DAA: 5D E0    MOV   A,REG[0xE0]        (0151)     mov   A, reg[OSC_CR0]              ; [6] Get delay value
0DAC: 70 EF    AND   F,0xEF             
                                        (0152)     M8C_SetBank0                       ; [4]
0DAE: 21 07    AND   A,0x7              (0153)     and   A,07h                        ; [4] Mask off only the clock bits
0DB0: 39 05    CMP   A,0x5              (0154)     cmp   A,05h
0DB2: D0 06    JNC   0x0DB9             (0155)     jnc   Delay50u_End
0DB4: FF E9    INDEX Delay50u_Table     (0156)     index Delay50u_Table               ; [13] Get delay value
                                        (0157) Delay50u_Loop:                         ;
0DB6: 78       DEC   A                  (0158)     dec   A                            ; [4]
0DB7: BF FE    JNZ   0x0DB6             (0159)     jnz   Delay50u_Loop                ; [5]
                                        (0160) Delay50u_End:
0DB9: 18       POP   A                  (0161)     pop   A
                                        (0162)     RAM_EPILOGUE RAM_USE_CLASS_1
0DBA: 7F       RET                      (0163)     ret
FILE: .\main.asm
0DBB: 55 0F 00 MOV   [watchSwitch],0x0  
0DBE: 55 10 00 MOV   [modeSwitch],0x0   
0DC1: 55 11 01 MOV   [modeSwitch+1],0x1 
0DC4: 55 12 01 MOV   [accuracy],0x1     
0DC7: 55 13 01 MOV   [historyCounter],0x1
0DCA: 55 0B 00 MOV   [milisec],0x0      
0DCD: 55 0A 00 MOV   [msec],0x0         
0DD0: 55 0C 00 MOV   [sec],0x0          
0DD3: 55 0D 00 MOV   [min],0x0          
0DD6: 55 0E 00 MOV   [hour],0x0         
0DD9: 55 14 00 MOV   [mem_sec1],0x0     
0DDC: 55 15 00 MOV   [mem_min1],0x0     
0DDF: 55 16 00 MOV   [mem_hour1],0x0    
0DE2: 55 17 00 MOV   [mem_sec2],0x0     
0DE5: 55 18 00 MOV   [mem_min2],0x0     
0DE8: 55 19 00 MOV   [mem_hour2],0x0    
0DEB: 55 1A 00 MOV   [mem_sec3],0x0     
0DEE: 55 1B 00 MOV   [mem_min3],0x0     
0DF1: 55 1C 00 MOV   [mem_hour3],0x0    
0DF4: 55 1D 00 MOV   [mem_sec4],0x0     
0DF7: 55 1E 00 MOV   [mem_min4],0x0     
0DFA: 55 1F 00 MOV   [mem_hour4],0x0    
0DFD: 55 20 00 MOV   [mem_sec5],0x0     
0E00: 55 21 00 MOV   [mem_min5],0x0     
0E03: 55 22 00 MOV   [mem_hour5],0x0    
0E06: 55 23 00 MOV   [mem_shortsec],0x0 
0E09: 55 24 00 MOV   [mem_shortmin],0x0 
0E0C: 55 25 00 MOV   [mem_shorthour],0x0
0E0F: 55 26 00 MOV   [mem_longsec],0x0  
0E12: 55 27 00 MOV   [mem_longmin],0x0  
0E15: 55 28 00 MOV   [mem_longhour],0x0 
0E18: 55 29 00 MOV   [mem_avgsec],0x0   
0E1B: 55 2A 00 MOV   [mem_avgmin],0x0   
0E1E: 55 2B 00 MOV   [mem_avghour],0x0  
0E21: 55 2F 15 MOV   [threshold_lsb],0x15
0E24: 55 2E 01 MOV   [threshold_msb],0x1
0E27: 50 02    MOV   A,0x2              
0E29: 7C 09 0D LCALL PGA_1_Start|PGA_1_SetPower|_PGA_1_SetPower|_PGA_1_Start
0E2C: 50 02    MOV   A,0x2              
0E2E: 7C 0C 73 LCALL _ADCINC12_1_SetPower|_ADCINC12_1_Start|ADCINC12_1_Start|ADCINC12_1_SetPower
0E31: 50 00    MOV   A,0x0              
0E33: 7C 0C 8B LCALL _ADCINC12_1_GetSamples
0E36: 7C 0A 0B LCALL LED_1_Stop|LED_1_Off|_LED_1_Start|LED_1_Start|_LED_1_Off|_LED_1_Stop
0E39: 7C 09 CD LCALL LED_2_Stop|_LED_2_Start|LED_2_Off|_LED_2_Off|LED_2_Start|_LED_2_Stop
0E3C: 7C 09 8F LCALL LED_3_Off|_LED_3_Start|_LED_3_Stop|LED_3_Start|_LED_3_Off|LED_3_Stop
0E3F: 7C 09 51 LCALL _LED_4_Off|_LED_4_Stop|LED_4_Off|LED_4_Stop|_LED_4_Start|LED_4_Start
0E42: 7C 0B 57 LCALL _LCD_1_Start|_LCD_1_Init|LCD_1_Init
0E45: 70 EF    AND   F,0xEF             
0E47: 43 05 01 OR    REG[0x5],0x1       
0E4A: 71 01    OR    F,0x1              
0E4C: 43 E0 20 OR    REG[0xE0],0x20     
0E4F: 50 00    MOV   A,0x0              
0E51: 57 00    MOV   X,0x0              
0E53: 7C 0B CA LCALL _LCD_1_Position    
0E56: 50 02    MOV   A,0x2              
0E58: 57 A9    MOV   X,0xA9             
0E5A: 7C 0A 45 LCALL _LCD_1_PrCString   
0E5D: 50 01    MOV   A,0x1              
0E5F: 57 00    MOV   X,0x0              
0E61: 7C 0B CA LCALL _LCD_1_Position    
0E64: 50 02    MOV   A,0x2              
0E66: 57 B9    MOV   X,0xB9             
0E68: 7C 0A 45 LCALL _LCD_1_PrCString   
0E6B: 3C 10 01 CMP   [modeSwitch],0x1   
0E6E: A0 0B    JZ    0x0E7A             
0E70: 3C 0F 01 CMP   [watchSwitch],0x1  
0E73: AF DB    JZ    0x0E4F             
0E75: 3C 0F 00 CMP   [watchSwitch],0x0  
0E78: AF D6    JZ    0x0E4F             
0E7A: 55 10 00 MOV   [modeSwitch],0x0   
0E7D: 3C 11 01 CMP   [modeSwitch+1],0x1 
0E80: A0 15    JZ    0x0E96             
0E82: 3C 11 02 CMP   [modeSwitch+1],0x2 
0E85: A0 21    JZ    0x0EA7             
0E87: 3C 11 03 CMP   [modeSwitch+1],0x3 
0E8A: A0 2D    JZ    0x0EB8             
0E8C: 3C 11 04 CMP   [modeSwitch+1],0x4 
0E8F: A0 39    JZ    0x0EC9             
0E91: 3C 11 05 CMP   [modeSwitch+1],0x5 
0E94: A0 45    JZ    0x0EDA             
0E96: 7C 0A 07 LCALL _LED_1_On          
0E99: 55 11 02 MOV   [modeSwitch+1],0x2 
0E9C: 7C 13 CE LCALL stopWatchModeStart 
0E9F: 55 10 00 MOV   [modeSwitch],0x0   
0EA2: 7C 0A 0B LCALL LED_1_Stop|LED_1_Off|_LED_1_Start|LED_1_Start|_LED_1_Off|_LED_1_Stop
0EA5: 8F D4    JMP   0x0E7A             
0EA7: 7C 09 C9 LCALL _LED_2_On          
0EAA: 55 11 03 MOV   [modeSwitch+1],0x3 
0EAD: 7C 0C DC LCALL __UserModules_end|accuracyModeStart|__text_start
0EB0: 55 10 00 MOV   [modeSwitch],0x0   
0EB3: 7C 09 CD LCALL LED_2_Stop|_LED_2_Start|LED_2_Off|_LED_2_Off|LED_2_Start|_LED_2_Stop
0EB6: 8F C3    JMP   0x0E7A             
0EB8: 7C 09 8B LCALL _LED_3_On          
0EBB: 55 11 04 MOV   [modeSwitch+1],0x4 
0EBE: 7C 0E F1 LCALL displayMemHistory  
0EC1: 55 10 00 MOV   [modeSwitch],0x0   
0EC4: 7C 09 8F LCALL LED_3_Off|_LED_3_Start|_LED_3_Stop|LED_3_Start|_LED_3_Off|LED_3_Stop
0EC7: 8F B2    JMP   0x0E7A             
0EC9: 7C 09 4D LCALL _LED_4_On          
0ECC: 55 11 05 MOV   [modeSwitch+1],0x5 
0ECF: 7C 12 5D LCALL startSoundSensitivityMode
0ED2: 55 10 00 MOV   [modeSwitch],0x0   
0ED5: 7C 09 51 LCALL _LED_4_Off|_LED_4_Stop|LED_4_Off|LED_4_Stop|_LED_4_Start|LED_4_Start
0ED8: 8F A1    JMP   0x0E7A             
0EDA: 7C 0A 07 LCALL _LED_1_On          
0EDD: 7C 09 8B LCALL _LED_3_On          
0EE0: 55 11 00 MOV   [modeSwitch+1],0x0 
0EE3: 7C 13 1E LCALL startSoundWatchMode
0EE6: 55 10 00 MOV   [modeSwitch],0x0   
0EE9: 7C 0A 0B LCALL LED_1_Stop|LED_1_Off|_LED_1_Start|LED_1_Start|_LED_1_Off|_LED_1_Stop
0EEC: 7C 09 8F LCALL LED_3_Off|_LED_3_Start|_LED_3_Stop|LED_3_Start|_LED_3_Off|LED_3_Stop
0EEF: 8F 8A    JMP   0x0E7A             
FILE: .\memorymode.asm                  (0001) 
                                        (0002) include "m8c.inc"       ; part specific constants and macros
                                        (0003) include "memory.inc"    ; Constants & macros for SMM/LMM and Compiler
                                        (0004) include "PSoCAPI.inc"   ; PSoC API definitions for all User Modules
                                        (0005) 
                                        (0006) export displayMemHistory
                                        (0007) 
                                        (0008) area text(ROM)
                                        (0009) 
                                        (0010) 
                                        (0011) .SECTION
                                        (0012) displayMemHistory:
0EF1: 50 00    MOV   A,0x0              (0013) 	mov   A, 0                    ; row
0EF3: 57 00    MOV   X,0x0              (0014)    	mov   X, 0                    ; column
0EF5: 7C 0B CA LCALL _LCD_1_Position    (0015)    	lcall LCD_1_Position
0EF8: 50 01    MOV   A,0x1              (0016)    	mov   A, >sRomString9
0EFA: 57 F9    MOV   X,0xF9             (0017)    	mov   X, <sRomString9
0EFC: 7C 0A 45 LCALL _LCD_1_PrCString   (0018)    	lcall LCD_1_PrCString         ; Display string
                                        (0019) 	
0EFF: 3C 10 01 CMP   [modeSwitch],0x1   (0020) 	cmp [modeSwitch],0x01
0F02: A3 56    JZ    0x1259             (0021) 	jz endMemoryMode
                                        (0022) 
0F04: 3C 0F 00 CMP   [watchSwitch],0x0  (0023) 	cmp [watchSwitch],0x00
0F07: A0 06    JZ    0x0F0E             (0024) 	jz checkFordisplayHistory1
                                        (0025) 
0F09: 3C 0F 02 CMP   [watchSwitch],0x2  (0026) 	cmp [watchSwitch],0x02
0F0C: AF E4    JZ    displayMemHistory  (0027) 	jz displayMemHistory
                                        (0028) 	
                                        (0029) checkFordisplayHistory1:
0F0E: 3C 14 00 CMP   [mem_sec1],0x0     (0030) 	cmp [mem_sec1],0x00
0F11: B0 1B    JNZ   0x0F2D             (0031) 	jnz displayHistory1
0F13: 3C 15 00 CMP   [mem_min1],0x0     (0032) 	cmp [mem_min1],0x00
0F16: B0 16    JNZ   0x0F2D             (0033) 	jnz displayHistory1
0F18: 3C 16 00 CMP   [mem_hour1],0x0    (0034) 	cmp [mem_hour1],0x00
0F1B: B0 11    JNZ   0x0F2D             (0035) 	jnz displayHistory1
                                        (0036) 
0F1D: 50 01    MOV   A,0x1              (0037) 	mov   A, 1                    ; row
0F1F: 57 00    MOV   X,0x0              (0038)    	mov   X, 0                    ; column
0F21: 7C 0B CA LCALL _LCD_1_Position    (0039)    	lcall LCD_1_Position
0F24: 50 03    MOV   A,0x3              (0040)    	mov   A, >sRomString28
0F26: 57 1F    MOV   X,0x1F             (0041)    	mov   X, <sRomString28
0F28: 7C 0A 45 LCALL _LCD_1_PrCString   (0042)    	lcall LCD_1_PrCString         ; Display string
0F2B: 8F C5    JMP   displayMemHistory  (0043) 	jmp displayMemHistory
                                        (0044) 
                                        (0045) displayHistory1:
0F2D: 50 00    MOV   A,0x0              (0046) 	mov   A, 0                    ; row
0F2F: 57 00    MOV   X,0x0              (0047)    	mov   X, 0                    ; column
0F31: 7C 0B CA LCALL _LCD_1_Position    (0048)    	lcall LCD_1_Position
0F34: 50 02    MOV   A,0x2              (0049)    	mov   A, >sRomString10
0F36: 57 09    MOV   X,0x9              (0050)    	mov   X, <sRomString10
0F38: 7C 0A 45 LCALL _LCD_1_PrCString   (0051)    	lcall LCD_1_PrCString         ; Display string
                                        (0052) 	;   hour
0F3B: 50 01    MOV   A,0x1              (0053)    	mov   A, 1                    ; row
0F3D: 57 00    MOV   X,0x0              (0054)    	mov   X, 0                    ; column
0F3F: 7C 0B CA LCALL _LCD_1_Position    (0055)    	lcall LCD_1_Position          ; display result in hex 
0F42: 51 16    MOV   A,[mem_hour1]      (0056)    	mov A,[mem_hour1]
0F44: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0057)    	lcall LCD_1_PrHexByte
                                        (0058) 	;  :
0F47: 50 01    MOV   A,0x1              (0059) 	mov   A, 1                    ; row
0F49: 57 02    MOV   X,0x2              (0060)    	mov   X, 2                    ; column
0F4B: 7C 0B CA LCALL _LCD_1_Position    (0061)    	lcall LCD_1_Position
0F4E: 50 01    MOV   A,0x1              (0062)    	mov   A, >sRomString2
0F50: 57 B1    MOV   X,0xB1             (0063)    	mov   X, <sRomString2
0F52: 7C 0A 45 LCALL _LCD_1_PrCString   (0064) 	lcall LCD_1_PrCString         ; Display string
                                        (0065) 	;  min
0F55: 50 01    MOV   A,0x1              (0066) 	mov   A, 1                    ; row
0F57: 57 03    MOV   X,0x3              (0067)    	mov   X, 3                    ; column
0F59: 7C 0B CA LCALL _LCD_1_Position    (0068)    	lcall LCD_1_Position          ; display result in hex 
0F5C: 51 15    MOV   A,[mem_min1]       (0069)    	mov A,[mem_min1]
0F5E: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0070)    	lcall LCD_1_PrHexByte
                                        (0071) 	;   :
0F61: 50 01    MOV   A,0x1              (0072) 	mov   A, 1                    ; row
0F63: 57 05    MOV   X,0x5              (0073)    	mov   X, 5                    ; column
0F65: 7C 0B CA LCALL _LCD_1_Position    (0074)    	lcall LCD_1_Position
0F68: 50 01    MOV   A,0x1              (0075)    	mov   A, >sRomString2
0F6A: 57 B1    MOV   X,0xB1             (0076)    	mov   X, <sRomString2
0F6C: 7C 0A 45 LCALL _LCD_1_PrCString   (0077) 	lcall LCD_1_PrCString         ; Display string
                                        (0078) 	;  sec
0F6F: 50 01    MOV   A,0x1              (0079) 	mov   A, 1                    ; row
0F71: 57 06    MOV   X,0x6              (0080)    	mov   X, 6                    ; column
0F73: 7C 0B CA LCALL _LCD_1_Position    (0081)    	lcall LCD_1_Position          ; display result in hex 
0F76: 51 14    MOV   A,[mem_sec1]       (0082)    	mov A,[mem_sec1]
0F78: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0083)    	lcall LCD_1_PrHexByte
                                        (0084) 
0F7B: 3C 10 01 CMP   [modeSwitch],0x1   (0085) 	cmp [modeSwitch],0x01
0F7E: A2 DA    JZ    0x1259             (0086) 	jz endMemoryMode
                                        (0087) 
0F80: 3C 0F 01 CMP   [watchSwitch],0x1  (0088) 	cmp [watchSwitch],0x01
0F83: A0 06    JZ    0x0F8A             (0089) 	jz checkFordisplayHistory2
                                        (0090) 
0F85: 3C 0F 00 CMP   [watchSwitch],0x0  (0091) 	cmp [watchSwitch],0x00
0F88: AF A4    JZ    0x0F2D             (0092) 	jz displayHistory1
                                        (0093) 	
                                        (0094) checkFordisplayHistory2:
0F8A: 3C 17 00 CMP   [mem_sec2],0x0     (0095) 	cmp [mem_sec2],0x00
0F8D: B0 0D    JNZ   0x0F9B             (0096) 	jnz displayHistory2
0F8F: 3C 18 00 CMP   [mem_min2],0x0     (0097) 	cmp [mem_min2],0x00
0F92: B0 08    JNZ   0x0F9B             (0098) 	jnz displayHistory2
0F94: 3C 19 00 CMP   [mem_hour2],0x0    (0099) 	cmp [mem_hour2],0x00
0F97: B0 03    JNZ   0x0F9B             (0100) 	jnz displayHistory2
0F99: 81 A8    JMP   0x1142             (0101) 	jmp displayShortest
                                        (0102) 
                                        (0103) displayHistory2:
0F9B: 50 00    MOV   A,0x0              (0104) 	mov   A, 0                    ; row
0F9D: 57 00    MOV   X,0x0              (0105)    	mov   X, 0                    ; column
0F9F: 7C 0B CA LCALL _LCD_1_Position    (0106)    	lcall LCD_1_Position
0FA2: 50 02    MOV   A,0x2              (0107)    	mov   A, >sRomString11
0FA4: 57 19    MOV   X,0x19             (0108)    	mov   X, <sRomString11
0FA6: 7C 0A 45 LCALL _LCD_1_PrCString   (0109)    	lcall LCD_1_PrCString         ; Display string
                                        (0110) 	;   hour
0FA9: 50 01    MOV   A,0x1              (0111)    	mov   A, 1                    ; row
0FAB: 57 00    MOV   X,0x0              (0112)    	mov   X, 0                    ; column
0FAD: 7C 0B CA LCALL _LCD_1_Position    (0113)    	lcall LCD_1_Position          ; display result in hex 
0FB0: 51 19    MOV   A,[mem_hour2]      (0114)    	mov A,[mem_hour2]
0FB2: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0115)    	lcall LCD_1_PrHexByte
                                        (0116) 	;  :
0FB5: 50 01    MOV   A,0x1              (0117) 	mov   A, 1                    ; row
0FB7: 57 02    MOV   X,0x2              (0118)    	mov   X, 2                    ; column
0FB9: 7C 0B CA LCALL _LCD_1_Position    (0119)    	lcall LCD_1_Position
0FBC: 50 01    MOV   A,0x1              (0120)    	mov   A, >sRomString2
0FBE: 57 B1    MOV   X,0xB1             (0121)    	mov   X, <sRomString2
0FC0: 7C 0A 45 LCALL _LCD_1_PrCString   (0122) 	lcall LCD_1_PrCString         ; Display string
                                        (0123) 	;  min
0FC3: 50 01    MOV   A,0x1              (0124) 	mov   A, 1                    ; row
0FC5: 57 03    MOV   X,0x3              (0125)    	mov   X, 3                    ; column
0FC7: 7C 0B CA LCALL _LCD_1_Position    (0126)    	lcall LCD_1_Position          ; display result in hex 
0FCA: 51 18    MOV   A,[mem_min2]       (0127)    	mov A,[mem_min2]
0FCC: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0128)    	lcall LCD_1_PrHexByte
                                        (0129) 	;   :
0FCF: 50 01    MOV   A,0x1              (0130) 	mov   A, 1                    ; row
0FD1: 57 05    MOV   X,0x5              (0131)    	mov   X, 5                    ; column
0FD3: 7C 0B CA LCALL _LCD_1_Position    (0132)    	lcall LCD_1_Position
0FD6: 50 01    MOV   A,0x1              (0133)    	mov   A, >sRomString2
0FD8: 57 B1    MOV   X,0xB1             (0134)    	mov   X, <sRomString2
0FDA: 7C 0A 45 LCALL _LCD_1_PrCString   (0135) 	lcall LCD_1_PrCString         ; Display string
                                        (0136) 	;  sec
0FDD: 50 01    MOV   A,0x1              (0137) 	mov   A, 1                    ; row
0FDF: 57 06    MOV   X,0x6              (0138)    	mov   X, 6                    ; column
0FE1: 7C 0B CA LCALL _LCD_1_Position    (0139)    	lcall LCD_1_Position          ; display result in hex 
0FE4: 51 17    MOV   A,[mem_sec2]       (0140)    	mov A,[mem_sec2]
0FE6: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0141)    	lcall LCD_1_PrHexByte
                                        (0142) 
0FE9: 3C 10 01 CMP   [modeSwitch],0x1   (0143) 	cmp [modeSwitch],0x01
0FEC: A2 6C    JZ    0x1259             (0144) 	jz endMemoryMode
                                        (0145) 
0FEE: 3C 0F 00 CMP   [watchSwitch],0x0  (0146) 	cmp [watchSwitch],0x00
0FF1: A0 06    JZ    0x0FF8             (0147) 	jz checkFordisplayHistory3
                                        (0148) 	
0FF3: 3C 0F 01 CMP   [watchSwitch],0x1  (0149) 	cmp [watchSwitch],0x01
0FF6: AF A4    JZ    0x0F9B             (0150) 	jz displayHistory2
                                        (0151) 
                                        (0152) checkFordisplayHistory3:
0FF8: 3C 1A 00 CMP   [mem_sec3],0x0     (0153) 	cmp [mem_sec3],0x00
0FFB: B0 0D    JNZ   0x1009             (0154) 	jnz displayHistory3
0FFD: 3C 1B 00 CMP   [mem_min3],0x0     (0155) 	cmp [mem_min3],0x00
1000: B0 08    JNZ   0x1009             (0156) 	jnz displayHistory3
1002: 3C 1C 00 CMP   [mem_hour3],0x0    (0157) 	cmp [mem_hour3],0x00
1005: B0 03    JNZ   0x1009             (0158) 	jnz displayHistory3
1007: 81 3A    JMP   0x1142             (0159) 	jmp displayShortest
                                        (0160) 
                                        (0161) 
                                        (0162) displayHistory3:
1009: 50 00    MOV   A,0x0              (0163) 	mov   A, 0                    ; row
100B: 57 00    MOV   X,0x0              (0164)    	mov   X, 0                    ; column
100D: 7C 0B CA LCALL _LCD_1_Position    (0165)    	lcall LCD_1_Position
1010: 50 02    MOV   A,0x2              (0166)    	mov   A, >sRomString12
1012: 57 29    MOV   X,0x29             (0167)    	mov   X, <sRomString12
1014: 7C 0A 45 LCALL _LCD_1_PrCString   (0168)    	lcall LCD_1_PrCString         ; Display string
                                        (0169) 	;   hour
1017: 50 01    MOV   A,0x1              (0170)    	mov   A, 1                    ; row
1019: 57 00    MOV   X,0x0              (0171)    	mov   X, 0                    ; column
101B: 7C 0B CA LCALL _LCD_1_Position    (0172)    	lcall LCD_1_Position          ; display result in hex 
101E: 51 1C    MOV   A,[mem_hour3]      (0173)    	mov A,[mem_hour3]
1020: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0174)    	lcall LCD_1_PrHexByte
                                        (0175) 	;  :
1023: 50 01    MOV   A,0x1              (0176) 	mov   A, 1                    ; row
1025: 57 02    MOV   X,0x2              (0177)    	mov   X, 2                    ; column
1027: 7C 0B CA LCALL _LCD_1_Position    (0178)    	lcall LCD_1_Position
102A: 50 01    MOV   A,0x1              (0179)    	mov   A, >sRomString2
102C: 57 B1    MOV   X,0xB1             (0180)    	mov   X, <sRomString2
102E: 7C 0A 45 LCALL _LCD_1_PrCString   (0181) 	lcall LCD_1_PrCString         ; Display string
                                        (0182) 	;  min
1031: 50 01    MOV   A,0x1              (0183) 	mov   A, 1                    ; row
1033: 57 03    MOV   X,0x3              (0184)    	mov   X, 3                    ; column
1035: 7C 0B CA LCALL _LCD_1_Position    (0185)    	lcall LCD_1_Position          ; display result in hex 
1038: 51 1B    MOV   A,[mem_min3]       (0186)    	mov A,[mem_min3]
103A: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0187)    	lcall LCD_1_PrHexByte
                                        (0188) 	;   :
103D: 50 01    MOV   A,0x1              (0189) 	mov   A, 1                    ; row
103F: 57 05    MOV   X,0x5              (0190)    	mov   X, 5                    ; column
1041: 7C 0B CA LCALL _LCD_1_Position    (0191)    	lcall LCD_1_Position
1044: 50 01    MOV   A,0x1              (0192)    	mov   A, >sRomString2
1046: 57 B1    MOV   X,0xB1             (0193)    	mov   X, <sRomString2
1048: 7C 0A 45 LCALL _LCD_1_PrCString   (0194) 	lcall LCD_1_PrCString         ; Display string
                                        (0195) 	;  sec
104B: 50 01    MOV   A,0x1              (0196) 	mov   A, 1                    ; row
104D: 57 06    MOV   X,0x6              (0197)    	mov   X, 6                    ; column
104F: 7C 0B CA LCALL _LCD_1_Position    (0198)    	lcall LCD_1_Position          ; display result in hex 
1052: 51 1A    MOV   A,[mem_sec3]       (0199)    	mov A,[mem_sec3]
1054: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0200)    	lcall LCD_1_PrHexByte
                                        (0201) 
1057: 3C 10 01 CMP   [modeSwitch],0x1   (0202) 	cmp [modeSwitch],0x01
105A: A1 FE    JZ    0x1259             (0203) 	jz endMemoryMode
                                        (0204) 	
105C: 3C 0F 01 CMP   [watchSwitch],0x1  (0205) 	cmp [watchSwitch],0x01
105F: A0 06    JZ    0x1066             (0206) 	jz checkFordisplayHistory4
                                        (0207) 
1061: 3C 0F 00 CMP   [watchSwitch],0x0  (0208) 	cmp [watchSwitch],0x00
1064: AF A4    JZ    0x1009             (0209) 	jz displayHistory3
                                        (0210) 
                                        (0211) checkFordisplayHistory4:
1066: 3C 1D 00 CMP   [mem_sec4],0x0     (0212) 	cmp [mem_sec4],0x00
1069: B0 0D    JNZ   0x1077             (0213) 	jnz displayHistory4
106B: 3C 1E 00 CMP   [mem_min4],0x0     (0214) 	cmp [mem_min4],0x00
106E: B0 08    JNZ   0x1077             (0215) 	jnz displayHistory4
1070: 3C 1F 00 CMP   [mem_hour4],0x0    (0216) 	cmp [mem_hour4],0x00
1073: B0 03    JNZ   0x1077             (0217) 	jnz displayHistory4
1075: 80 CC    JMP   0x1142             (0218) 	jmp displayShortest
                                        (0219) 
                                        (0220) displayHistory4:
1077: 50 00    MOV   A,0x0              (0221) 	mov   A, 0                    ; row
1079: 57 00    MOV   X,0x0              (0222)    	mov   X, 0                    ; column
107B: 7C 0B CA LCALL _LCD_1_Position    (0223)    	lcall LCD_1_Position
107E: 50 02    MOV   A,0x2              (0224)    	mov   A, >sRomString13
1080: 57 39    MOV   X,0x39             (0225)    	mov   X, <sRomString13
1082: 7C 0A 45 LCALL _LCD_1_PrCString   (0226)    	lcall LCD_1_PrCString         ; Display string
                                        (0227) 	;   hour
1085: 50 01    MOV   A,0x1              (0228)    	mov   A, 1                    ; row
1087: 57 00    MOV   X,0x0              (0229)    	mov   X, 0                    ; column
1089: 7C 0B CA LCALL _LCD_1_Position    (0230)    	lcall LCD_1_Position          ; display result in hex 
108C: 51 1F    MOV   A,[mem_hour4]      (0231)    	mov A,[mem_hour4]
108E: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0232)    	lcall LCD_1_PrHexByte
                                        (0233) 	;  :
1091: 50 01    MOV   A,0x1              (0234) 	mov   A, 1                    ; row
1093: 57 02    MOV   X,0x2              (0235)    	mov   X, 2                    ; column
1095: 7C 0B CA LCALL _LCD_1_Position    (0236)    	lcall LCD_1_Position
1098: 50 01    MOV   A,0x1              (0237)    	mov   A, >sRomString2
109A: 57 B1    MOV   X,0xB1             (0238)    	mov   X, <sRomString2
109C: 7C 0A 45 LCALL _LCD_1_PrCString   (0239) 	lcall LCD_1_PrCString         ; Display string
                                        (0240) 	;  min
109F: 50 01    MOV   A,0x1              (0241) 	mov   A, 1                    ; row
10A1: 57 03    MOV   X,0x3              (0242)    	mov   X, 3                    ; column
10A3: 7C 0B CA LCALL _LCD_1_Position    (0243)    	lcall LCD_1_Position          ; display result in hex 
10A6: 51 1E    MOV   A,[mem_min4]       (0244)    	mov A,[mem_min4]
10A8: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0245)    	lcall LCD_1_PrHexByte
                                        (0246) 	;   :
10AB: 50 01    MOV   A,0x1              (0247) 	mov   A, 1                    ; row
10AD: 57 05    MOV   X,0x5              (0248)    	mov   X, 5                    ; column
10AF: 7C 0B CA LCALL _LCD_1_Position    (0249)    	lcall LCD_1_Position
10B2: 50 01    MOV   A,0x1              (0250)    	mov   A, >sRomString2
10B4: 57 B1    MOV   X,0xB1             (0251)    	mov   X, <sRomString2
10B6: 7C 0A 45 LCALL _LCD_1_PrCString   (0252) 	lcall LCD_1_PrCString         ; Display string
                                        (0253) 	;  sec
10B9: 50 01    MOV   A,0x1              (0254) 	mov   A, 1                    ; row
10BB: 57 06    MOV   X,0x6              (0255)    	mov   X, 6                    ; column
10BD: 7C 0B CA LCALL _LCD_1_Position    (0256)    	lcall LCD_1_Position          ; display result in hex 
10C0: 51 1D    MOV   A,[mem_sec4]       (0257)    	mov A,[mem_sec4]
10C2: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0258)    	lcall LCD_1_PrHexByte
                                        (0259) 
10C5: 3C 10 01 CMP   [modeSwitch],0x1   (0260) 	cmp [modeSwitch],0x01
10C8: A1 90    JZ    0x1259             (0261) 	jz endMemoryMode
                                        (0262) 	
10CA: 3C 0F 00 CMP   [watchSwitch],0x0  (0263) 	cmp [watchSwitch],0x00
10CD: A0 06    JZ    0x10D4             (0264) 	jz checkFordisplayHistory5
                                        (0265) 	
10CF: 3C 0F 01 CMP   [watchSwitch],0x1  (0266) 	cmp [watchSwitch],0x01
10D2: AF A4    JZ    0x1077             (0267) 	jz displayHistory4
                                        (0268) 
                                        (0269) checkFordisplayHistory5:
10D4: 3C 20 00 CMP   [mem_sec5],0x0     (0270) 	cmp [mem_sec5],0x00
10D7: B0 0D    JNZ   0x10E5             (0271) 	jnz displayHistory5
10D9: 3C 21 00 CMP   [mem_min5],0x0     (0272) 	cmp [mem_min5],0x00
10DC: B0 08    JNZ   0x10E5             (0273) 	jnz displayHistory5
10DE: 3C 22 00 CMP   [mem_hour5],0x0    (0274) 	cmp [mem_hour5],0x00
10E1: B0 03    JNZ   0x10E5             (0275) 	jnz displayHistory5
10E3: 80 5E    JMP   0x1142             (0276) 	jmp displayShortest
                                        (0277) 
                                        (0278) displayHistory5:
10E5: 50 00    MOV   A,0x0              (0279) 	mov   A, 0                    ; row
10E7: 57 00    MOV   X,0x0              (0280)    	mov   X, 0                    ; column
10E9: 7C 0B CA LCALL _LCD_1_Position    (0281)    	lcall LCD_1_Position
10EC: 50 02    MOV   A,0x2              (0282)    	mov   A, >sRomString14
10EE: 57 49    MOV   X,0x49             (0283)    	mov   X, <sRomString14
10F0: 7C 0A 45 LCALL _LCD_1_PrCString   (0284)    	lcall LCD_1_PrCString         ; Display string
                                        (0285) 	;   hour
10F3: 50 01    MOV   A,0x1              (0286)    	mov   A, 1                    ; row
10F5: 57 00    MOV   X,0x0              (0287)    	mov   X, 0                    ; column
10F7: 7C 0B CA LCALL _LCD_1_Position    (0288)    	lcall LCD_1_Position          ; display result in hex 
10FA: 51 22    MOV   A,[mem_hour5]      (0289)    	mov A,[mem_hour5]
10FC: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0290)    	lcall LCD_1_PrHexByte
                                        (0291) 	;  :
10FF: 50 01    MOV   A,0x1              (0292) 	mov   A, 1                    ; row
1101: 57 02    MOV   X,0x2              (0293)    	mov   X, 2                    ; column
1103: 7C 0B CA LCALL _LCD_1_Position    (0294)    	lcall LCD_1_Position
1106: 50 01    MOV   A,0x1              (0295)    	mov   A, >sRomString2
1108: 57 B1    MOV   X,0xB1             (0296)    	mov   X, <sRomString2
110A: 7C 0A 45 LCALL _LCD_1_PrCString   (0297) 	lcall LCD_1_PrCString         ; Display string
                                        (0298) 	;  min
110D: 50 01    MOV   A,0x1              (0299) 	mov   A, 1                    ; row
110F: 57 03    MOV   X,0x3              (0300)    	mov   X, 3                    ; column
1111: 7C 0B CA LCALL _LCD_1_Position    (0301)    	lcall LCD_1_Position          ; display result in hex 
1114: 51 21    MOV   A,[mem_min5]       (0302)    	mov A,[mem_min5]
1116: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0303)    	lcall LCD_1_PrHexByte
                                        (0304) 	;   :
1119: 50 01    MOV   A,0x1              (0305) 	mov   A, 1                    ; row
111B: 57 05    MOV   X,0x5              (0306)    	mov   X, 5                    ; column
111D: 7C 0B CA LCALL _LCD_1_Position    (0307)    	lcall LCD_1_Position
1120: 50 01    MOV   A,0x1              (0308)    	mov   A, >sRomString2
1122: 57 B1    MOV   X,0xB1             (0309)    	mov   X, <sRomString2
1124: 7C 0A 45 LCALL _LCD_1_PrCString   (0310) 	lcall LCD_1_PrCString         ; Display string
                                        (0311) 	;  sec
1127: 50 01    MOV   A,0x1              (0312) 	mov   A, 1                    ; row
1129: 57 06    MOV   X,0x6              (0313)    	mov   X, 6                    ; column
112B: 7C 0B CA LCALL _LCD_1_Position    (0314)    	lcall LCD_1_Position          ; display result in hex 
112E: 51 20    MOV   A,[mem_sec5]       (0315)    	mov A,[mem_sec5]
1130: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0316)    	lcall LCD_1_PrHexByte
                                        (0317) 
1133: 3C 10 01 CMP   [modeSwitch],0x1   (0318) 	cmp [modeSwitch],0x01
1136: A1 22    JZ    0x1259             (0319) 	jz endMemoryMode
                                        (0320) 
1138: 3C 0F 01 CMP   [watchSwitch],0x1  (0321) 	cmp [watchSwitch],0x01
113B: A0 06    JZ    0x1142             (0322) 	jz displayShortest
                                        (0323) 
113D: 3C 0F 00 CMP   [watchSwitch],0x0  (0324) 	cmp [watchSwitch],0x00
1140: AF A4    JZ    0x10E5             (0325) 	jz displayHistory5
                                        (0326) 
                                        (0327) 
                                        (0328) 
                                        (0329) displayShortest:
1142: 50 00    MOV   A,0x0              (0330) 	mov   A, 0                    ; row
1144: 57 00    MOV   X,0x0              (0331)    	mov   X, 0                    ; column
1146: 7C 0B CA LCALL _LCD_1_Position    (0332)    	lcall LCD_1_Position
1149: 50 02    MOV   A,0x2              (0333)    	mov   A, >sRomString15
114B: 57 59    MOV   X,0x59             (0334)    	mov   X, <sRomString15
114D: 7C 0A 45 LCALL _LCD_1_PrCString   (0335)    	lcall LCD_1_PrCString         ; Display string
                                        (0336) 	;   hour
1150: 50 01    MOV   A,0x1              (0337)    	mov   A, 1                    ; row
1152: 57 00    MOV   X,0x0              (0338)    	mov   X, 0                    ; column
1154: 7C 0B CA LCALL _LCD_1_Position    (0339)    	lcall LCD_1_Position          ; display result in hex 
1157: 51 25    MOV   A,[mem_shorthour]  (0340)    	mov A,[mem_shorthour]
1159: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0341)    	lcall LCD_1_PrHexByte
                                        (0342) 	;  :
115C: 50 01    MOV   A,0x1              (0343) 	mov   A, 1                    ; row
115E: 57 02    MOV   X,0x2              (0344)    	mov   X, 2                    ; column
1160: 7C 0B CA LCALL _LCD_1_Position    (0345)    	lcall LCD_1_Position
1163: 50 01    MOV   A,0x1              (0346)    	mov   A, >sRomString2
1165: 57 B1    MOV   X,0xB1             (0347)    	mov   X, <sRomString2
1167: 7C 0A 45 LCALL _LCD_1_PrCString   (0348) 	lcall LCD_1_PrCString         ; Display string
                                        (0349) 	;  min
116A: 50 01    MOV   A,0x1              (0350) 	mov   A, 1                    ; row
116C: 57 03    MOV   X,0x3              (0351)    	mov   X, 3                    ; column
116E: 7C 0B CA LCALL _LCD_1_Position    (0352)    	lcall LCD_1_Position          ; display result in hex 
1171: 51 24    MOV   A,[mem_shortmin]   (0353)    	mov A,[mem_shortmin]
1173: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0354)    	lcall LCD_1_PrHexByte
                                        (0355) 	;   :
1176: 50 01    MOV   A,0x1              (0356) 	mov   A, 1                    ; row
1178: 57 05    MOV   X,0x5              (0357)    	mov   X, 5                    ; column
117A: 7C 0B CA LCALL _LCD_1_Position    (0358)    	lcall LCD_1_Position
117D: 50 01    MOV   A,0x1              (0359)    	mov   A, >sRomString2
117F: 57 B1    MOV   X,0xB1             (0360)    	mov   X, <sRomString2
1181: 7C 0A 45 LCALL _LCD_1_PrCString   (0361) 	lcall LCD_1_PrCString         ; Display string
                                        (0362) 	;  sec
1184: 50 01    MOV   A,0x1              (0363) 	mov   A, 1                    ; row
1186: 57 06    MOV   X,0x6              (0364)    	mov   X, 6                    ; column
1188: 7C 0B CA LCALL _LCD_1_Position    (0365)    	lcall LCD_1_Position          ; display result in hex 
118B: 51 23    MOV   A,[mem_shortsec]   (0366)    	mov A,[mem_shortsec]
118D: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0367)    	lcall LCD_1_PrHexByte
                                        (0368) 
1190: 3C 10 01 CMP   [modeSwitch],0x1   (0369) 	cmp [modeSwitch],0x01
1193: A0 C5    JZ    0x1259             (0370) 	jz endMemoryMode
                                        (0371) 
1195: 3C 0F 00 CMP   [watchSwitch],0x0  (0372) 	cmp [watchSwitch],0x00
1198: A0 06    JZ    0x119F             (0373) 	jz displayLongest
                                        (0374) 
119A: 3C 0F 01 CMP   [watchSwitch],0x1  (0375) 	cmp [watchSwitch],0x01
119D: AF A4    JZ    0x1142             (0376) 	jz displayShortest
                                        (0377) 
                                        (0378) 
                                        (0379) 
                                        (0380) displayLongest:
119F: 50 00    MOV   A,0x0              (0381) 	mov   A, 0                    ; row
11A1: 57 00    MOV   X,0x0              (0382)    	mov   X, 0                    ; column
11A3: 7C 0B CA LCALL _LCD_1_Position    (0383)    	lcall LCD_1_Position
11A6: 50 02    MOV   A,0x2              (0384)    	mov   A, >sRomString16
11A8: 57 69    MOV   X,0x69             (0385)    	mov   X, <sRomString16
11AA: 7C 0A 45 LCALL _LCD_1_PrCString   (0386)    	lcall LCD_1_PrCString         ; Display string
                                        (0387) 	;   hour
11AD: 50 01    MOV   A,0x1              (0388)    	mov   A, 1                    ; row
11AF: 57 00    MOV   X,0x0              (0389)    	mov   X, 0                    ; column
11B1: 7C 0B CA LCALL _LCD_1_Position    (0390)    	lcall LCD_1_Position          ; display result in hex 
11B4: 51 28    MOV   A,[mem_longhour]   (0391)    	mov A,[mem_longhour]
11B6: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0392)    	lcall LCD_1_PrHexByte
                                        (0393) 	;  :
11B9: 50 01    MOV   A,0x1              (0394) 	mov   A, 1                    ; row
11BB: 57 02    MOV   X,0x2              (0395)    	mov   X, 2                    ; column
11BD: 7C 0B CA LCALL _LCD_1_Position    (0396)    	lcall LCD_1_Position
11C0: 50 01    MOV   A,0x1              (0397)    	mov   A, >sRomString2
11C2: 57 B1    MOV   X,0xB1             (0398)    	mov   X, <sRomString2
11C4: 7C 0A 45 LCALL _LCD_1_PrCString   (0399) 	lcall LCD_1_PrCString         ; Display string
                                        (0400) 	;  min
11C7: 50 01    MOV   A,0x1              (0401) 	mov   A, 1                    ; row
11C9: 57 03    MOV   X,0x3              (0402)    	mov   X, 3                    ; column
11CB: 7C 0B CA LCALL _LCD_1_Position    (0403)    	lcall LCD_1_Position          ; display result in hex 
11CE: 51 27    MOV   A,[mem_longmin]    (0404)    	mov A,[mem_longmin]
11D0: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0405)    	lcall LCD_1_PrHexByte
                                        (0406) 	;   :
11D3: 50 01    MOV   A,0x1              (0407) 	mov   A, 1                    ; row
11D5: 57 05    MOV   X,0x5              (0408)    	mov   X, 5                    ; column
11D7: 7C 0B CA LCALL _LCD_1_Position    (0409)    	lcall LCD_1_Position
11DA: 50 01    MOV   A,0x1              (0410)    	mov   A, >sRomString2
11DC: 57 B1    MOV   X,0xB1             (0411)    	mov   X, <sRomString2
11DE: 7C 0A 45 LCALL _LCD_1_PrCString   (0412) 	lcall LCD_1_PrCString         ; Display string
                                        (0413) 	;  sec
11E1: 50 01    MOV   A,0x1              (0414) 	mov   A, 1                    ; row
11E3: 57 06    MOV   X,0x6              (0415)    	mov   X, 6                    ; column
11E5: 7C 0B CA LCALL _LCD_1_Position    (0416)    	lcall LCD_1_Position          ; display result in hex 
11E8: 51 26    MOV   A,[mem_longsec]    (0417)    	mov A,[mem_longsec]
11EA: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0418)    	lcall LCD_1_PrHexByte
                                        (0419) 
11ED: 3C 10 01 CMP   [modeSwitch],0x1   (0420) 	cmp [modeSwitch],0x01
11F0: A0 68    JZ    0x1259             (0421) 	jz endMemoryMode
                                        (0422) 
11F2: 3C 0F 01 CMP   [watchSwitch],0x1  (0423) 	cmp [watchSwitch],0x01
11F5: A0 06    JZ    0x11FC             (0424) 	jz displayAverage
                                        (0425) 
11F7: 3C 0F 00 CMP   [watchSwitch],0x0  (0426) 	cmp [watchSwitch],0x00
11FA: AF A4    JZ    0x119F             (0427) 	jz displayLongest
                                        (0428) 
                                        (0429) 
                                        (0430) 
                                        (0431) displayAverage:
11FC: 50 00    MOV   A,0x0              (0432) 	mov   A, 0                    ; row
11FE: 57 00    MOV   X,0x0              (0433)    	mov   X, 0                    ; column
1200: 7C 0B CA LCALL _LCD_1_Position    (0434)    	lcall LCD_1_Position
1203: 50 02    MOV   A,0x2              (0435)    	mov   A, >sRomString17
1205: 57 79    MOV   X,0x79             (0436)    	mov   X, <sRomString17
1207: 7C 0A 45 LCALL _LCD_1_PrCString   (0437)    	lcall LCD_1_PrCString         ; Display string
                                        (0438) 	;   hour
120A: 50 01    MOV   A,0x1              (0439)    	mov   A, 1                    ; row
120C: 57 00    MOV   X,0x0              (0440)    	mov   X, 0                    ; column
120E: 7C 0B CA LCALL _LCD_1_Position    (0441)    	lcall LCD_1_Position          ; display result in hex 
1211: 51 2B    MOV   A,[mem_avghour]    (0442)    	mov A,[mem_avghour]
1213: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0443)    	lcall LCD_1_PrHexByte
                                        (0444) 	;  :
1216: 50 01    MOV   A,0x1              (0445) 	mov   A, 1                    ; row
1218: 57 02    MOV   X,0x2              (0446)    	mov   X, 2                    ; column
121A: 7C 0B CA LCALL _LCD_1_Position    (0447)    	lcall LCD_1_Position
121D: 50 01    MOV   A,0x1              (0448)    	mov   A, >sRomString2
121F: 57 B1    MOV   X,0xB1             (0449)    	mov   X, <sRomString2
1221: 7C 0A 45 LCALL _LCD_1_PrCString   (0450) 	lcall LCD_1_PrCString         ; Display string
                                        (0451) 	;  min
1224: 50 01    MOV   A,0x1              (0452) 	mov   A, 1                    ; row
1226: 57 03    MOV   X,0x3              (0453)    	mov   X, 3                    ; column
1228: 7C 0B CA LCALL _LCD_1_Position    (0454)    	lcall LCD_1_Position          ; display result in hex 
122B: 51 2A    MOV   A,[mem_avgmin]     (0455)    	mov A,[mem_avgmin]
122D: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0456)    	lcall LCD_1_PrHexByte
                                        (0457) 	;   :
1230: 50 01    MOV   A,0x1              (0458) 	mov   A, 1                    ; row
1232: 57 05    MOV   X,0x5              (0459)    	mov   X, 5                    ; column
1234: 7C 0B CA LCALL _LCD_1_Position    (0460)    	lcall LCD_1_Position
1237: 50 01    MOV   A,0x1              (0461)    	mov   A, >sRomString2
1239: 57 B1    MOV   X,0xB1             (0462)    	mov   X, <sRomString2
123B: 7C 0A 45 LCALL _LCD_1_PrCString   (0463) 	lcall LCD_1_PrCString         ; Display string
                                        (0464) 	;  sec
123E: 50 01    MOV   A,0x1              (0465) 	mov   A, 1                    ; row
1240: 57 06    MOV   X,0x6              (0466)    	mov   X, 6                    ; column
1242: 7C 0B CA LCALL _LCD_1_Position    (0467)    	lcall LCD_1_Position          ; display result in hex 
1245: 51 29    MOV   A,[mem_avgsec]     (0468)    	mov A,[mem_avgsec]
1247: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0469)    	lcall LCD_1_PrHexByte
                                        (0470) 
124A: 3C 10 01 CMP   [modeSwitch],0x1   (0471) 	cmp [modeSwitch],0x01
124D: A0 0B    JZ    0x1259             (0472) 	jz endMemoryMode
                                        (0473) 
124F: 3C 0F 00 CMP   [watchSwitch],0x0  (0474) 	cmp [watchSwitch],0x00
1252: AC DA    JZ    0x0F2D             (0475) 	jz displayHistory1
                                        (0476) 
1254: 3C 0F 01 CMP   [watchSwitch],0x1  (0477) 	cmp [watchSwitch],0x01
1257: AF A4    JZ    0x11FC             (0478) 	jz displayAverage
                                        (0479) 
                                        (0480) 
                                        (0481) endMemoryMode:
1259: 7C 0B 57 LCALL _LCD_1_Start|_LCD_1_Init|LCD_1_Init(0482) 	lcall LCD_1_Init
125C: 7F       RET                      (0483) 	ret
FILE: .\soundsensitivitymode.asm        (0001) include "m8c.inc"       ; part specific constants and macros
                                        (0002) include "memory.inc"    ; Constants & macros for SMM/LMM and Compiler
                                        (0003) include "PSoCAPI.inc"   ; PSoC API definitions for all User Modules
                                        (0004) 
                                        (0005) export startSoundSensitivityMode
                                        (0006) 
                                        (0007) area text(ROM)
                                        (0008) 
                                        (0009) .SECTION
                                        (0010) startSoundSensitivityMode:
125D: 50 00    MOV   A,0x0              (0011) 	mov   A, 0                    ; row
125F: 57 00    MOV   X,0x0              (0012)    	mov   X, 0                    ; column
1261: 7C 0B CA LCALL _LCD_1_Position    (0013)    	lcall LCD_1_Position
1264: 50 02    MOV   A,0x2              (0014)    	mov   A, >sRomString24
1266: 57 DF    MOV   X,0xDF             (0015)    	mov   X, <sRomString24
1268: 7C 0A 45 LCALL _LCD_1_PrCString   (0016)    	lcall LCD_1_PrCString         ; Display string
126B: 50 01    MOV   A,0x1              (0017) 	mov   A, 1                    ; row
126D: 57 00    MOV   X,0x0              (0018)    	mov   X, 0                    ; column
126F: 7C 0B CA LCALL _LCD_1_Position    (0019)    	lcall LCD_1_Position
1272: 50 02    MOV   A,0x2              (0020)    	mov   A, >sRomString25
1274: 57 EF    MOV   X,0xEF             (0021)    	mov   X, <sRomString25
1276: 7C 0A 45 LCALL _LCD_1_PrCString   (0022)    	lcall LCD_1_PrCString         ; Display string	
                                        (0023) 	
1279: 3C 10 01 CMP   [modeSwitch],0x1   (0024) 	cmp [modeSwitch],0x01
127C: A0 55    JZ    0x12D2             (0025) 	jz soundSensitivityModeEnd
                                        (0026) 	
127E: 3C 0F 00 CMP   [watchSwitch],0x0  (0027) 	cmp [watchSwitch],0x00
1281: A0 06    JZ    0x1288             (0028) 	jz startThresholdDetection
                                        (0029) 	
1283: 3C 0F 02 CMP   [watchSwitch],0x2  (0030) 	cmp [watchSwitch],0x02
1286: AF D6    JZ    startSoundSensitivityMode(0031) 	jz startSoundSensitivityMode
                                        (0032) 	
                                        (0033) 
                                        (0034) startThresholdDetection:
1288: 7C 0B 57 LCALL _LCD_1_Start|_LCD_1_Init|LCD_1_Init(0035) 	lcall LCD_1_Init
128B: 50 00    MOV   A,0x0              (0036) 	mov   A, 0                    ; row
128D: 57 00    MOV   X,0x0              (0037)    	mov   X, 0                    ; column
128F: 7C 0B CA LCALL _LCD_1_Position    (0038)    	lcall LCD_1_Position
1292: 50 02    MOV   A,0x2              (0039)    	mov   A, >sRomString26
1294: 57 FF    MOV   X,0xFF             (0040)    	mov   X, <sRomString26
1296: 7C 0A 45 LCALL _LCD_1_PrCString   (0041)    	lcall LCD_1_PrCString         ; Display string
                                        (0042) 	
1299: 50 FF    MOV   A,0xFF             (0043) 	mov A,0xFF
129B: 7C 0D 8C LCALL _Delay10msTimes    (0044) 	lcall Delay10msTimes	
                                        (0045) 
                                        (0046) loop1:
129E: 7C 0C C7 LCALL ADCINC12_1_fIsData|_ADCINC12_1_fIsDataAvailable|_ADCINC12_1_fIsData|ADCINC12_1_fIsDataAvailable(0047) 	lcall ADCINC12_1_fIsDataAvailable ; If conversion complete....
12A1: AF FC    JZ    0x129E             (0048)     jz    loop1
                                        (0049) 
12A3: 7C 0C CD LCALL _ADCINC12_1_iGetData(0050)     lcall ADCINC12_1_iGetData     ; Get result, convert to unsigned and clear flag
12A6: 53 2F    MOV   [threshold_lsb],A  (0051)     mov   [threshold_lsb], A
12A8: 5A 2E    MOV   [threshold_msb],X  (0052)     mov   [threshold_msb], X	
12AA: 06 2E 08 ADD   [threshold_msb],0x8(0053)     add   [threshold_msb], 0x08       ; add 0x0800 to result
12AD: 7C 0C D5 LCALL _ADCINC12_1_ClearFlag(0054)     lcall ADCINC12_1_ClearFlag
12B0: 55 2F 03 MOV   [threshold_lsb],0x3(0055) 	mov [threshold_lsb],0x03
12B3: 65 2F    ASL   [threshold_lsb]    (0056) 	asl [threshold_lsb]
12B5: 50 01    MOV   A,0x1              (0057) 	mov   A, 1                    ; row
12B7: 57 00    MOV   X,0x0              (0058)    	mov   X, 0                    ; column
12B9: 7C 0B CA LCALL _LCD_1_Position    (0059)    	lcall LCD_1_Position
12BC: 51 2F    MOV   A,[threshold_lsb]  (0060)    	mov A,[threshold_lsb]
12BE: 7C 0A 67 LCALL _LCD_1_PrHexByte   (0061)    	lcall LCD_1_PrHexByte
                                        (0062) 	
12C1: 80 01    JMP   0x12C3             (0063) 	jmp waitForShortPress
                                        (0064) 
                                        (0065) 
                                        (0066) waitForShortPress:
12C3: 3C 10 01 CMP   [modeSwitch],0x1   (0067) 	cmp [modeSwitch],0x01
12C6: A0 0B    JZ    0x12D2             (0068) 	jz soundSensitivityModeEnd
                                        (0069) 
12C8: 3C 0F 01 CMP   [watchSwitch],0x1  (0070) 	cmp [watchSwitch],0x01
12CB: A0 06    JZ    0x12D2             (0071) 	jz soundSensitivityModeEnd
                                        (0072) 
12CD: 3C 0F 00 CMP   [watchSwitch],0x0  (0073) 	cmp [watchSwitch],0x00
12D0: AF F2    JZ    0x12C3             (0074) 	jz waitForShortPress
                                        (0075) 	
                                        (0076) 
                                        (0077) soundSensitivityModeEnd:
12D2: 7C 0B 57 LCALL _LCD_1_Start|_LCD_1_Init|LCD_1_Init(0078) 	lcall LCD_1_Init
12D5: 7F       RET                      (0079) 	ret
                                        (0080) 
                                        (0081) .ENDSECTION
FILE: .\soundstopwatchmode.asm          (0001) include "m8c.inc"       ; part specific constants and macros
                                        (0002) include "memory.inc"    ; Constants & macros for SMM/LMM and Compiler
                                        (0003) include "PSoCAPI.inc"   ; PSoC API definitions for all User Modules
                                        (0004) 
                                        (0005) export startSoundWatchMode
                                        (0006) 
                                        (0007) area text(ROM)
                                        (0008) 
                                        (0009) .SECTION
                                        (0010) 
                                        (0011) readFromSensor1:
12D6: 7C 0C C7 LCALL ADCINC12_1_fIsData|_ADCINC12_1_fIsDataAvailable|_ADCINC12_1_fIsData|ADCINC12_1_fIsDataAvailable(0012) 	lcall ADCINC12_1_fIsDataAvailable ; If conversion complete....
12D9: AF FC    JZ    0x12D6             (0013) 	jz    readFromSensor1
12DB: 7C 0C CD LCALL _ADCINC12_1_iGetData(0014) 	lcall ADCINC12_1_iGetData     ; Get result, convert to unsigned and clear flag
12DE: 53 2D    MOV   [iResult+1],A      (0015)     mov   [iResult+1], A
12E0: 5A 2C    MOV   [iResult],X        (0016)     mov   [iResult+0], X	
12E2: 06 2C 08 ADD   [iResult],0x8      (0017)     add   [iResult+0], 0x08       ; add 0x0800 to result
12E5: 7C 0C D5 LCALL _ADCINC12_1_ClearFlag(0018)     lcall ADCINC12_1_ClearFlag	
12E8: 51 2F    MOV   A,[threshold_lsb]  (0019) 	mov A,[threshold_lsb]
12EA: 3A 2D    CMP   A,[iResult+1]      (0020) 	cmp A,[iResult+1]			;check LSB
12EC: C0 08    JC    0x12F5             (0021) 	jc swap1
12EE: 51 2E    MOV   A,[threshold_msb]  (0022) 	mov A,[threshold_msb]
12F0: 3A 2C    CMP   A,[iResult]        (0023) 	cmp A,[iResult+0]			;check MSB
12F2: C0 02    JC    0x12F5             (0024) 	jc swap1
                                        (0025) endOfReadFromSensor1:
12F4: 7F       RET                      (0026) 	ret
                                        (0027) swap1:
12F5: 55 0F 00 MOV   [watchSwitch],0x0  (0028) 	mov [watchSwitch],0x00
12F8: 8F FB    JMP   0x12F4             (0029) 	jmp endOfReadFromSensor1
                                        (0030) 
                                        (0031) 
                                        (0032) readFromSensor2:
12FA: 7C 0C C7 LCALL ADCINC12_1_fIsData|_ADCINC12_1_fIsDataAvailable|_ADCINC12_1_fIsData|ADCINC12_1_fIsDataAvailable(0033) 	lcall ADCINC12_1_fIsDataAvailable ; If conversion complete....
12FD: AF FC    JZ    0x12FA             (0034) 	jz    readFromSensor2
12FF: 7C 0C CD LCALL _ADCINC12_1_iGetData(0035) 	lcall ADCINC12_1_iGetData     ; Get result, convert to unsigned and clear flag
1302: 53 2D    MOV   [iResult+1],A      (0036)     mov   [iResult+1], A
1304: 5A 2C    MOV   [iResult],X        (0037)     mov   [iResult+0], X	
1306: 06 2C 08 ADD   [iResult],0x8      (0038)     add   [iResult+0], 0x08       ; add 0x0800 to result
1309: 7C 0C D5 LCALL _ADCINC12_1_ClearFlag(0039)     lcall ADCINC12_1_ClearFlag	
130C: 51 2F    MOV   A,[threshold_lsb]  (0040) 	mov A,[threshold_lsb]
130E: 3A 2D    CMP   A,[iResult+1]      (0041) 	cmp A,[iResult+1]			;check LSB
1310: C0 08    JC    0x1319             (0042) 	jc swap2
1312: 51 2E    MOV   A,[threshold_msb]  (0043) 	mov A,[threshold_msb]
1314: 3A 2C    CMP   A,[iResult]        (0044) 	cmp A,[iResult+0]			;check MSB
1316: C0 02    JC    0x1319             (0045) 	jc swap2
                                        (0046) endOfReadFromSensor2:
1318: 7F       RET                      (0047) 	ret
                                        (0048) swap2:
1319: 55 0F 01 MOV   [watchSwitch],0x1  (0049) 	mov [watchSwitch],0x01
131C: 8F FB    JMP   0x1318             (0050) 	jmp endOfReadFromSensor2
                                        (0051) 	
                                        (0052) 
                                        (0053) startSoundWatchMode:
131E: 50 00    MOV   A,0x0              (0054) 	mov   A, 0                    ; row
1320: 57 00    MOV   X,0x0              (0055)    	mov   X, 0                    ; column
1322: 7C 0B CA LCALL _LCD_1_Position    (0056)    	lcall LCD_1_Position
1325: 50 02    MOV   A,0x2              (0057)    	mov   A, >sRomString20
1327: 57 A9    MOV   X,0xA9             (0058)    	mov   X, <sRomString20
1329: 7C 0A 45 LCALL _LCD_1_PrCString   (0059)    	lcall LCD_1_PrCString         ; Display string
132C: 50 01    MOV   A,0x1              (0060) 	mov   A, 1                    ; row
132E: 57 00    MOV   X,0x0              (0061)    	mov   X, 0                    ; column
1330: 7C 0B CA LCALL _LCD_1_Position    (0062)    	lcall LCD_1_Position
1333: 50 01    MOV   A,0x1              (0063)    	mov   A, >sRomString1
1335: 57 A0    MOV   X,0xA0             (0064)    	mov   X, <sRomString1
1337: 7C 0A 45 LCALL _LCD_1_PrCString   (0065)    	lcall LCD_1_PrCString         ; Display string	
                                        (0066) 
133A: 9F 9A    CALL  0x12D6             (0067) 	call readFromSensor1
133C: 3C 10 01 CMP   [modeSwitch],0x1   (0068) 	cmp [modeSwitch],0x01
133F: A0 8A    JZ    0x13CA             (0069) 	jz soundWatchModeEnd
1341: 3C 0F 00 CMP   [watchSwitch],0x0  (0070) 	cmp [watchSwitch],0x00
1344: A0 06    JZ    0x134B             (0071) 	jz startWatch
1346: 3C 0F 02 CMP   [watchSwitch],0x2  (0072) 	cmp [watchSwitch],0x02
1349: AF D4    JZ    startSoundWatchMode(0073) 	jz startSoundWatchMode
                                        (0074) 
                                        (0075) 
                                        (0076) startWatch:	
134B: 7C 0B 57 LCALL _LCD_1_Start|_LCD_1_Init|LCD_1_Init(0077) 	lcall LCD_1_Init
134E: 50 00    MOV   A,0x0              (0078) 	mov   A, 0                    ; row
1350: 57 00    MOV   X,0x0              (0079)    	mov   X, 0                    ; column
1352: 7C 0B CA LCALL _LCD_1_Position    (0080)    	lcall LCD_1_Position
1355: 50 02    MOV   A,0x2              (0081)    	mov   A, >sRomString23
1357: 57 CF    MOV   X,0xCF             (0082)    	mov   X, <sRomString23
1359: 7C 0A 45 LCALL _LCD_1_PrCString   (0083)    	lcall LCD_1_PrCString         ; Display string
135C: 3C 12 01 CMP   [accuracy],0x1     (0084) 	cmp [accuracy],0x01
135F: A0 2B    JZ    0x138B             (0085) 	jz startWatchRes1
1361: 3C 12 02 CMP   [accuracy],0x2     (0086) 	cmp [accuracy],0x02
1364: A0 3B    JZ    0x13A0             (0087) 	jz startWatchRes2
1366: 3C 12 04 CMP   [accuracy],0x4     (0088) 	cmp [accuracy],0x04
1369: A0 4B    JZ    0x13B5             (0089) 	jz startWatchRes3
                                        (0090) 	
                                        (0091) stopWatch:
136B: 55 0B 00 MOV   [milisec],0x0      (0092) 	mov [milisec], 0x00
136E: 55 0A 00 MOV   [msec],0x0         (0093) 	mov [msec], 0x00
1371: 55 0C 00 MOV   [sec],0x0          (0094) 	mov [sec], 0x00
1374: 55 0D 00 MOV   [min],0x0          (0095) 	mov [min], 0x00
1377: 55 0E 00 MOV   [hour],0x0         (0096) 	mov [hour], 0x00
                                        (0097) 	
137A: 9F 5A    CALL  0x12D6             (0098) 	call readFromSensor1
137C: 3C 10 01 CMP   [modeSwitch],0x1   (0099) 	cmp [modeSwitch],0x01
137F: A0 4A    JZ    0x13CA             (0100) 	jz soundWatchModeEnd		
1381: 3C 0F 00 CMP   [watchSwitch],0x0  (0101) 	cmp [watchSwitch],0x00
1384: AF C6    JZ    0x134B             (0102) 	jz startWatch
1386: 3C 0F 01 CMP   [watchSwitch],0x1  (0103) 	cmp [watchSwitch],0x01
1389: AF E1    JZ    0x136B             (0104) 	jz stopWatch
                                        (0105) 
                                        (0106) 
                                        (0107) ; 1 sec resolution stopwatch function
                                        (0108) startWatchRes1:
138B: 7C 06 28 LCALL _Timer32_1_EnableInt(0109) 	lcall Timer32_1_EnableInt				
138E: 7C 06 30 LCALL _Timer32_1_Start   (0110) 	lcall Timer32_1_Start
1391: 9F 67    CALL  0x12FA             (0111) 	call readFromSensor2
1393: 3C 0F 00 CMP   [watchSwitch],0x0  (0112) 	cmp [watchSwitch],0x00         
1396: AF F4    JZ    0x138B             (0113) 	jz startWatchRes1
1398: 7C 06 34 LCALL _Timer32_1_Stop    (0114) 	lcall Timer32_1_Stop
139B: 7C 14 DE LCALL storeToHistory     (0115) 	lcall storeToHistory
139E: 8F CC    JMP   0x136B             (0116) 	jmp stopWatch
                                        (0117) 
                                        (0118) 
                                        (0119) ; 1/2 sec resolution stopwatch function
                                        (0120) startWatchRes2:
13A0: 7C 08 AD LCALL _Timer16_1_EnableInt(0121) 	lcall Timer16_1_EnableInt
13A3: 7C 08 B5 LCALL _Timer16_1_Start   (0122) 	lcall Timer16_1_Start
13A6: 9F 52    CALL  0x12FA             (0123) 	call readFromSensor2
13A8: 3C 0F 00 CMP   [watchSwitch],0x0  (0124) 	cmp [watchSwitch],0x00
13AB: AF F4    JZ    0x13A0             (0125) 	jz startWatchRes2
13AD: 7C 08 B9 LCALL _Timer16_1_Stop    (0126) 	lcall Timer16_1_Stop
13B0: 7C 14 DE LCALL storeToHistory     (0127) 	lcall storeToHistory
13B3: 8F B7    JMP   0x136B             (0128) 	jmp stopWatch
                                        (0129) 
                                        (0130) 
                                        (0131) ; 1/10 sec resolution stopwatch function
                                        (0132) startWatchRes3:
13B5: 7C 07 99 LCALL _Timer16_2_EnableInt(0133) 	lcall Timer16_2_EnableInt				
13B8: 7C 07 A1 LCALL _Timer16_2_Start   (0134) 	lcall Timer16_2_Start
13BB: 9F 3D    CALL  0x12FA             (0135) 	call readFromSensor2
13BD: 3C 0F 00 CMP   [watchSwitch],0x0  (0136) 	cmp [watchSwitch],0x00
13C0: AF F4    JZ    0x13B5             (0137) 	jz startWatchRes3
13C2: 7C 07 A5 LCALL _Timer16_2_Stop    (0138) 	lcall Timer16_2_Stop
13C5: 7C 14 DE LCALL storeToHistory     (0139) 	lcall storeToHistory
13C8: 8F A2    JMP   0x136B             (0140) 	jmp stopWatch
                                        (0141) 
                                        (0142) 	
                                        (0143) soundWatchModeEnd:
13CA: 7C 0B 57 LCALL _LCD_1_Start|_LCD_1_Init|LCD_1_Init(0144) 	lcall LCD_1_Init
13CD: 7F       RET                      (0145) 	ret
                                        (0146) 
                                        (0147) .ENDSECTION
FILE: .\stopwatchmode.asm               (0001) 
                                        (0002) include "m8c.inc"       ; part specific constants and macros
                                        (0003) include "memory.inc"    ; Constants & macros for SMM/LMM and Compiler
                                        (0004) include "PSoCAPI.inc"   ; PSoC API definitions for all User Modules
                                        (0005) 
                                        (0006) export stopWatchModeStart
                                        (0007) 
                                        (0008) area text(ROM)
                                        (0009) 
                                        (0010) .SECTION
                                        (0011) stopWatchModeStart:
13CE: 50 00    MOV   A,0x0              (0012) 	mov   A, 0                    ; row
13D0: 57 00    MOV   X,0x0              (0013)    	mov   X, 0                    ; column
13D2: 7C 0B CA LCALL _LCD_1_Position    (0014)    	lcall LCD_1_Position
13D5: 50 02    MOV   A,0x2              (0015)    	mov   A, >sRomString19
13D7: 57 99    MOV   X,0x99             (0016)    	mov   X, <sRomString19
13D9: 7C 0A 45 LCALL _LCD_1_PrCString   (0017)    	lcall LCD_1_PrCString         ; Display string
13DC: 50 01    MOV   A,0x1              (0018) 	mov   A, 1                    ; row
13DE: 57 00    MOV   X,0x0              (0019)    	mov   X, 0                    ; column
13E0: 7C 0B CA LCALL _LCD_1_Position    (0020)    	lcall LCD_1_Position
13E3: 50 01    MOV   A,0x1              (0021)    	mov   A, >sRomString1
13E5: 57 A0    MOV   X,0xA0             (0022)    	mov   X, <sRomString1
13E7: 7C 0A 45 LCALL _LCD_1_PrCString   (0023)    	lcall LCD_1_PrCString         ; Display string	
                                        (0024) 	
13EA: 3C 10 01 CMP   [modeSwitch],0x1   (0025) 	cmp [modeSwitch],0x01
13ED: A0 88    JZ    0x1476             (0026) 	jz stopWatchModeEnd
                                        (0027) 	
13EF: 3C 0F 00 CMP   [watchSwitch],0x0  (0028) 	cmp [watchSwitch],0x00
13F2: A0 06    JZ    0x13F9             (0029) 	jz startWatch
                                        (0030) 	
13F4: 3C 0F 02 CMP   [watchSwitch],0x2  (0031) 	cmp [watchSwitch],0x02
13F7: AF D6    JZ    stopWatchModeStart (0032) 	jz stopWatchModeStart
                                        (0033) 
                                        (0034) startWatch:	
13F9: 7C 0B 57 LCALL _LCD_1_Start|_LCD_1_Init|LCD_1_Init(0035) 	lcall LCD_1_Init
13FC: 50 00    MOV   A,0x0              (0036) 	mov   A, 0                    ; row
13FE: 57 00    MOV   X,0x0              (0037)    	mov   X, 0                    ; column
1400: 7C 0B CA LCALL _LCD_1_Position    (0038)    	lcall LCD_1_Position
1403: 50 02    MOV   A,0x2              (0039)    	mov   A, >sRomString23
1405: 57 CF    MOV   X,0xCF             (0040)    	mov   X, <sRomString23
1407: 7C 0A 45 LCALL _LCD_1_PrCString   (0041)    	lcall LCD_1_PrCString         ; Display string
                                        (0042) 	
140A: 3C 12 01 CMP   [accuracy],0x1     (0043) 	cmp [accuracy],0x01
140D: A0 31    JZ    0x143F             (0044) 	jz startWatchRes1
140F: 3C 12 02 CMP   [accuracy],0x2     (0045) 	cmp [accuracy],0x02
1412: A0 06    JZ    0x1419             (0046) 	jz startWatchRes2Call
1414: 3C 12 04 CMP   [accuracy],0x4     (0047) 	cmp [accuracy],0x04
1417: A0 05    JZ    0x141D             (0048) 	jz startWatchRes3Call
                                        (0049) 	
                                        (0050) startWatchRes2Call:
1419: 90 37    CALL  0x1452             (0051) 	call startWatchRes2
141B: 80 05    JMP   0x1421             (0052) 	jmp stopWatch
                                        (0053) 	
                                        (0054) startWatchRes3Call:
141D: 90 45    CALL  0x1464             (0055) 	call startWatchRes3
141F: 80 01    JMP   0x1421             (0056) 	jmp stopWatch
                                        (0057) 	
                                        (0058) stopWatch:
1421: 55 0B 00 MOV   [milisec],0x0      (0059) 	mov [milisec], 0x00
1424: 55 0A 00 MOV   [msec],0x0         (0060) 	mov [msec], 0x00
1427: 55 0C 00 MOV   [sec],0x0          (0061) 	mov [sec], 0x00
142A: 55 0D 00 MOV   [min],0x0          (0062) 	mov [min], 0x00
142D: 55 0E 00 MOV   [hour],0x0         (0063) 	mov [hour], 0x00
                                        (0064) 		
1430: 3C 10 01 CMP   [modeSwitch],0x1   (0065) 	cmp [modeSwitch],0x01
1433: A0 42    JZ    0x1476             (0066) 	jz stopWatchModeEnd
                                        (0067) 	
1435: 3C 0F 00 CMP   [watchSwitch],0x0  (0068) 	cmp [watchSwitch],0x00
1438: AF C0    JZ    0x13F9             (0069) 	jz startWatch
                                        (0070) 	
143A: 3C 0F 01 CMP   [watchSwitch],0x1  (0071) 	cmp [watchSwitch],0x01
143D: AF E3    JZ    0x1421             (0072) 	jz stopWatch
                                        (0073) 
                                        (0074) 
                                        (0075) 
                                        (0076) ; 1 sec resolution stopwatch function
                                        (0077) startWatchRes1:
143F: 7C 06 28 LCALL _Timer32_1_EnableInt(0078) 	lcall Timer32_1_EnableInt				
1442: 7C 06 30 LCALL _Timer32_1_Start   (0079) 	lcall Timer32_1_Start
1445: 3C 0F 00 CMP   [watchSwitch],0x0  (0080) 	cmp [watchSwitch],0x00
1448: AF F6    JZ    0x143F             (0081) 	jz startWatchRes1
144A: 7C 06 34 LCALL _Timer32_1_Stop    (0082) 	lcall Timer32_1_Stop
144D: 7C 14 DE LCALL storeToHistory     (0083) 	lcall storeToHistory
1450: 8F D0    JMP   0x1421             (0084) 	jmp stopWatch
                                        (0085) 
                                        (0086) 
                                        (0087) ; 1/2 sec resolution stopwatch function
                                        (0088) startWatchRes2:
1452: 7C 08 AD LCALL _Timer16_1_EnableInt(0089) 	lcall Timer16_1_EnableInt
1455: 7C 08 B5 LCALL _Timer16_1_Start   (0090) 	lcall Timer16_1_Start
1458: 3C 0F 00 CMP   [watchSwitch],0x0  (0091) 	cmp [watchSwitch],0x00
145B: AF F6    JZ    0x1452             (0092) 	jz startWatchRes2
145D: 7C 08 B9 LCALL _Timer16_1_Stop    (0093) 	lcall Timer16_1_Stop
1460: 7C 14 DE LCALL storeToHistory     (0094) 	lcall storeToHistory
1463: 7F       RET                      (0095) 	ret
                                        (0096) 
                                        (0097) 
                                        (0098) ; 1/10 sec resolution stopwatch function
                                        (0099) startWatchRes3:
1464: 7C 07 99 LCALL _Timer16_2_EnableInt(0100) 	lcall Timer16_2_EnableInt				
1467: 7C 07 A1 LCALL _Timer16_2_Start   (0101) 	lcall Timer16_2_Start
146A: 3C 0F 00 CMP   [watchSwitch],0x0  (0102) 	cmp [watchSwitch],0x00
146D: AF F6    JZ    0x1464             (0103) 	jz startWatchRes3
146F: 7C 07 A5 LCALL _Timer16_2_Stop    (0104) 	lcall Timer16_2_Stop
1472: 7C 14 DE LCALL storeToHistory     (0105) 	lcall storeToHistory
1475: 7F       RET                      (0106) 	ret
                                        (0107) 
                                        (0108) 	
                                        (0109) stopWatchModeEnd:
1476: 7C 0B 57 LCALL _LCD_1_Start|_LCD_1_Init|LCD_1_Init(0110) 	lcall LCD_1_Init
1479: 7F       RET                      (0111) 	ret
                                        (0112) 
                                        (0113) .ENDSECTION
FILE: .\storingtomemory.asm             (0001) include "m8c.inc"       ; part specific constants and macros
                                        (0002) include "memory.inc"    ; Constants & macros for SMM/LMM and Compiler
                                        (0003) include "PSoCAPI.inc"   ; PSoC API definitions for all User Modules
                                        (0004) 
                                        (0005) export storeToHistory
                                        (0006) 
                                        (0007) area text(ROM)
                                        (0008) 
                                        (0009) .SECTION
                                        (0010) calculateshortest:
147A: 51 25    MOV   A,[mem_shorthour]  (0011) 	MOV A,[mem_shorthour]
147C: 3A 0E    CMP   A,[hour]           (0012) 	CMP A,[hour]
147E: D0 17    JNC   0x1496             (0013) 	JNC movingShortest
1480: A0 03    JZ    0x1484             (0014) 	JZ checkminShortest
1482: C0 5A    JC    0x14DD             (0015) 	JC endCalculations
                                        (0016) checkminShortest:
1484: 51 24    MOV   A,[mem_shortmin]   (0017) 	MOV A,[mem_shortmin]
1486: 3A 0D    CMP   A,[min]            (0018) 	CMP A,[min]
1488: D0 0D    JNC   0x1496             (0019) 	JNC movingShortest
148A: A0 03    JZ    0x148E             (0020) 	JZ checksecShortest
148C: C0 50    JC    0x14DD             (0021) 	JC endCalculations
                                        (0022) checksecShortest:
148E: 51 23    MOV   A,[mem_shortsec]   (0023) 	MOV A,[mem_shortsec]
1490: 3A 0C    CMP   A,[sec]            (0024) 	CMP A,[sec]
1492: D0 03    JNC   0x1496             (0025) 	JNC movingShortest
1494: C0 48    JC    0x14DD             (0026) 	JC endCalculations
                                        (0027) movingShortest:
1496: 5F 25 0E MOV   [mem_shorthour],[hour](0028) 	MOV [mem_shorthour],[hour]
1499: 5F 24 0D MOV   [mem_shortmin],[min](0029) 	MOV [mem_shortmin],[min]
149C: 5F 23 0C MOV   [mem_shortsec],[sec](0030) 	MOV [mem_shortsec],[sec]
149F: 80 3D    JMP   0x14DD             (0031) 	JMP endCalculations
                                        (0032) 	
                                        (0033) 	
                                        (0034) calculatelongest:
14A1: 51 0E    MOV   A,[hour]           (0035) 	MOV A,[hour]
14A3: 3A 28    CMP   A,[mem_longhour]   (0036) 	CMP A,[mem_longhour]
14A5: D0 17    JNC   0x14BD             (0037) 	JNC movingLongest
14A7: A0 03    JZ    0x14AB             (0038) 	JZ checkminLongest
14A9: C0 33    JC    0x14DD             (0039) 	JC endCalculations
                                        (0040) checkminLongest:
14AB: 51 0D    MOV   A,[min]            (0041) 	MOV A,[min]
14AD: 3A 27    CMP   A,[mem_longmin]    (0042) 	CMP A,[mem_longmin]
14AF: A0 05    JZ    0x14B5             (0043) 	JZ checksecLongest
14B1: D0 0B    JNC   0x14BD             (0044) 	JNC movingLongest
14B3: C0 29    JC    0x14DD             (0045) 	JC endCalculations
                                        (0046) checksecLongest:
14B5: 51 0C    MOV   A,[sec]            (0047) 	MOV A,[sec]
14B7: 3A 26    CMP   A,[mem_longsec]    (0048) 	CMP A,[mem_longsec]
14B9: D0 03    JNC   0x14BD             (0049) 	JNC movingLongest
14BB: C0 21    JC    0x14DD             (0050) 	JC endCalculations
                                        (0051) movingLongest:
14BD: 5F 28 0E MOV   [mem_longhour],[hour](0052) 	MOV [mem_longhour],[hour]
14C0: 5F 27 0D MOV   [mem_longmin],[min](0053) 	MOV [mem_longmin],[min]
14C3: 5F 26 0C MOV   [mem_longsec],[sec](0054) 	MOV [mem_longsec],[sec]
14C6: 80 16    JMP   0x14DD             (0055) 	JMP endCalculations
                                        (0056) 	
                                        (0057) 	
                                        (0058) calculateaverage:
14C8: 51 2B    MOV   A,[mem_avghour]    (0059) 	MOV A,[mem_avghour]
14CA: 02 0E    ADD   A,[hour]           (0060) 	ADD A,[hour]
14CC: 67       ASR   A                  (0061) 	ASR A
14CD: 53 2B    MOV   [mem_avghour],A    (0062) 	MOV [mem_avghour],A
14CF: 51 2A    MOV   A,[mem_avgmin]     (0063) 	MOV A,[mem_avgmin]
14D1: 02 0D    ADD   A,[min]            (0064) 	ADD A,[min]
14D3: 67       ASR   A                  (0065) 	ASR A
14D4: 53 2A    MOV   [mem_avgmin],A     (0066) 	MOV [mem_avgmin],A
14D6: 51 29    MOV   A,[mem_avgsec]     (0067) 	MOV A,[mem_avgsec]
14D8: 02 0C    ADD   A,[sec]            (0068) 	ADD A,[sec]
14DA: 67       ASR   A                  (0069) 	ASR A
14DB: 53 29    MOV   [mem_avgsec],A     (0070) 	MOV [mem_avgsec],A
                                        (0071) 	
                                        (0072) 
                                        (0073) endCalculations:
14DD: 7F       RET                      (0074) 	ret
                                        (0075) .ENDSECTION
                                        (0076) 
                                        (0077) 
                                        (0078) .SECTION
                                        (0079) storeToHistory:
14DE: 3C 13 01 CMP   [historyCounter],0x1(0080) 	cmp [historyCounter],0x01
14E1: A0 16    JZ    0x14F8             (0081) 	jz storeIn1
14E3: 3C 13 02 CMP   [historyCounter],0x2(0082) 	cmp [historyCounter],0x02
14E6: A0 46    JZ    0x152D             (0083) 	jz storeIn2
14E8: 3C 13 03 CMP   [historyCounter],0x3(0084) 	cmp [historyCounter],0x03
14EB: A0 55    JZ    0x1541             (0085) 	jz storeIn3
14ED: 3C 13 04 CMP   [historyCounter],0x4(0086) 	cmp [historyCounter],0x04
14F0: A0 64    JZ    0x1555             (0087) 	jz storeIn4
14F2: 3C 13 05 CMP   [historyCounter],0x5(0088) 	cmp [historyCounter],0x05
14F5: A0 73    JZ    0x1569             (0089) 	jz storeIn5
                                        (0090) retFromStoreHistory:
14F7: 7F       RET                      (0091) 	ret
                                        (0092) 	
                                        (0093) 
                                        (0094) storeIn1:
14F8: 5F 14 0C MOV   [mem_sec1],[sec]   (0095) 	mov [mem_sec1],[sec]
14FB: 5F 15 0D MOV   [mem_min1],[min]   (0096) 	mov [mem_min1],[min]
14FE: 5F 16 0E MOV   [mem_hour1],[hour] (0097) 	mov [mem_hour1],[hour]
                                        (0098) 	;cmp [mem_shortsec],0x00
                                        (0099) 	;jz calcForFirstTimeEver
                                        (0100) 	;jnz callCalculateFuncs
1501: 80 06    JMP   0x1508             (0101) 	jmp calcForFirstTimeEver
                                        (0102) retFromCalcFirstTimeEver:
1503: 55 13 02 MOV   [historyCounter],0x2(0103) 	mov [historyCounter],0x02
1506: 8F F0    JMP   0x14F7             (0104) 	jmp retFromStoreHistory
                                        (0105) 	
                                        (0106) 
                                        (0107) calcForFirstTimeEver:
1508: 5F 23 0C MOV   [mem_shortsec],[sec](0108) 	mov [mem_shortsec],[sec]
150B: 5F 24 0D MOV   [mem_shortmin],[min](0109) 	mov [mem_shortmin],[min]
150E: 5F 25 0E MOV   [mem_shorthour],[hour](0110) 	mov [mem_shorthour],[hour]
1511: 5F 26 0C MOV   [mem_longsec],[sec](0111) 	mov [mem_longsec],[sec]
1514: 5F 27 0D MOV   [mem_longmin],[min](0112) 	mov [mem_longmin],[min]
1517: 5F 28 0E MOV   [mem_longhour],[hour](0113) 	mov [mem_longhour],[hour]
151A: 5F 29 0C MOV   [mem_avgsec],[sec] (0114) 	mov [mem_avgsec],[sec]
151D: 5F 2A 0D MOV   [mem_avgmin],[min] (0115) 	mov [mem_avgmin],[min]
1520: 5F 2B 0E MOV   [mem_avghour],[hour](0116) 	mov [mem_avghour],[hour]
1523: 8F DF    JMP   0x1503             (0117) 	jmp retFromCalcFirstTimeEver
                                        (0118) 	
                                        (0119) callCalculateFuncs:
1525: 9F 53    CALL  0x147A             (0120) 	call calculateshortest
1527: 9F 78    CALL  0x14A1             (0121) 	call calculatelongest
1529: 9F 9D    CALL  0x14C8             (0122) 	call calculateaverage
152B: 8F D7    JMP   0x1503             (0123) 	jmp retFromCalcFirstTimeEver
                                        (0124) 	
                                        (0125) 
                                        (0126) storeIn2:
152D: 5F 17 0C MOV   [mem_sec2],[sec]   (0127) 	mov [mem_sec2],[sec]
1530: 5F 18 0D MOV   [mem_min2],[min]   (0128) 	mov [mem_min2],[min]
1533: 5F 19 0E MOV   [mem_hour2],[hour] (0129) 	mov [mem_hour2],[hour]
1536: 9F 42    CALL  0x147A             (0130) 	call calculateshortest
1538: 9F 67    CALL  0x14A1             (0131) 	call calculatelongest
153A: 9F 8C    CALL  0x14C8             (0132) 	call calculateaverage
153C: 55 13 03 MOV   [historyCounter],0x3(0133) 	mov [historyCounter],0x03
153F: 8F B7    JMP   0x14F7             (0134) 	jmp retFromStoreHistory
                                        (0135) 	
                                        (0136) storeIn3:
1541: 5F 1A 0C MOV   [mem_sec3],[sec]   (0137) 	mov [mem_sec3],[sec]
1544: 5F 1B 0D MOV   [mem_min3],[min]   (0138) 	mov [mem_min3],[min]
1547: 5F 1C 0E MOV   [mem_hour3],[hour] (0139) 	mov [mem_hour3],[hour]
154A: 9F 2E    CALL  0x147A             (0140) 	call calculateshortest
154C: 9F 53    CALL  0x14A1             (0141) 	call calculatelongest
154E: 9F 78    CALL  0x14C8             (0142) 	call calculateaverage
1550: 55 13 04 MOV   [historyCounter],0x4(0143) 	mov [historyCounter],0x04
1553: 8F A3    JMP   0x14F7             (0144) 	jmp retFromStoreHistory
                                        (0145) 	
                                        (0146) storeIn4:
1555: 5F 1D 0C MOV   [mem_sec4],[sec]   (0147) 	mov [mem_sec4],[sec]
1558: 5F 1E 0D MOV   [mem_min4],[min]   (0148) 	mov [mem_min4],[min]
155B: 5F 1F 0E MOV   [mem_hour4],[hour] (0149) 	mov [mem_hour4],[hour]
155E: 9F 1A    CALL  0x147A             (0150) 	call calculateshortest
1560: 9F 3F    CALL  0x14A1             (0151) 	call calculatelongest
1562: 9F 64    CALL  0x14C8             (0152) 	call calculateaverage
1564: 55 13 05 MOV   [historyCounter],0x5(0153) 	mov [historyCounter],0x05
1567: 8F 8F    JMP   0x14F7             (0154) 	jmp retFromStoreHistory
                                        (0155) 	
                                        (0156) storeIn5:
1569: 5F 20 0C MOV   [mem_sec5],[sec]   (0157) 	mov [mem_sec5],[sec]
156C: 5F 21 0D MOV   [mem_min5],[min]   (0158) 	mov [mem_min5],[min]
156F: 5F 22 0E MOV   [mem_hour5],[hour] (0159) 	mov [mem_hour5],[hour]
1572: 9F 06    CALL  0x147A             (0160) 	call calculateshortest
1574: 9F 2B    CALL  0x14A1             (0161) 	call calculatelongest
1576: 9F 50    CALL  0x14C8             (0162) 	call calculateaverage
1578: 55 13 01 MOV   [historyCounter],0x1(0163) 	mov [historyCounter],0x01
157B: 8F 7B    JMP   0x14F7             (0164) 	jmp retFromStoreHistory
                                        (0165) 
                                        (0166) .ENDSECTIONFILE: lib\psocgpioint.asm               (0001) ;  Generated by PSoC Designer 5.3.2710
                                        (0002) ;
                                        (0003) ;;*****************************************************************************
                                        (0004) ;;*****************************************************************************
                                        (0005) ;;  FILENAME: PSoCGPIOINT.asm
                                        (0006) ;;   Version: 2.0.0.20, Updated on 2003/07/17 at 12:10:35
                                        (0007) ;;  @PSOC_VERSION
                                        (0008) ;;
                                        (0009) ;;  DESCRIPTION: PSoC GPIO Interrupt Service Routine
                                        (0010) ;;-----------------------------------------------------------------------------
                                        (0011) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0012) ;;*****************************************************************************
                                        (0013) ;;*****************************************************************************
                                        (0014) 
                                        (0015) include "m8c.inc"
                                        (0016) include "PSoCGPIOINT.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export   PSoC_GPIO_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) ;-----------------------------------------------
                                        (0025) ;  Constant Definitions
                                        (0026) ;-----------------------------------------------
                                        (0027) 
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) 	
                                        (0033) 
                                        (0034) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0035) ;---------------------------------------------------
                                        (0036) ; Insert your custom declarations below this banner
                                        (0037) ;---------------------------------------------------
                                        (0038) 
                                        (0039) ;---------------------------------------------------
                                        (0040) ; Insert your custom declarations above this banner
                                        (0041) ;---------------------------------------------------
                                        (0042) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: PSoC_GPIO_ISR
                                        (0047) ;
                                        (0048) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0049) ;
                                        (0050) ;-----------------------------------------------------------------------------
                                        (0051) ;
                                        (0052) PSoC_GPIO_ISR:
                                        (0053) 
                                        (0054) 
                                        (0055)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0056)    ;---------------------------------------------------
                                        (0057)    ; Insert your custom code below this banner
                                        (0058)    ;---------------------------------------------------
                                        (0059) 	
157D: 50 32    MOV   A,0x32             (0060) 	mov A,0x32
157F: 7C 0D 8C LCALL _Delay10msTimes    (0061) 	lcall Delay10msTimes	
1582: 5D 04    MOV   A,REG[0x4]         (0062) 	mov A,reg[PRT1DR]
1584: 21 01    AND   A,0x1              (0063) 	and A,0x01
1586: 39 01    CMP   A,0x1              (0064) 	cmp A,0x01
1588: A0 11    JZ    0x159A             (0065) 	jz setLong
                                        (0066) 	
158A: 3C 0F 00 CMP   [watchSwitch],0x0  (0067) 	cmp [watchSwitch],0x00
158D: A0 05    JZ    0x1593             (0068) 	jz setShort
158F: 55 0F 00 MOV   [watchSwitch],0x0  (0069) 	mov [watchSwitch],0x00
1592: 7E       RETI                     (0070) 	reti
                                        (0071) 	
                                        (0072) setShort:	
1593: 55 10 00 MOV   [modeSwitch],0x0   (0073) 	mov [modeSwitch],0x00
1596: 55 0F 01 MOV   [watchSwitch],0x1  (0074) 	mov [watchSwitch],0x01
1599: 7E       RETI                     (0075) 	reti
                                        (0076) 	
                                        (0077) setLong: 
159A: 55 10 01 MOV   [modeSwitch],0x1   (0078) 	mov [modeSwitch],0x01
159D: 55 0F 02 MOV   [watchSwitch],0x2  (0079) 	mov [watchSwitch],0x02
15A0: 7E       RETI                     (0080) 	reti
                                        (0081) 
                                        (0082)    ;---------------------------------------------------
                                        (0083)    ; Insert your custom code above this banner
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0086) 
15A1: 7E       RETI                     (0087)    reti
                                        (0088) 
                                        (0089) 
                                        (0090) ; end of file PSoCGPIOINT.asm
