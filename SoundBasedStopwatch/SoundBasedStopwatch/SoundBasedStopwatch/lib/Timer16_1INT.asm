;;*****************************************************************************
;;*****************************************************************************
;;  FILENAME: Timer16_1INT.asm
;;   Version: 2.6, Updated on 2012/9/21 at 11:59:42
;;  Generated by PSoC Designer 5.3.2710
;;
;;  DESCRIPTION: Timer16 Interrupt Service Routine
;;-----------------------------------------------------------------------------
;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************

include "m8c.inc"
include "memory.inc"
include "Timer16_1.inc"


;-----------------------------------------------
;  Global Symbols
;-----------------------------------------------
export  _Timer16_1_ISR


AREA InterruptRAM (RAM,REL,CON)

;@PSoC_UserCode_INIT@ (Do not change this line.)
;---------------------------------------------------
; Insert your custom declarations below this banner
;---------------------------------------------------

;------------------------
; Includes
;------------------------

	
;------------------------
;  Constant Definitions
;------------------------


;------------------------
; Variable Allocation
;------------------------


;---------------------------------------------------
; Insert your custom declarations above this banner
;---------------------------------------------------
;@PSoC_UserCode_END@ (Do not change this line.)


AREA UserModules (ROM, REL)

;-----------------------------------------------------------------------------
;  FUNCTION NAME: _Timer16_1_ISR
;
;  DESCRIPTION: Unless modified, this implements only a null handler stub.
;
;-----------------------------------------------------------------------------
;

_Timer16_1_ISR:

   ;@PSoC_UserCode_BODY@ (Do not change this line.)
   ;---------------------------------------------------
   ; Insert your custom assembly code below this banner
   ;---------------------------------------------------
   ;   NOTE: interrupt service routines must preserve
   ;   the values of the A and X CPU registers.
   
   ;---------------------------------------------------
   ; Insert your custom assembly code above this banner
   ;---------------------------------------------------
   
   	inc [milisec]
   
	asr [milisec]
	jnc calcSec
	rlc [milisec]
	mov [msec], 0x50

printLCD:

	mov   A, 0                    ; row
   	mov   X, 0                    ; column
   	lcall LCD_1_Position
   	mov   A, >sRomString23
   	mov   X, <sRomString23
   	lcall LCD_1_PrCString         ; Display string
	;   hour
   	mov   A, 1                    ; row
   	mov   X, 0                    ; column
   	lcall LCD_1_Position          ; display result in hex 
   	mov A,[hour]
   	lcall LCD_1_PrHexByte
	;  :
	mov   A, 1                    ; row
   	mov   X, 2                    ; column
   	lcall LCD_1_Position
   	mov   A, >sRomString2
   	mov   X, <sRomString2
	lcall LCD_1_PrCString         ; Display string
	;  min
	mov   A, 1                    ; row
   	mov   X, 3                    ; column
   	lcall LCD_1_Position          ; display result in hex 
   	mov A,[min]
   	lcall LCD_1_PrHexByte
	;   :
	mov   A, 1                    ; row
   	mov   X, 5                    ; column
   	lcall LCD_1_Position
   	mov   A, >sRomString2
   	mov   X, <sRomString2
	lcall LCD_1_PrCString         ; Display string
	;  sec
	mov   A, 1                    ; row
   	mov   X, 6                    ; column
   	lcall LCD_1_Position          ; display result in hex 
   	mov A,[sec]
   	lcall LCD_1_PrHexByte
	;  .
	mov   A, 1                    ; row
   	mov   X, 8                    ; column
   	lcall LCD_1_Position
   	mov   A, >sRomString3
   	mov   X, <sRomString3
	lcall LCD_1_PrCString         ; Display string
	;  msec
	mov   A, 1                    ; row
   	mov   X, 9                    ; column
   	lcall LCD_1_Position          ; display result in hex 
	mov A,[msec]
   	lcall LCD_1_PrHexByte
	; 00000
	mov   A, 1                    ; row
   	mov   X, 11                    ; column
   	lcall LCD_1_Position
   	mov   A, >sRomString22
   	mov   X, <sRomString22
	lcall LCD_1_PrCString         ; Display string
	
	reti
	
	
calcSec:
	rlc [milisec]
	mov [msec], 0x0
	mov [milisec], 0x0
	inc [sec]
	cmp [sec],0x3B
	jnz printLCD

calcMin:
	mov [sec],0x00
	inc [min]
	cmp [min],0x3B
	jnz printLCD

calcHr:
	mov [min],0x00
	inc [hour]
	cmp [hour],0x63
	jnz printLCD

reset:
	mov [milisec],0x00
	mov [sec],0x00
	mov [min],0x00
	mov [hour],0x00
	jnz printLCD
     
   ;---------------------------------------------------
   ; Insert a lcall to a C function below this banner
   ; and un-comment the lines between these banners
   ;---------------------------------------------------
   
   ;PRESERVE_CPU_CONTEXT
   ;lcall _My_C_Function
   ;RESTORE_CPU_CONTEXT
   
   ;---------------------------------------------------
   ; Insert a lcall to a C function above this banner
   ; and un-comment the lines between these banners
   ;---------------------------------------------------
   ;@PSoC_UserCode_END@ (Do not change this line.)

   reti


; end of file Timer16_1INT.asm
